
TorqueController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083cc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08008570  08008570  00009570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008958  08008958  0000a33c  2**0
                  CONTENTS
  4 .ARM          00000008  08008958  08008958  00009958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008960  08008960  0000a33c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008960  08008960  00009960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008964  08008964  00009964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000033c  20000000  08008968  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000340  08008ca4  0000a340  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  08008ca4  0000a6a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a33c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e782  00000000  00000000  0000a36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f17  00000000  00000000  00018aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0001aa08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac3  00000000  00000000  0001b7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b1c  00000000  00000000  0001c28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6c0  00000000  00000000  00034da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c85f  00000000  00000000  00044467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0cc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba0  00000000  00000000  000e0d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e58ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000340 	.word	0x20000340
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008554 	.word	0x08008554

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000344 	.word	0x20000344
 80001dc:	08008554 	.word	0x08008554

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <cb_init>:
	void *head;       // pointer to head
	void *tail;       // pointer to tail
	bool writing;  // signals if the buffer is being written
} circular_buffer;

void cb_init(circular_buffer *cb, size_t capacity, size_t sz) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	cb->buffer = calloc(capacity, sz);
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	68b8      	ldr	r0, [r7, #8]
 8000ef8:	f004 fcc2 	bl	8005880 <calloc>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	601a      	str	r2, [r3, #0]
	if (cb->buffer == NULL)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <cb_init+0x2a>
		printf("ALLOCATED NULL\n\r");
 8000f0c:	4811      	ldr	r0, [pc, #68]	@ (8000f54 <cb_init+0x6c>)
 8000f0e:	f005 faa3 	bl	8006458 <iprintf>
	// handle error
	cb->buffer_end = (char*) cb->buffer + capacity * sz;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	fb01 f303 	mul.w	r3, r1, r3
 8000f1e:	441a      	add	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	605a      	str	r2, [r3, #4]
	cb->capacity = capacity;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	609a      	str	r2, [r3, #8]
	cb->count = 0;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
	cb->sz = sz;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	611a      	str	r2, [r3, #16]
	cb->head = cb->buffer;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	615a      	str	r2, [r3, #20]
	cb->tail = cb->buffer;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	619a      	str	r2, [r3, #24]
	cb->writing = false;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	771a      	strb	r2, [r3, #28]

}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	08008570 	.word	0x08008570

08000f58 <cb_push_back>:
void cb_free(circular_buffer *cb) {
	free(cb->buffer);
	// clear out other fields too, just to be safe
}

void cb_push_back(circular_buffer *cb, const void *item) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	if (cb->count == cb->capacity) {
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d102      	bne.n	8000f74 <cb_push_back+0x1c>
		printf("ERROR PUSH BACK \n\r");
 8000f6e:	4815      	ldr	r0, [pc, #84]	@ (8000fc4 <cb_push_back+0x6c>)
 8000f70:	f005 fa72 	bl	8006458 <iprintf>
		// handle error
	}
	cb->writing = true;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	771a      	strb	r2, [r3, #28]
	memmove(cb->head, item, cb->sz);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6958      	ldr	r0, [r3, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	461a      	mov	r2, r3
 8000f84:	6839      	ldr	r1, [r7, #0]
 8000f86:	f005 fabc 	bl	8006502 <memmove>
	cb->head = (char*) cb->head + cb->sz;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695a      	ldr	r2, [r3, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	441a      	add	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	615a      	str	r2, [r3, #20]
	if (cb->head == cb->buffer_end)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	695a      	ldr	r2, [r3, #20]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d103      	bne.n	8000fac <cb_push_back+0x54>
		cb->head = cb->buffer;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	615a      	str	r2, [r3, #20]
	cb->count++;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60da      	str	r2, [r3, #12]
	cb->writing = false;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	771a      	strb	r2, [r3, #28]
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	08008584 	.word	0x08008584

08000fc8 <cb_pop_front>:

void cb_pop_front(circular_buffer *cb, void *item) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
	if (cb->count == 0) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <cb_pop_front+0x18>
		printf("ERROR PUSH BACK \n\r");
 8000fda:	4815      	ldr	r0, [pc, #84]	@ (8001030 <cb_pop_front+0x68>)
 8000fdc:	f005 fa3c 	bl	8006458 <iprintf>
		// handle error
	}
	memmove(item, cb->tail, cb->sz);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6999      	ldr	r1, [r3, #24]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	6838      	ldr	r0, [r7, #0]
 8000fec:	f005 fa89 	bl	8006502 <memmove>
	cb->tail = (char*) cb->tail + cb->sz;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	441a      	add	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
	if (cb->tail == cb->buffer_end)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699a      	ldr	r2, [r3, #24]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	d103      	bne.n	8001012 <cb_pop_front+0x4a>
		cb->tail = cb->buffer;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	619a      	str	r2, [r3, #24]
	while ((cb->writing))
 8001012:	bf00      	nop
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7f1b      	ldrb	r3, [r3, #28]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1fb      	bne.n	8001014 <cb_pop_front+0x4c>
		;
	cb->count--;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60da      	str	r2, [r3, #12]
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	08008584 	.word	0x08008584

08001034 <_write>:
	double reference;
	double last_tick;
} record;

/* BEGIN USART WRITE FUNCTION (used by printf)*/
int _write(int file, char *data, int len) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d00a      	beq.n	800105c <_write+0x28>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d007      	beq.n	800105c <_write+0x28>
		errno = EBADF;
 800104c:	f005 fad6 	bl	80065fc <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	2209      	movs	r2, #9
 8001054:	601a      	str	r2, [r3, #0]
		return -1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e00f      	b.n	800107c <_write+0x48>
	}

	// arbitrary timeout 1000
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	4807      	ldr	r0, [pc, #28]	@ (8001084 <_write+0x50>)
 8001068:	f004 f84e 	bl	8005108 <HAL_UART_Transmit>
 800106c:	4603      	mov	r3, r0
 800106e:	75fb      	strb	r3, [r7, #23]
			1000);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <_write+0x46>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	e000      	b.n	800107c <_write+0x48>
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000047c 	.word	0x2000047c

08001088 <setPulseFromDutyValue>:

void setPulseFromDutyValue(double dutyVal) {
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	ed87 0b00 	vstr	d0, [r7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // enable the motor driver
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001098:	4877      	ldr	r0, [pc, #476]	@ (8001278 <setPulseFromDutyValue+0x1f0>)
 800109a:	f002 fabb 	bl	8003614 <HAL_GPIO_WritePin>

	uint16_t channelToModulate;
	uint16_t channelToStop;

	if (dutyVal > 0) {
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd3d 	bl	8000b28 <__aeabi_dcmpgt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <setPulseFromDutyValue+0x36>
		channelToModulate = TIM_CHANNEL_1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	81fb      	strh	r3, [r7, #14]
		channelToStop = TIM_CHANNEL_2;
 80010b8:	2304      	movs	r3, #4
 80010ba:	81bb      	strh	r3, [r7, #12]
 80010bc:	e003      	b.n	80010c6 <setPulseFromDutyValue+0x3e>
	} else {
		channelToModulate = TIM_CHANNEL_2;
 80010be:	2304      	movs	r3, #4
 80010c0:	81fb      	strh	r3, [r7, #14]
		channelToStop = TIM_CHANNEL_1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim3, channelToStop, 0);
 80010c6:	89bb      	ldrh	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d104      	bne.n	80010d6 <setPulseFromDutyValue+0x4e>
 80010cc:	4b6b      	ldr	r3, [pc, #428]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80010d4:	e013      	b.n	80010fe <setPulseFromDutyValue+0x76>
 80010d6:	89bb      	ldrh	r3, [r7, #12]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d104      	bne.n	80010e6 <setPulseFromDutyValue+0x5e>
 80010dc:	4b67      	ldr	r3, [pc, #412]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	6393      	str	r3, [r2, #56]	@ 0x38
 80010e4:	e00b      	b.n	80010fe <setPulseFromDutyValue+0x76>
 80010e6:	89bb      	ldrh	r3, [r7, #12]
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d104      	bne.n	80010f6 <setPulseFromDutyValue+0x6e>
 80010ec:	4b63      	ldr	r3, [pc, #396]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2300      	movs	r3, #0
 80010f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80010f4:	e003      	b.n	80010fe <setPulseFromDutyValue+0x76>
 80010f6:	4b61      	ldr	r3, [pc, #388]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	2300      	movs	r3, #0
 80010fc:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d12b      	bne.n	800115c <setPulseFromDutyValue+0xd4>
 8001104:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001108:	f7ff fd2e 	bl	8000b68 <__aeabi_d2iz>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	bfb8      	it	lt
 8001112:	425b      	neglt	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa0d 	bl	8000534 <__aeabi_i2d>
 800111a:	4604      	mov	r4, r0
 800111c:	460d      	mov	r5, r1
 800111e:	4b57      	ldr	r3, [pc, #348]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f9f6 	bl	8000514 <__aeabi_ui2d>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4620      	mov	r0, r4
 800112e:	4629      	mov	r1, r5
 8001130:	f7ff fa6a 	bl	8000608 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b4f      	ldr	r3, [pc, #316]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 8001142:	f7ff fb8b 	bl	800085c <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	494c      	ldr	r1, [pc, #304]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 800114c:	680c      	ldr	r4, [r1, #0]
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fd31 	bl	8000bb8 <__aeabi_d2uiz>
 8001156:	4603      	mov	r3, r0
 8001158:	6363      	str	r3, [r4, #52]	@ 0x34
			(abs(dutyVal) * ((double )htim3.Init.Period)) / 100); //cast integer value to double to correctly perform division between decimal numbers
}
 800115a:	e088      	b.n	800126e <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	2b04      	cmp	r3, #4
 8001160:	d12b      	bne.n	80011ba <setPulseFromDutyValue+0x132>
 8001162:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001166:	f7ff fcff 	bl	8000b68 <__aeabi_d2iz>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	bfb8      	it	lt
 8001170:	425b      	neglt	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9de 	bl	8000534 <__aeabi_i2d>
 8001178:	4604      	mov	r4, r0
 800117a:	460d      	mov	r5, r1
 800117c:	4b3f      	ldr	r3, [pc, #252]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9c7 	bl	8000514 <__aeabi_ui2d>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff fa3b 	bl	8000608 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 80011a0:	f7ff fb5c 	bl	800085c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4934      	ldr	r1, [pc, #208]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80011aa:	680c      	ldr	r4, [r1, #0]
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fd02 	bl	8000bb8 <__aeabi_d2uiz>
 80011b4:	4603      	mov	r3, r0
 80011b6:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80011b8:	e059      	b.n	800126e <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d12b      	bne.n	8001218 <setPulseFromDutyValue+0x190>
 80011c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011c4:	f7ff fcd0 	bl	8000b68 <__aeabi_d2iz>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bfb8      	it	lt
 80011ce:	425b      	neglt	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9af 	bl	8000534 <__aeabi_i2d>
 80011d6:	4604      	mov	r4, r0
 80011d8:	460d      	mov	r5, r1
 80011da:	4b28      	ldr	r3, [pc, #160]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f998 	bl	8000514 <__aeabi_ui2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7ff fa0c 	bl	8000608 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 80011fe:	f7ff fb2d 	bl	800085c <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	491d      	ldr	r1, [pc, #116]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001208:	680c      	ldr	r4, [r1, #0]
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fcd3 	bl	8000bb8 <__aeabi_d2uiz>
 8001212:	4603      	mov	r3, r0
 8001214:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001216:	e02a      	b.n	800126e <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 8001218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800121c:	f7ff fca4 	bl	8000b68 <__aeabi_d2iz>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	bfb8      	it	lt
 8001226:	425b      	neglt	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f983 	bl	8000534 <__aeabi_i2d>
 800122e:	4604      	mov	r4, r0
 8001230:	460d      	mov	r5, r1
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f96c 	bl	8000514 <__aeabi_ui2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff f9e0 	bl	8000608 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 8001256:	f7ff fb01 	bl	800085c <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4907      	ldr	r1, [pc, #28]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001260:	680c      	ldr	r4, [r1, #0]
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fca7 	bl	8000bb8 <__aeabi_d2uiz>
 800126a:	4603      	mov	r3, r0
 800126c:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bdb0      	pop	{r4, r5, r7, pc}
 8001276:	bf00      	nop
 8001278:	40020000 	.word	0x40020000
 800127c:	200003ec 	.word	0x200003ec
 8001280:	40590000 	.word	0x40590000

08001284 <getTicksDelta>:

double getSpeedByDelta(double ticksDelta) {
	return ticksDelta * 60 / (8400 * 0.005);
}

double getTicksDelta(double ticks, double last) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	ed87 0b02 	vstr	d0, [r7, #8]
 800128e:	ed87 1b00 	vstr	d1, [r7]
	double delta;

	if (abs(ticks - last) <= ceil(12600 * 0.005))
 8001292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001296:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800129a:	f7fe fffd 	bl	8000298 <__aeabi_dsub>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fc5f 	bl	8000b68 <__aeabi_d2iz>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f113 0f3f 	cmn.w	r3, #63	@ 0x3f
 80012b0:	db19      	blt.n	80012e6 <getTicksDelta+0x62>
 80012b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ba:	f7fe ffed 	bl	8000298 <__aeabi_dsub>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fc4f 	bl	8000b68 <__aeabi_d2iz>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80012ce:	dc0a      	bgt.n	80012e6 <getTicksDelta+0x62>
		delta = ticks - last;
 80012d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012d8:	f7fe ffde 	bl	8000298 <__aeabi_dsub>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80012e4:	e041      	b.n	800136a <getTicksDelta+0xe6>
	else {
		if (last > ticks)
 80012e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ee:	f7ff fc1b 	bl	8000b28 <__aeabi_dcmpgt>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01c      	beq.n	8001332 <getTicksDelta+0xae>
			delta = ticks + pow(2, 16) - 1 - last;
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <getTicksDelta+0xfc>)
 80012fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001302:	f7fe ffcb 	bl	800029c <__adddf3>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <getTicksDelta+0x100>)
 8001314:	f7fe ffc0 	bl	8000298 <__aeabi_dsub>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001324:	f7fe ffb8 	bl	8000298 <__aeabi_dsub>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001330:	e01b      	b.n	800136a <getTicksDelta+0xe6>
		else
			delta = ticks - pow(2, 16) + 1 - last;
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <getTicksDelta+0xfc>)
 8001338:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800133c:	f7fe ffac 	bl	8000298 <__aeabi_dsub>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <getTicksDelta+0x100>)
 800134e:	f7fe ffa5 	bl	800029c <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800135e:	f7fe ff9b 	bl	8000298 <__aeabi_dsub>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	return delta;
 800136a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800136e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001372:	eeb0 0a47 	vmov.f32	s0, s14
 8001376:	eef0 0a67 	vmov.f32	s1, s15
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40f00000 	.word	0x40f00000
 8001384:	3ff00000 	.word	0x3ff00000

08001388 <sign>:
} x_hat_t;

x_hat_t observer_state = {0, 0, 0};


double sign(double x) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	ed87 0b00 	vstr	d0, [r7]
	if (x >= 0)
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800139e:	f7ff fbb9 	bl	8000b14 <__aeabi_dcmpge>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <sign+0x28>
		return 1;
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <sign+0x40>)
 80013ae:	e002      	b.n	80013b6 <sign+0x2e>
	else
		return -1;
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <sign+0x44>)
}
 80013b6:	ec43 2b17 	vmov	d7, r2, r3
 80013ba:	eeb0 0a47 	vmov.f32	s0, s14
 80013be:	eef0 0a67 	vmov.f32	s1, s15
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	3ff00000 	.word	0x3ff00000
 80013cc:	bff00000 	.word	0xbff00000

080013d0 <getPositionByDelta>:


double getPositionByDelta(double ticksDelta) {
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	ed87 0b00 	vstr	d0, [r7]
	//
	ticksStar = ticksStar + (double)ticksDelta;
 80013da:	4b25      	ldr	r3, [pc, #148]	@ (8001470 <getPositionByDelta+0xa0>)
 80013dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013e4:	f7fe ff5a 	bl	800029c <__adddf3>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4920      	ldr	r1, [pc, #128]	@ (8001470 <getPositionByDelta+0xa0>)
 80013ee:	e9c1 2300 	strd	r2, r3, [r1]
	double completeTheta = 2*3.14159265359*(ticksStar/8400);
 80013f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <getPositionByDelta+0xa0>)
 80013f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f8:	a319      	add	r3, pc, #100	@ (adr r3, 8001460 <getPositionByDelta+0x90>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff fa2d 	bl	800085c <__aeabi_ddiv>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	a317      	add	r3, pc, #92	@ (adr r3, 8001468 <getPositionByDelta+0x98>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	f7ff f8fa 	bl	8000608 <__aeabi_dmul>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double position=sign(completeTheta)*fmod(completeTheta,2*3.14159265359);
 800141c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001420:	f7ff ffb2 	bl	8001388 <sign>
 8001424:	ec55 4b10 	vmov	r4, r5, d0
 8001428:	ed9f 1b0f 	vldr	d1, [pc, #60]	@ 8001468 <getPositionByDelta+0x98>
 800142c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001430:	f006 feda 	bl	80081e8 <fmod>
 8001434:	ec53 2b10 	vmov	r2, r3, d0
 8001438:	4620      	mov	r0, r4
 800143a:	4629      	mov	r1, r5
 800143c:	f7ff f8e4 	bl	8000608 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return position;
 8001448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800144c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001450:	eeb0 0a47 	vmov.f32	s0, s14
 8001454:	eef0 0a67 	vmov.f32	s1, s15
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bdb0      	pop	{r4, r5, r7, pc}
 800145e:	bf00      	nop
 8001460:	00000000 	.word	0x00000000
 8001464:	40c06800 	.word	0x40c06800
 8001468:	54442eea 	.word	0x54442eea
 800146c:	401921fb 	.word	0x401921fb
 8001470:	20000530 	.word	0x20000530

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001478:	b09f      	sub	sp, #124	@ 0x7c
 800147a:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147c:	f001 f9f0 	bl	8002860 <HAL_Init>

  /* USER CODE BEGIN Init */

  size_t bufferSize = (size_t)ceil(2 * WAITING / (Ts * samplingPrescaler));
 8001480:	4b4e      	ldr	r3, [pc, #312]	@ (80015bc <main+0x148>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f855 	bl	8000534 <__aeabi_i2d>
 800148a:	4b4d      	ldr	r3, [pc, #308]	@ (80015c0 <main+0x14c>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f8ba 	bl	8000608 <__aeabi_dmul>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	f04f 0000 	mov.w	r0, #0
 800149c:	4949      	ldr	r1, [pc, #292]	@ (80015c4 <main+0x150>)
 800149e:	f7ff f9dd 	bl	800085c <__aeabi_ddiv>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	ec43 2b17 	vmov	d7, r2, r3
 80014aa:	eeb0 0a47 	vmov.f32	s0, s14
 80014ae:	eef0 0a67 	vmov.f32	s1, s15
 80014b2:	f006 fec9 	bl	8008248 <ceil>
 80014b6:	ec53 2b10 	vmov	r2, r3, d0
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff fb7b 	bl	8000bb8 <__aeabi_d2uiz>
 80014c2:	4603      	mov	r3, r0
 80014c4:	647b      	str	r3, [r7, #68]	@ 0x44
  cb_init(&myBuff, bufferSize, sizeof(record));
 80014c6:	2238      	movs	r2, #56	@ 0x38
 80014c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80014ca:	483f      	ldr	r0, [pc, #252]	@ (80015c8 <main+0x154>)
 80014cc:	f7ff fd0c 	bl	8000ee8 <cb_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d0:	f000 f88a 	bl	80015e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d4:	f000 fa98 	bl	8001a08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014d8:	f000 fa6c 	bl	80019b4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80014dc:	f000 f99a 	bl	8001814 <MX_TIM3_Init>
  MX_TIM1_Init();
 80014e0:	f000 f940 	bl	8001764 <MX_TIM1_Init>
  MX_TIM4_Init();
 80014e4:	f000 fa18 	bl	8001918 <MX_TIM4_Init>
  MX_ADC1_Init();
 80014e8:	f000 f8ea 	bl	80016c0 <MX_ADC1_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014ec:	2100      	movs	r1, #0
 80014ee:	4837      	ldr	r0, [pc, #220]	@ (80015cc <main+0x158>)
 80014f0:	f002 fe68 	bl	80041c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014f4:	2104      	movs	r1, #4
 80014f6:	4835      	ldr	r0, [pc, #212]	@ (80015cc <main+0x158>)
 80014f8:	f002 fe64 	bl	80041c4 <HAL_TIM_PWM_Start>

	int referenceIndex = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	64fb      	str	r3, [r7, #76]	@ 0x4c

	referenceVal = referenceVals[referenceIndex];
 8001500:	4a33      	ldr	r2, [pc, #204]	@ (80015d0 <main+0x15c>)
 8001502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4413      	add	r3, r2
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	4931      	ldr	r1, [pc, #196]	@ (80015d4 <main+0x160>)
 800150e:	e9c1 2300 	strd	r2, r3, [r1]
	printf("INIT\n\r"); // initialize the Matlab tool for COM data acquiring
 8001512:	4831      	ldr	r0, [pc, #196]	@ (80015d8 <main+0x164>)
 8001514:	f004 ffa0 	bl	8006458 <iprintf>
	HAL_Delay(1000);
 8001518:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800151c:	f001 fa12 	bl	8002944 <HAL_Delay>
	printf("INIT\n\r"); // initialize the Matlab tool for COM data acquiring
 8001520:	482d      	ldr	r0, [pc, #180]	@ (80015d8 <main+0x164>)
 8001522:	f004 ff99 	bl	8006458 <iprintf>
	HAL_TIM_Base_Start(&htim1);
 8001526:	482d      	ldr	r0, [pc, #180]	@ (80015dc <main+0x168>)
 8001528:	f002 fd36 	bl	8003f98 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 800152c:	482c      	ldr	r0, [pc, #176]	@ (80015e0 <main+0x16c>)
 800152e:	f002 fd8d 	bl	800404c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
			size_t nEntriesToSend = myBuff.count; //number of samples not read yet
 8001532:	4b25      	ldr	r3, [pc, #148]	@ (80015c8 <main+0x154>)
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	643b      	str	r3, [r7, #64]	@ 0x40
			record retrieved; //buffer entry

			for (size_t count = 0; count < nEntriesToSend; count++) {
 8001538:	2300      	movs	r3, #0
 800153a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800153c:	e024      	b.n	8001588 <main+0x114>
				cb_pop_front(&myBuff, &retrieved); //take entry from the buffer
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4619      	mov	r1, r3
 8001544:	4820      	ldr	r0, [pc, #128]	@ (80015c8 <main+0x154>)
 8001546:	f7ff fd3f 	bl	8000fc8 <cb_pop_front>
				printf("%lu, %f, %f, %lu, %f, %f, %f\n\r", retrieved.currentTimestamp,
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001552:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001556:	69be      	ldr	r6, [r7, #24]
 8001558:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800155c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001560:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8001564:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001568:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800156c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001570:	9602      	str	r6, [sp, #8]
 8001572:	e9cd 2300 	strd	r2, r3, [sp]
 8001576:	4652      	mov	r2, sl
 8001578:	465b      	mov	r3, fp
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4819      	ldr	r0, [pc, #100]	@ (80015e4 <main+0x170>)
 800157e:	f004 ff6b 	bl	8006458 <iprintf>
			for (size_t count = 0; count < nEntriesToSend; count++) {
 8001582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001584:	3301      	adds	r3, #1
 8001586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800158a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800158c:	429a      	cmp	r2, r3
 800158e:	d3d6      	bcc.n	800153e <main+0xca>
						retrieved.current_u, retrieved.current_y,
						retrieved.cycleCoreDuration, retrieved.current_tick, retrieved.last_tick,retrieved.reference); // send values via USART using format: value1, value2, value3, ... valuen \n \r
			}
			referenceVal = referenceVals[referenceIndex];
 8001590:	4a0f      	ldr	r2, [pc, #60]	@ (80015d0 <main+0x15c>)
 8001592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	490d      	ldr	r1, [pc, #52]	@ (80015d4 <main+0x160>)
 800159e:	e9c1 2300 	strd	r2, r3, [r1]
			referenceIndex = referenceIndex + 1;
 80015a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015a4:	3301      	adds	r3, #1
 80015a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
			HAL_Delay(WAITING*1000); // takes a time value in ms
 80015a8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80015ac:	f001 f9ca 	bl	8002944 <HAL_Delay>
			if (referenceIndex > 7)
 80015b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015b2:	2b07      	cmp	r3, #7
 80015b4:	ddbd      	ble.n	8001532 <main+0xbe>
				referenceIndex = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	while (1) {
 80015ba:	e7ba      	b.n	8001532 <main+0xbe>
 80015bc:	2000004c 	.word	0x2000004c
 80015c0:	20000000 	.word	0x20000000
 80015c4:	40240000 	.word	0x40240000
 80015c8:	200004c4 	.word	0x200004c4
 80015cc:	200003ec 	.word	0x200003ec
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20000520 	.word	0x20000520
 80015d8:	08008598 	.word	0x08008598
 80015dc:	200003a4 	.word	0x200003a4
 80015e0:	20000434 	.word	0x20000434
 80015e4:	080085a0 	.word	0x080085a0

080015e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b094      	sub	sp, #80	@ 0x50
 80015ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ee:	f107 0320 	add.w	r3, r7, #32
 80015f2:	2230      	movs	r2, #48	@ 0x30
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f004 ff9d 	bl	8006536 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	4b29      	ldr	r3, [pc, #164]	@ (80016b8 <SystemClock_Config+0xd0>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	4a28      	ldr	r2, [pc, #160]	@ (80016b8 <SystemClock_Config+0xd0>)
 8001616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	@ 0x40
 800161c:	4b26      	ldr	r3, [pc, #152]	@ (80016b8 <SystemClock_Config+0xd0>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <SystemClock_Config+0xd4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001634:	4a21      	ldr	r2, [pc, #132]	@ (80016bc <SystemClock_Config+0xd4>)
 8001636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b1f      	ldr	r3, [pc, #124]	@ (80016bc <SystemClock_Config+0xd4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001648:	2302      	movs	r3, #2
 800164a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800164c:	2301      	movs	r3, #1
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001650:	2310      	movs	r3, #16
 8001652:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001654:	2302      	movs	r3, #2
 8001656:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001658:	2300      	movs	r3, #0
 800165a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800165c:	2310      	movs	r3, #16
 800165e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001660:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001664:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001666:	2304      	movs	r3, #4
 8001668:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800166a:	2304      	movs	r3, #4
 800166c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166e:	f107 0320 	add.w	r3, r7, #32
 8001672:	4618      	mov	r0, r3
 8001674:	f001 ffe8 	bl	8003648 <HAL_RCC_OscConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800167e:	f000 fe55 	bl	800232c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001682:	230f      	movs	r3, #15
 8001684:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001686:	2302      	movs	r3, #2
 8001688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800168e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	2102      	movs	r1, #2
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 fa4a 	bl	8003b38 <HAL_RCC_ClockConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016aa:	f000 fe3f 	bl	800232c <Error_Handler>
  }
}
 80016ae:	bf00      	nop
 80016b0:	3750      	adds	r7, #80	@ 0x50
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000

080016c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016c6:	463b      	mov	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016d2:	4b21      	ldr	r3, [pc, #132]	@ (8001758 <MX_ADC1_Init+0x98>)
 80016d4:	4a21      	ldr	r2, [pc, #132]	@ (800175c <MX_ADC1_Init+0x9c>)
 80016d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001758 <MX_ADC1_Init+0x98>)
 80016da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001758 <MX_ADC1_Init+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001758 <MX_ADC1_Init+0x98>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <MX_ADC1_Init+0x98>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016f2:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <MX_ADC1_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016fa:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <MX_ADC1_Init+0x98>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001700:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <MX_ADC1_Init+0x98>)
 8001702:	4a17      	ldr	r2, [pc, #92]	@ (8001760 <MX_ADC1_Init+0xa0>)
 8001704:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <MX_ADC1_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <MX_ADC1_Init+0x98>)
 800170e:	2201      	movs	r2, #1
 8001710:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <MX_ADC1_Init+0x98>)
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <MX_ADC1_Init+0x98>)
 800171c:	2201      	movs	r2, #1
 800171e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001720:	480d      	ldr	r0, [pc, #52]	@ (8001758 <MX_ADC1_Init+0x98>)
 8001722:	f001 f933 	bl	800298c <HAL_ADC_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800172c:	f000 fdfe 	bl	800232c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001730:	230a      	movs	r3, #10
 8001732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001734:	2301      	movs	r3, #1
 8001736:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173c:	463b      	mov	r3, r7
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	@ (8001758 <MX_ADC1_Init+0x98>)
 8001742:	f001 fab3 	bl	8002cac <HAL_ADC_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800174c:	f000 fdee 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000035c 	.word	0x2000035c
 800175c:	40012000 	.word	0x40012000
 8001760:	0f000001 	.word	0x0f000001

08001764 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	@ 0x30
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	2224      	movs	r2, #36	@ 0x24
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f004 fedf 	bl	8006536 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001780:	4b22      	ldr	r3, [pc, #136]	@ (800180c <MX_TIM1_Init+0xa8>)
 8001782:	4a23      	ldr	r2, [pc, #140]	@ (8001810 <MX_TIM1_Init+0xac>)
 8001784:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001786:	4b21      	ldr	r3, [pc, #132]	@ (800180c <MX_TIM1_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178c:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <MX_TIM1_Init+0xa8>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001792:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <MX_TIM1_Init+0xa8>)
 8001794:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001798:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179a:	4b1c      	ldr	r3, [pc, #112]	@ (800180c <MX_TIM1_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <MX_TIM1_Init+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a6:	4b19      	ldr	r3, [pc, #100]	@ (800180c <MX_TIM1_Init+0xa8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017ac:	2303      	movs	r3, #3
 80017ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017b4:	2301      	movs	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017c4:	2301      	movs	r3, #1
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	4619      	mov	r1, r3
 80017d6:	480d      	ldr	r0, [pc, #52]	@ (800180c <MX_TIM1_Init+0xa8>)
 80017d8:	f002 fda4 	bl	8004324 <HAL_TIM_Encoder_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80017e2:	f000 fda3 	bl	800232c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	4619      	mov	r1, r3
 80017f2:	4806      	ldr	r0, [pc, #24]	@ (800180c <MX_TIM1_Init+0xa8>)
 80017f4:	f003 fbb6 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80017fe:	f000 fd95 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	3730      	adds	r7, #48	@ 0x30
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200003a4 	.word	0x200003a4
 8001810:	40010000 	.word	0x40010000

08001814 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08e      	sub	sp, #56	@ 0x38
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800181a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	615a      	str	r2, [r3, #20]
 8001842:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001844:	4b32      	ldr	r3, [pc, #200]	@ (8001910 <MX_TIM3_Init+0xfc>)
 8001846:	4a33      	ldr	r2, [pc, #204]	@ (8001914 <MX_TIM3_Init+0x100>)
 8001848:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84 - 1;
 800184a:	4b31      	ldr	r3, [pc, #196]	@ (8001910 <MX_TIM3_Init+0xfc>)
 800184c:	2253      	movs	r2, #83	@ 0x53
 800184e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b2f      	ldr	r3, [pc, #188]	@ (8001910 <MX_TIM3_Init+0xfc>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 - 1;
 8001856:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <MX_TIM3_Init+0xfc>)
 8001858:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800185c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185e:	4b2c      	ldr	r3, [pc, #176]	@ (8001910 <MX_TIM3_Init+0xfc>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001864:	4b2a      	ldr	r3, [pc, #168]	@ (8001910 <MX_TIM3_Init+0xfc>)
 8001866:	2280      	movs	r2, #128	@ 0x80
 8001868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800186a:	4829      	ldr	r0, [pc, #164]	@ (8001910 <MX_TIM3_Init+0xfc>)
 800186c:	f002 fb44 	bl	8003ef8 <HAL_TIM_Base_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001876:	f000 fd59 	bl	800232c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800187e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001880:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001884:	4619      	mov	r1, r3
 8001886:	4822      	ldr	r0, [pc, #136]	@ (8001910 <MX_TIM3_Init+0xfc>)
 8001888:	f002 ffa4 	bl	80047d4 <HAL_TIM_ConfigClockSource>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001892:	f000 fd4b 	bl	800232c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001896:	481e      	ldr	r0, [pc, #120]	@ (8001910 <MX_TIM3_Init+0xfc>)
 8001898:	f002 fc3a 	bl	8004110 <HAL_TIM_PWM_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018a2:	f000 fd43 	bl	800232c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ae:	f107 0320 	add.w	r3, r7, #32
 80018b2:	4619      	mov	r1, r3
 80018b4:	4816      	ldr	r0, [pc, #88]	@ (8001910 <MX_TIM3_Init+0xfc>)
 80018b6:	f003 fb55 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80018c0:	f000 fd34 	bl	800232c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c4:	2360      	movs	r3, #96	@ 0x60
 80018c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2200      	movs	r2, #0
 80018d8:	4619      	mov	r1, r3
 80018da:	480d      	ldr	r0, [pc, #52]	@ (8001910 <MX_TIM3_Init+0xfc>)
 80018dc:	f002 feb8 	bl	8004650 <HAL_TIM_PWM_ConfigChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80018e6:	f000 fd21 	bl	800232c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2204      	movs	r2, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	@ (8001910 <MX_TIM3_Init+0xfc>)
 80018f2:	f002 fead 	bl	8004650 <HAL_TIM_PWM_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80018fc:	f000 fd16 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001900:	4803      	ldr	r0, [pc, #12]	@ (8001910 <MX_TIM3_Init+0xfc>)
 8001902:	f000 fe0b 	bl	800251c <HAL_TIM_MspPostInit>

}
 8001906:	bf00      	nop
 8001908:	3738      	adds	r7, #56	@ 0x38
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200003ec 	.word	0x200003ec
 8001914:	40000400 	.word	0x40000400

08001918 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	463b      	mov	r3, r7
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001934:	4b1d      	ldr	r3, [pc, #116]	@ (80019ac <MX_TIM4_Init+0x94>)
 8001936:	4a1e      	ldr	r2, [pc, #120]	@ (80019b0 <MX_TIM4_Init+0x98>)
 8001938:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84 - 1;
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <MX_TIM4_Init+0x94>)
 800193c:	2253      	movs	r2, #83	@ 0x53
 800193e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <MX_TIM4_Init+0x94>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000 - 1;
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <MX_TIM4_Init+0x94>)
 8001948:	f241 3287 	movw	r2, #4999	@ 0x1387
 800194c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <MX_TIM4_Init+0x94>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <MX_TIM4_Init+0x94>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800195a:	4814      	ldr	r0, [pc, #80]	@ (80019ac <MX_TIM4_Init+0x94>)
 800195c:	f002 facc 	bl	8003ef8 <HAL_TIM_Base_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001966:	f000 fce1 	bl	800232c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800196e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4619      	mov	r1, r3
 8001976:	480d      	ldr	r0, [pc, #52]	@ (80019ac <MX_TIM4_Init+0x94>)
 8001978:	f002 ff2c 	bl	80047d4 <HAL_TIM_ConfigClockSource>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001982:	f000 fcd3 	bl	800232c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800198e:	463b      	mov	r3, r7
 8001990:	4619      	mov	r1, r3
 8001992:	4806      	ldr	r0, [pc, #24]	@ (80019ac <MX_TIM4_Init+0x94>)
 8001994:	f003 fae6 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800199e:	f000 fcc5 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000434 	.word	0x20000434
 80019b0:	40000800 	.word	0x40000800

080019b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	@ (8001a04 <MX_USART2_UART_Init+0x50>)
 80019bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019be:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019da:	220c      	movs	r2, #12
 80019dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019de:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019ec:	f003 fb3c 	bl	8005068 <HAL_UART_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019f6:	f000 fc99 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000047c 	.word	0x2000047c
 8001a04:	40004400 	.word	0x40004400

08001a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <MX_GPIO_Init+0x9c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa4 <MX_GPIO_Init+0x9c>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <MX_GPIO_Init+0x9c>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <MX_GPIO_Init+0x9c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a18      	ldr	r2, [pc, #96]	@ (8001aa4 <MX_GPIO_Init+0x9c>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <MX_GPIO_Init+0x9c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <MX_GPIO_Init+0x9c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a11      	ldr	r2, [pc, #68]	@ (8001aa4 <MX_GPIO_Init+0x9c>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <MX_GPIO_Init+0x9c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a78:	480b      	ldr	r0, [pc, #44]	@ (8001aa8 <MX_GPIO_Init+0xa0>)
 8001a7a:	f001 fdcb 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	4619      	mov	r1, r3
 8001a96:	4804      	ldr	r0, [pc, #16]	@ (8001aa8 <MX_GPIO_Init+0xa0>)
 8001a98:	f001 fc38 	bl	800330c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000

08001aac <get_x_hat>:

/* USER CODE BEGIN 4 */
x_hat_t get_x_hat(double u_last, double y_now) {
 8001aac:	b5b0      	push	{r4, r5, r7, lr}
 8001aae:	b0a6      	sub	sp, #152	@ 0x98
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	ed87 0b08 	vstr	d0, [r7, #32]
 8001ab6:	ed87 1b06 	vstr	d1, [r7, #24]
	double x1 = observer_state.x1;
 8001aba:	4bb7      	ldr	r3, [pc, #732]	@ (8001d98 <get_x_hat+0x2ec>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	double x2 = observer_state.x2;
 8001ac4:	4bb4      	ldr	r3, [pc, #720]	@ (8001d98 <get_x_hat+0x2ec>)
 8001ac6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aca:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	double x3 = observer_state.x3;
 8001ace:	4bb2      	ldr	r3, [pc, #712]	@ (8001d98 <get_x_hat+0x2ec>)
 8001ad0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ad4:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	double u = u_last;
 8001ad8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001adc:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	double y = y_now;
 8001ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	x_hat_t state_estimated = {0,0,0};
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38


	state_estimated.x1 = observer_C.C11 * x1 + observer_C.C12 * x2 + observer_C.C13 * x3 + observer_D.D11 * u + observer_D.D12 * y;
 8001b0c:	4ba3      	ldr	r3, [pc, #652]	@ (8001d9c <get_x_hat+0x2f0>)
 8001b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b12:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001b16:	f7fe fd77 	bl	8000608 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4614      	mov	r4, r2
 8001b20:	461d      	mov	r5, r3
 8001b22:	4b9e      	ldr	r3, [pc, #632]	@ (8001d9c <get_x_hat+0x2f0>)
 8001b24:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b28:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001b2c:	f7fe fd6c 	bl	8000608 <__aeabi_dmul>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4620      	mov	r0, r4
 8001b36:	4629      	mov	r1, r5
 8001b38:	f7fe fbb0 	bl	800029c <__adddf3>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4614      	mov	r4, r2
 8001b42:	461d      	mov	r5, r3
 8001b44:	4b95      	ldr	r3, [pc, #596]	@ (8001d9c <get_x_hat+0x2f0>)
 8001b46:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001b4a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001b4e:	f7fe fd5b 	bl	8000608 <__aeabi_dmul>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4620      	mov	r0, r4
 8001b58:	4629      	mov	r1, r5
 8001b5a:	f7fe fb9f 	bl	800029c <__adddf3>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4614      	mov	r4, r2
 8001b64:	461d      	mov	r5, r3
 8001b66:	4b8e      	ldr	r3, [pc, #568]	@ (8001da0 <get_x_hat+0x2f4>)
 8001b68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b6c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001b70:	f7fe fd4a 	bl	8000608 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4620      	mov	r0, r4
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	f7fe fb8e 	bl	800029c <__adddf3>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4614      	mov	r4, r2
 8001b86:	461d      	mov	r5, r3
 8001b88:	4b85      	ldr	r3, [pc, #532]	@ (8001da0 <get_x_hat+0x2f4>)
 8001b8a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001b92:	f7fe fd39 	bl	8000608 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	f7fe fb7d 	bl	800029c <__adddf3>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	state_estimated.x2 = observer_C.C21 * x1 + observer_C.C22 * x2 + observer_C.C23 * x3 + observer_D.D21 * u + observer_D.D22 * y;
 8001baa:	4b7c      	ldr	r3, [pc, #496]	@ (8001d9c <get_x_hat+0x2f0>)
 8001bac:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001bb0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001bb4:	f7fe fd28 	bl	8000608 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	461d      	mov	r5, r3
 8001bc0:	4b76      	ldr	r3, [pc, #472]	@ (8001d9c <get_x_hat+0x2f0>)
 8001bc2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001bc6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001bca:	f7fe fd1d 	bl	8000608 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	f7fe fb61 	bl	800029c <__adddf3>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4614      	mov	r4, r2
 8001be0:	461d      	mov	r5, r3
 8001be2:	4b6e      	ldr	r3, [pc, #440]	@ (8001d9c <get_x_hat+0x2f0>)
 8001be4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001be8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001bec:	f7fe fd0c 	bl	8000608 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	f7fe fb50 	bl	800029c <__adddf3>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4614      	mov	r4, r2
 8001c02:	461d      	mov	r5, r3
 8001c04:	4b66      	ldr	r3, [pc, #408]	@ (8001da0 <get_x_hat+0x2f4>)
 8001c06:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c0a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001c0e:	f7fe fcfb 	bl	8000608 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4620      	mov	r0, r4
 8001c18:	4629      	mov	r1, r5
 8001c1a:	f7fe fb3f 	bl	800029c <__adddf3>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4614      	mov	r4, r2
 8001c24:	461d      	mov	r5, r3
 8001c26:	4b5e      	ldr	r3, [pc, #376]	@ (8001da0 <get_x_hat+0x2f4>)
 8001c28:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c2c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c30:	f7fe fcea 	bl	8000608 <__aeabi_dmul>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	f7fe fb2e 	bl	800029c <__adddf3>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	state_estimated.x3 = observer_C.C31 * x1 + observer_C.C32 * x2 + observer_C.C33 * x3 + observer_D.D31 * u + observer_D.D32 * y;
 8001c48:	4b54      	ldr	r3, [pc, #336]	@ (8001d9c <get_x_hat+0x2f0>)
 8001c4a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001c4e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001c52:	f7fe fcd9 	bl	8000608 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4614      	mov	r4, r2
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8001d9c <get_x_hat+0x2f0>)
 8001c60:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001c64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001c68:	f7fe fcce 	bl	8000608 <__aeabi_dmul>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4620      	mov	r0, r4
 8001c72:	4629      	mov	r1, r5
 8001c74:	f7fe fb12 	bl	800029c <__adddf3>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4614      	mov	r4, r2
 8001c7e:	461d      	mov	r5, r3
 8001c80:	4b46      	ldr	r3, [pc, #280]	@ (8001d9c <get_x_hat+0x2f0>)
 8001c82:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001c86:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001c8a:	f7fe fcbd 	bl	8000608 <__aeabi_dmul>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4620      	mov	r0, r4
 8001c94:	4629      	mov	r1, r5
 8001c96:	f7fe fb01 	bl	800029c <__adddf3>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4614      	mov	r4, r2
 8001ca0:	461d      	mov	r5, r3
 8001ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8001da0 <get_x_hat+0x2f4>)
 8001ca4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001ca8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001cac:	f7fe fcac 	bl	8000608 <__aeabi_dmul>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe faf0 	bl	800029c <__adddf3>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4614      	mov	r4, r2
 8001cc2:	461d      	mov	r5, r3
 8001cc4:	4b36      	ldr	r3, [pc, #216]	@ (8001da0 <get_x_hat+0x2f4>)
 8001cc6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001cca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001cce:	f7fe fc9b 	bl	8000608 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	4629      	mov	r1, r5
 8001cda:	f7fe fadf 	bl	800029c <__adddf3>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	double x1_new = observer_A.A11 * x1 + observer_A.A12 * x2 + observer_A.A13 * x3 + observer_B.B11 * u + observer_B.B12 * y;
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <get_x_hat+0x2f8>)
 8001ce8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cec:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001cf0:	f7fe fc8a 	bl	8000608 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	4b29      	ldr	r3, [pc, #164]	@ (8001da4 <get_x_hat+0x2f8>)
 8001cfe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d02:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001d06:	f7fe fc7f 	bl	8000608 <__aeabi_dmul>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4620      	mov	r0, r4
 8001d10:	4629      	mov	r1, r5
 8001d12:	f7fe fac3 	bl	800029c <__adddf3>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4614      	mov	r4, r2
 8001d1c:	461d      	mov	r5, r3
 8001d1e:	4b21      	ldr	r3, [pc, #132]	@ (8001da4 <get_x_hat+0x2f8>)
 8001d20:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d24:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001d28:	f7fe fc6e 	bl	8000608 <__aeabi_dmul>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4620      	mov	r0, r4
 8001d32:	4629      	mov	r1, r5
 8001d34:	f7fe fab2 	bl	800029c <__adddf3>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4614      	mov	r4, r2
 8001d3e:	461d      	mov	r5, r3
 8001d40:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <get_x_hat+0x2fc>)
 8001d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d46:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001d4a:	f7fe fc5d 	bl	8000608 <__aeabi_dmul>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4620      	mov	r0, r4
 8001d54:	4629      	mov	r1, r5
 8001d56:	f7fe faa1 	bl	800029c <__adddf3>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4614      	mov	r4, r2
 8001d60:	461d      	mov	r5, r3
 8001d62:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <get_x_hat+0x2fc>)
 8001d64:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d68:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001d6c:	f7fe fc4c 	bl	8000608 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4620      	mov	r0, r4
 8001d76:	4629      	mov	r1, r5
 8001d78:	f7fe fa90 	bl	800029c <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	double x2_new = observer_A.A21 * x1 + observer_A.A22 * x2 + observer_A.A23 * x3 + observer_B.B21 * u + observer_B.B22 * y;
 8001d84:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <get_x_hat+0x2f8>)
 8001d86:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001d8a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001d8e:	f7fe fc3b 	bl	8000608 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	e009      	b.n	8001dac <get_x_hat+0x300>
 8001d98:	20000538 	.word	0x20000538
 8001d9c:	200000f0 	.word	0x200000f0
 8001da0:	20000138 	.word	0x20000138
 8001da4:	20000078 	.word	0x20000078
 8001da8:	200000c0 	.word	0x200000c0
 8001dac:	4614      	mov	r4, r2
 8001dae:	461d      	mov	r5, r3
 8001db0:	4b63      	ldr	r3, [pc, #396]	@ (8001f40 <get_x_hat+0x494>)
 8001db2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001db6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001dba:	f7fe fc25 	bl	8000608 <__aeabi_dmul>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	f7fe fa69 	bl	800029c <__adddf3>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4614      	mov	r4, r2
 8001dd0:	461d      	mov	r5, r3
 8001dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f40 <get_x_hat+0x494>)
 8001dd4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001dd8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001ddc:	f7fe fc14 	bl	8000608 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4620      	mov	r0, r4
 8001de6:	4629      	mov	r1, r5
 8001de8:	f7fe fa58 	bl	800029c <__adddf3>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4614      	mov	r4, r2
 8001df2:	461d      	mov	r5, r3
 8001df4:	4b53      	ldr	r3, [pc, #332]	@ (8001f44 <get_x_hat+0x498>)
 8001df6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001dfa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001dfe:	f7fe fc03 	bl	8000608 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4620      	mov	r0, r4
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f7fe fa47 	bl	800029c <__adddf3>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4614      	mov	r4, r2
 8001e14:	461d      	mov	r5, r3
 8001e16:	4b4b      	ldr	r3, [pc, #300]	@ (8001f44 <get_x_hat+0x498>)
 8001e18:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001e1c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001e20:	f7fe fbf2 	bl	8000608 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4620      	mov	r0, r4
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	f7fe fa36 	bl	800029c <__adddf3>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	double x3_new = observer_A.A31 * x1 + observer_A.A32 * x2 + observer_A.A33 * x3 + observer_B.B31 * u + observer_B.B32 * y;
 8001e38:	4b41      	ldr	r3, [pc, #260]	@ (8001f40 <get_x_hat+0x494>)
 8001e3a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001e3e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001e42:	f7fe fbe1 	bl	8000608 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4614      	mov	r4, r2
 8001e4c:	461d      	mov	r5, r3
 8001e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f40 <get_x_hat+0x494>)
 8001e50:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001e54:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001e58:	f7fe fbd6 	bl	8000608 <__aeabi_dmul>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4620      	mov	r0, r4
 8001e62:	4629      	mov	r1, r5
 8001e64:	f7fe fa1a 	bl	800029c <__adddf3>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4614      	mov	r4, r2
 8001e6e:	461d      	mov	r5, r3
 8001e70:	4b33      	ldr	r3, [pc, #204]	@ (8001f40 <get_x_hat+0x494>)
 8001e72:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001e76:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001e7a:	f7fe fbc5 	bl	8000608 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4620      	mov	r0, r4
 8001e84:	4629      	mov	r1, r5
 8001e86:	f7fe fa09 	bl	800029c <__adddf3>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4614      	mov	r4, r2
 8001e90:	461d      	mov	r5, r3
 8001e92:	4b2c      	ldr	r3, [pc, #176]	@ (8001f44 <get_x_hat+0x498>)
 8001e94:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001e98:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001e9c:	f7fe fbb4 	bl	8000608 <__aeabi_dmul>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	f7fe f9f8 	bl	800029c <__adddf3>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	4b23      	ldr	r3, [pc, #140]	@ (8001f44 <get_x_hat+0x498>)
 8001eb6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001eba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001ebe:	f7fe fba3 	bl	8000608 <__aeabi_dmul>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	4629      	mov	r1, r5
 8001eca:	f7fe f9e7 	bl	800029c <__adddf3>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

	observer_state.x1 = x1_new;
 8001ed6:	491c      	ldr	r1, [pc, #112]	@ (8001f48 <get_x_hat+0x49c>)
 8001ed8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001edc:	e9c1 2300 	strd	r2, r3, [r1]
	observer_state.x2 = x2_new;
 8001ee0:	4919      	ldr	r1, [pc, #100]	@ (8001f48 <get_x_hat+0x49c>)
 8001ee2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001ee6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	observer_state.x3 = x3_new;
 8001eea:	4917      	ldr	r1, [pc, #92]	@ (8001f48 <get_x_hat+0x49c>)
 8001eec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ef0:	e9c1 2304 	strd	r2, r3, [r1, #16]

	return state_estimated;
 8001ef4:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001ef8:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8001efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f04:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f08:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001f0c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001f10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f14:	ec45 4b15 	vmov	d5, r4, r5
 8001f18:	ec41 0b16 	vmov	d6, r0, r1
 8001f1c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f20:	eeb0 0a45 	vmov.f32	s0, s10
 8001f24:	eef0 0a65 	vmov.f32	s1, s11
 8001f28:	eeb0 1a46 	vmov.f32	s2, s12
 8001f2c:	eef0 1a66 	vmov.f32	s3, s13
 8001f30:	eeb0 2a47 	vmov.f32	s4, s14
 8001f34:	eef0 2a67 	vmov.f32	s5, s15
 8001f38:	3798      	adds	r7, #152	@ 0x98
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000078 	.word	0x20000078
 8001f44:	200000c0 	.word	0x200000c0
 8001f48:	20000538 	.word	0x20000538
 8001f4c:	00000000 	.word	0x00000000

08001f50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f50:	b5b0      	push	{r4, r5, r7, lr}
 8001f52:	b0a6      	sub	sp, #152	@ 0x98
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	if (htim == &htim4) {
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4ab5      	ldr	r2, [pc, #724]	@ (8002230 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	f040 81cf 	bne.w	8002300 <HAL_TIM_PeriodElapsedCallback+0x3b0>
		k_controller = k_controller + 1;
 8001f62:	4bb4      	ldr	r3, [pc, #720]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	4ab2      	ldr	r2, [pc, #712]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001f6a:	6013      	str	r3, [r2, #0]
		if (k_controller == 0) {
 8001f6c:	4bb1      	ldr	r3, [pc, #708]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d104      	bne.n	8001f7e <HAL_TIM_PeriodElapsedCallback+0x2e>
			ticControlStep = HAL_GetTick();
 8001f74:	f000 fcda 	bl	800292c <HAL_GetTick>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4aaf      	ldr	r2, [pc, #700]	@ (8002238 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001f7c:	6013      	str	r3, [r2, #0]
		}
		tocControlStep = HAL_GetTick();
 8001f7e:	f000 fcd5 	bl	800292c <HAL_GetTick>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4aad      	ldr	r2, [pc, #692]	@ (800223c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001f86:	6013      	str	r3, [r2, #0]

		currentTicks = (double) __HAL_TIM_GET_COUNTER(&htim1); //take current value of ticks counting the encoder edges
 8001f88:	4bad      	ldr	r3, [pc, #692]	@ (8002240 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fac0 	bl	8000514 <__aeabi_ui2d>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	49aa      	ldr	r1, [pc, #680]	@ (8002244 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001f9a:	e9c1 2300 	strd	r2, r3, [r1]
		// double speed = getSpeedByDelta(
		// 		getTicksDelta(currentTicks, lastTicks));

		double position = getPositionByDelta(
 8001f9e:	4ba9      	ldr	r3, [pc, #676]	@ (8002244 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001fa0:	ed93 7b00 	vldr	d7, [r3]
 8001fa4:	4ba8      	ldr	r3, [pc, #672]	@ (8002248 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001fa6:	ed93 6b00 	vldr	d6, [r3]
 8001faa:	eeb0 1a46 	vmov.f32	s2, s12
 8001fae:	eef0 1a66 	vmov.f32	s3, s13
 8001fb2:	eeb0 0a47 	vmov.f32	s0, s14
 8001fb6:	eef0 0a67 	vmov.f32	s1, s15
 8001fba:	f7ff f963 	bl	8001284 <getTicksDelta>
 8001fbe:	eeb0 7a40 	vmov.f32	s14, s0
 8001fc2:	eef0 7a60 	vmov.f32	s15, s1
 8001fc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001fca:	eef0 0a67 	vmov.f32	s1, s15
 8001fce:	f7ff f9ff 	bl	80013d0 <getPositionByDelta>
 8001fd2:	ed87 0b24 	vstr	d0, [r7, #144]	@ 0x90
				getTicksDelta(currentTicks, lastTicks));

		// double e = referenceVal - speed;
		double e = referenceVal - position;
 8001fd6:	4b9d      	ldr	r3, [pc, #628]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fdc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001fe0:	f7fe f95a 	bl	8000298 <__aeabi_dsub>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		HAL_ADC_Start(&hadc1);
 8001fec:	4898      	ldr	r0, [pc, #608]	@ (8002250 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fee:	f000 fd11 	bl	8002a14 <HAL_ADC_Start>

		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff6:	4896      	ldr	r0, [pc, #600]	@ (8002250 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001ff8:	f000 fdc0 	bl	8002b7c <HAL_ADC_PollForConversion>
		uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8001ffc:	4894      	ldr	r0, [pc, #592]	@ (8002250 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001ffe:	f000 fe48 	bl	8002c92 <HAL_ADC_GetValue>
 8002002:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
		double adc_voltage = (double)adc_value * 3.3 / 4095; // Conversione in tensione (valore massimo dell'ADC = 4096, tensione di riferimento = 3.3V)
 8002006:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800200a:	f7fe fa83 	bl	8000514 <__aeabi_ui2d>
 800200e:	a380      	add	r3, pc, #512	@ (adr r3, 8002210 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe faf8 	bl	8000608 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	a37d      	add	r3, pc, #500	@ (adr r3, 8002218 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002026:	f7fe fc19 	bl	800085c <__aeabi_ddiv>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		double current = (adc_voltage-2.5530)/0.185;
 8002032:	a37b      	add	r3, pc, #492	@ (adr r3, 8002220 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800203c:	f7fe f92c 	bl	8000298 <__aeabi_dsub>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	a377      	add	r3, pc, #476	@ (adr r3, 8002228 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	f7fe fc05 	bl	800085c <__aeabi_ddiv>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
		x_hat_t state_estimated = get_x_hat(u_last, position);
 800205a:	4b7e      	ldr	r3, [pc, #504]	@ (8002254 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800205c:	ed93 7b00 	vldr	d7, [r3]
 8002060:	ed97 1b24 	vldr	d1, [r7, #144]	@ 0x90
 8002064:	eeb0 0a47 	vmov.f32	s0, s14
 8002068:	eef0 0a67 	vmov.f32	s1, s15
 800206c:	f7ff fd1e 	bl	8001aac <get_x_hat>
 8002070:	eeb0 5a40 	vmov.f32	s10, s0
 8002074:	eef0 5a60 	vmov.f32	s11, s1
 8002078:	eeb0 6a41 	vmov.f32	s12, s2
 800207c:	eef0 6a61 	vmov.f32	s13, s3
 8002080:	eeb0 7a42 	vmov.f32	s14, s4
 8002084:	eef0 7a62 	vmov.f32	s15, s5
 8002088:	ed87 5b10 	vstr	d5, [r7, #64]	@ 0x40
 800208c:	ed87 6b12 	vstr	d6, [r7, #72]	@ 0x48
 8002090:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50

		double u = -controller_gain.K1 * state_estimated.x1 - controller_gain.K2 * state_estimated.x2 - controller_gain.K3 * state_estimated.x3 + controller_gain.Kr * referenceVal;
 8002094:	4b70      	ldr	r3, [pc, #448]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	4614      	mov	r4, r2
 800209c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80020a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80020a4:	4620      	mov	r0, r4
 80020a6:	4629      	mov	r1, r5
 80020a8:	f7fe faae 	bl	8000608 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4614      	mov	r4, r2
 80020b2:	461d      	mov	r5, r3
 80020b4:	4b68      	ldr	r3, [pc, #416]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80020b6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80020ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020be:	f7fe faa3 	bl	8000608 <__aeabi_dmul>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4620      	mov	r0, r4
 80020c8:	4629      	mov	r1, r5
 80020ca:	f7fe f8e5 	bl	8000298 <__aeabi_dsub>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4614      	mov	r4, r2
 80020d4:	461d      	mov	r5, r3
 80020d6:	4b60      	ldr	r3, [pc, #384]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80020d8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80020dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020e0:	f7fe fa92 	bl	8000608 <__aeabi_dmul>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4620      	mov	r0, r4
 80020ea:	4629      	mov	r1, r5
 80020ec:	f7fe f8d4 	bl	8000298 <__aeabi_dsub>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4614      	mov	r4, r2
 80020f6:	461d      	mov	r5, r3
 80020f8:	4b57      	ldr	r3, [pc, #348]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80020fa:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80020fe:	4b53      	ldr	r3, [pc, #332]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f7fe fa80 	bl	8000608 <__aeabi_dmul>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4620      	mov	r0, r4
 800210e:	4629      	mov	r1, r5
 8002110:	f7fe f8c4 	bl	800029c <__adddf3>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
		double u_integrator = u_last_integrated + controller_gain.KI *(e + e_last);
 800211c:	4b4e      	ldr	r3, [pc, #312]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800211e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002122:	4b4e      	ldr	r3, [pc, #312]	@ (800225c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002124:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002128:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800212c:	f7fe f8b6 	bl	800029c <__adddf3>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4620      	mov	r0, r4
 8002136:	4629      	mov	r1, r5
 8002138:	f7fe fa66 	bl	8000608 <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	4b46      	ldr	r3, [pc, #280]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	f7fe f8a7 	bl	800029c <__adddf3>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
		u += u_integrator;
 8002156:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800215a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800215e:	f7fe f89d 	bl	800029c <__adddf3>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
		setPulseFromDutyValue(u * 100 / 12);
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	4b3d      	ldr	r3, [pc, #244]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002170:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002174:	f7fe fa48 	bl	8000608 <__aeabi_dmul>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	4b38      	ldr	r3, [pc, #224]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002186:	f7fe fb69 	bl	800085c <__aeabi_ddiv>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	ec43 2b17 	vmov	d7, r2, r3
 8002192:	eeb0 0a47 	vmov.f32	s0, s14
 8002196:	eef0 0a67 	vmov.f32	s1, s15
 800219a:	f7fe ff75 	bl	8001088 <setPulseFromDutyValue>

		u_last_integrated = u_integrator;
 800219e:	4930      	ldr	r1, [pc, #192]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80021a0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80021a4:	e9c1 2300 	strd	r2, r3, [r1]
		u_last = u;
 80021a8:	492a      	ldr	r1, [pc, #168]	@ (8002254 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80021aa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80021ae:	e9c1 2300 	strd	r2, r3, [r1]
		e_last = e;
 80021b2:	492a      	ldr	r1, [pc, #168]	@ (800225c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80021b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80021b8:	e9c1 2300 	strd	r2, r3, [r1]

		controlComputationDuration = HAL_GetTick() - tocControlStep;
 80021bc:	f000 fbb6 	bl	800292c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	4a28      	ldr	r2, [pc, #160]	@ (800226c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80021ca:	6013      	str	r3, [r2, #0]
		double temp = lastTicks;
 80021cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002248 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80021ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
		lastTicks = currentTicks;
 80021d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	491a      	ldr	r1, [pc, #104]	@ (8002248 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80021de:	e9c1 2300 	strd	r2, r3, [r1]
		// recording data in the buffer
		record r;
		r.current_u = current;
 80021e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80021e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		r.current_y = position;
 80021ea:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80021ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
		r.last_tick = temp;
 80021f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021f6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		r.reference = referenceVal;
 80021fa:	4b14      	ldr	r3, [pc, #80]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80021fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002200:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		r.current_tick = currentTicks;
 8002204:	4b0f      	ldr	r3, [pc, #60]	@ (8002244 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800220e:	e02f      	b.n	8002270 <HAL_TIM_PeriodElapsedCallback+0x320>
 8002210:	66666666 	.word	0x66666666
 8002214:	400a6666 	.word	0x400a6666
 8002218:	00000000 	.word	0x00000000
 800221c:	40affe00 	.word	0x40affe00
 8002220:	43958106 	.word	0x43958106
 8002224:	40046c8b 	.word	0x40046c8b
 8002228:	7ae147ae 	.word	0x7ae147ae
 800222c:	3fc7ae14 	.word	0x3fc7ae14
 8002230:	20000434 	.word	0x20000434
 8002234:	20000048 	.word	0x20000048
 8002238:	200004f8 	.word	0x200004f8
 800223c:	200004fc 	.word	0x200004fc
 8002240:	200003a4 	.word	0x200003a4
 8002244:	200004f0 	.word	0x200004f0
 8002248:	200004e8 	.word	0x200004e8
 800224c:	20000520 	.word	0x20000520
 8002250:	2000035c 	.word	0x2000035c
 8002254:	20000510 	.word	0x20000510
 8002258:	20000050 	.word	0x20000050
 800225c:	20000518 	.word	0x20000518
 8002260:	20000508 	.word	0x20000508
 8002264:	40590000 	.word	0x40590000
 8002268:	40280000 	.word	0x40280000
 800226c:	20000500 	.word	0x20000500
		r.cycleCoreDuration = controlComputationDuration;
 8002270:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
		r.cycleBeginDelay = tocControlStep - ticControlStep
 8002276:	4b25      	ldr	r3, [pc, #148]	@ (800230c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1ad3      	subs	r3, r2, r3
				- (k_controller * Ts * 1000);
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f947 	bl	8000514 <__aeabi_ui2d>
 8002286:	4604      	mov	r4, r0
 8002288:	460d      	mov	r5, r1
 800228a:	4b22      	ldr	r3, [pc, #136]	@ (8002314 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe f940 	bl	8000514 <__aeabi_ui2d>
 8002294:	4b20      	ldr	r3, [pc, #128]	@ (8002318 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8002296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229a:	f7fe f9b5 	bl	8000608 <__aeabi_dmul>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4610      	mov	r0, r2
 80022a4:	4619      	mov	r1, r3
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	4b1c      	ldr	r3, [pc, #112]	@ (800231c <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 80022ac:	f7fe f9ac 	bl	8000608 <__aeabi_dmul>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4620      	mov	r0, r4
 80022b6:	4629      	mov	r1, r5
 80022b8:	f7fd ffee 	bl	8000298 <__aeabi_dsub>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
		r.cycleBeginDelay = tocControlStep - ticControlStep
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f7fe fc78 	bl	8000bb8 <__aeabi_d2uiz>
 80022c8:	4603      	mov	r3, r0
 80022ca:	61fb      	str	r3, [r7, #28]
		r.currentTimestamp = HAL_GetTick();
 80022cc:	f000 fb2e 	bl	800292c <HAL_GetTick>
 80022d0:	4603      	mov	r3, r0
 80022d2:	623b      	str	r3, [r7, #32]
		if (samplingPrescalerCounter == (samplingPrescaler - 1)) {
 80022d4:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	4b12      	ldr	r3, [pc, #72]	@ (8002324 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d109      	bne.n	80022f6 <HAL_TIM_PeriodElapsedCallback+0x3a6>
			cb_push_back(&myBuff, &r);
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	4619      	mov	r1, r3
 80022e8:	480f      	ldr	r0, [pc, #60]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80022ea:	f7fe fe35 	bl	8000f58 <cb_push_back>
			samplingPrescalerCounter = -1;
 80022ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	601a      	str	r2, [r3, #0]
		}
		samplingPrescalerCounter++;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	4a09      	ldr	r2, [pc, #36]	@ (8002324 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 80022fe:	6013      	str	r3, [r2, #0]
	}
}
 8002300:	bf00      	nop
 8002302:	3798      	adds	r7, #152	@ 0x98
 8002304:	46bd      	mov	sp, r7
 8002306:	bdb0      	pop	{r4, r5, r7, pc}
 8002308:	20000500 	.word	0x20000500
 800230c:	200004fc 	.word	0x200004fc
 8002310:	200004f8 	.word	0x200004f8
 8002314:	20000048 	.word	0x20000048
 8002318:	20000000 	.word	0x20000000
 800231c:	408f4000 	.word	0x408f4000
 8002320:	2000004c 	.word	0x2000004c
 8002324:	20000528 	.word	0x20000528
 8002328:	200004c4 	.word	0x200004c4

0800232c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002330:	b672      	cpsid	i
}
 8002332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002334:	bf00      	nop
 8002336:	e7fd      	b.n	8002334 <Error_Handler+0x8>

08002338 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <HAL_MspInit+0x4c>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	4a0f      	ldr	r2, [pc, #60]	@ (8002384 <HAL_MspInit+0x4c>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800234c:	6453      	str	r3, [r2, #68]	@ 0x44
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <HAL_MspInit+0x4c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <HAL_MspInit+0x4c>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	4a08      	ldr	r2, [pc, #32]	@ (8002384 <HAL_MspInit+0x4c>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002368:	6413      	str	r3, [r2, #64]	@ 0x40
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_MspInit+0x4c>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	@ 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a17      	ldr	r2, [pc, #92]	@ (8002404 <HAL_ADC_MspInit+0x7c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d127      	bne.n	80023fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	4b16      	ldr	r3, [pc, #88]	@ (8002408 <HAL_ADC_MspInit+0x80>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4a15      	ldr	r2, [pc, #84]	@ (8002408 <HAL_ADC_MspInit+0x80>)
 80023b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ba:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <HAL_ADC_MspInit+0x80>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <HAL_ADC_MspInit+0x80>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002408 <HAL_ADC_MspInit+0x80>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <HAL_ADC_MspInit+0x80>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023e2:	2301      	movs	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e6:	2303      	movs	r3, #3
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	4805      	ldr	r0, [pc, #20]	@ (800240c <HAL_ADC_MspInit+0x84>)
 80023f6:	f000 ff89 	bl	800330c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	@ 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40012000 	.word	0x40012000
 8002408:	40023800 	.word	0x40023800
 800240c:	40020800 	.word	0x40020800

08002410 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	@ 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a19      	ldr	r2, [pc, #100]	@ (8002494 <HAL_TIM_Encoder_MspInit+0x84>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d12c      	bne.n	800248c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <HAL_TIM_Encoder_MspInit+0x88>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	4a17      	ldr	r2, [pc, #92]	@ (8002498 <HAL_TIM_Encoder_MspInit+0x88>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6453      	str	r3, [r2, #68]	@ 0x44
 8002442:	4b15      	ldr	r3, [pc, #84]	@ (8002498 <HAL_TIM_Encoder_MspInit+0x88>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <HAL_TIM_Encoder_MspInit+0x88>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	4a10      	ldr	r2, [pc, #64]	@ (8002498 <HAL_TIM_Encoder_MspInit+0x88>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6313      	str	r3, [r2, #48]	@ 0x30
 800245e:	4b0e      	ldr	r3, [pc, #56]	@ (8002498 <HAL_TIM_Encoder_MspInit+0x88>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800246a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800247c:	2301      	movs	r3, #1
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	4805      	ldr	r0, [pc, #20]	@ (800249c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002488:	f000 ff40 	bl	800330c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800248c:	bf00      	nop
 800248e:	3728      	adds	r7, #40	@ 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40010000 	.word	0x40010000
 8002498:	40023800 	.word	0x40023800
 800249c:	40020000 	.word	0x40020000

080024a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a18      	ldr	r2, [pc, #96]	@ (8002510 <HAL_TIM_Base_MspInit+0x70>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	4b17      	ldr	r3, [pc, #92]	@ (8002514 <HAL_TIM_Base_MspInit+0x74>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	4a16      	ldr	r2, [pc, #88]	@ (8002514 <HAL_TIM_Base_MspInit+0x74>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c2:	4b14      	ldr	r3, [pc, #80]	@ (8002514 <HAL_TIM_Base_MspInit+0x74>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024ce:	e01a      	b.n	8002506 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a10      	ldr	r2, [pc, #64]	@ (8002518 <HAL_TIM_Base_MspInit+0x78>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d115      	bne.n	8002506 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <HAL_TIM_Base_MspInit+0x74>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002514 <HAL_TIM_Base_MspInit+0x74>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <HAL_TIM_Base_MspInit+0x74>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80024f6:	2200      	movs	r2, #0
 80024f8:	2100      	movs	r1, #0
 80024fa:	201e      	movs	r0, #30
 80024fc:	f000 fecf 	bl	800329e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002500:	201e      	movs	r0, #30
 8002502:	f000 fee8 	bl	80032d6 <HAL_NVIC_EnableIRQ>
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40000400 	.word	0x40000400
 8002514:	40023800 	.word	0x40023800
 8002518:	40000800 	.word	0x40000800

0800251c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a12      	ldr	r2, [pc, #72]	@ (8002584 <HAL_TIM_MspPostInit+0x68>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d11d      	bne.n	800257a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	4b11      	ldr	r3, [pc, #68]	@ (8002588 <HAL_TIM_MspPostInit+0x6c>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	4a10      	ldr	r2, [pc, #64]	@ (8002588 <HAL_TIM_MspPostInit+0x6c>)
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	6313      	str	r3, [r2, #48]	@ 0x30
 800254e:	4b0e      	ldr	r3, [pc, #56]	@ (8002588 <HAL_TIM_MspPostInit+0x6c>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800255a:	2330      	movs	r3, #48	@ 0x30
 800255c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800256a:	2302      	movs	r3, #2
 800256c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256e:	f107 030c 	add.w	r3, r7, #12
 8002572:	4619      	mov	r1, r3
 8002574:	4805      	ldr	r0, [pc, #20]	@ (800258c <HAL_TIM_MspPostInit+0x70>)
 8002576:	f000 fec9 	bl	800330c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800257a:	bf00      	nop
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40000400 	.word	0x40000400
 8002588:	40023800 	.word	0x40023800
 800258c:	40020400 	.word	0x40020400

08002590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	@ 0x28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a19      	ldr	r2, [pc, #100]	@ (8002614 <HAL_UART_MspInit+0x84>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d12b      	bne.n	800260a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <HAL_UART_MspInit+0x88>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	4a17      	ldr	r2, [pc, #92]	@ (8002618 <HAL_UART_MspInit+0x88>)
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025c2:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <HAL_UART_MspInit+0x88>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <HAL_UART_MspInit+0x88>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	4a10      	ldr	r2, [pc, #64]	@ (8002618 <HAL_UART_MspInit+0x88>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025de:	4b0e      	ldr	r3, [pc, #56]	@ (8002618 <HAL_UART_MspInit+0x88>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025ea:	230c      	movs	r3, #12
 80025ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f6:	2303      	movs	r3, #3
 80025f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025fa:	2307      	movs	r3, #7
 80025fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fe:	f107 0314 	add.w	r3, r7, #20
 8002602:	4619      	mov	r1, r3
 8002604:	4805      	ldr	r0, [pc, #20]	@ (800261c <HAL_UART_MspInit+0x8c>)
 8002606:	f000 fe81 	bl	800330c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800260a:	bf00      	nop
 800260c:	3728      	adds	r7, #40	@ 0x28
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40004400 	.word	0x40004400
 8002618:	40023800 	.word	0x40023800
 800261c:	40020000 	.word	0x40020000

08002620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <NMI_Handler+0x4>

08002628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <HardFault_Handler+0x4>

08002630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <MemManage_Handler+0x4>

08002638 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <BusFault_Handler+0x4>

08002640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <UsageFault_Handler+0x4>

08002648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002676:	f000 f945 	bl	8002904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002684:	4802      	ldr	r0, [pc, #8]	@ (8002690 <TIM4_IRQHandler+0x10>)
 8002686:	f001 fef3 	bl	8004470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000434 	.word	0x20000434

08002694 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return 1;
 8002698:	2301      	movs	r3, #1
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_kill>:

int _kill(int pid, int sig)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026ae:	f003 ffa5 	bl	80065fc <__errno>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2216      	movs	r2, #22
 80026b6:	601a      	str	r2, [r3, #0]
  return -1;
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <_exit>:

void _exit (int status)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ffe7 	bl	80026a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026d6:	bf00      	nop
 80026d8:	e7fd      	b.n	80026d6 <_exit+0x12>

080026da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	e00a      	b.n	8002702 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026ec:	f3af 8000 	nop.w
 80026f0:	4601      	mov	r1, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	60ba      	str	r2, [r7, #8]
 80026f8:	b2ca      	uxtb	r2, r1
 80026fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3301      	adds	r3, #1
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	429a      	cmp	r2, r3
 8002708:	dbf0      	blt.n	80026ec <_read+0x12>
  }

  return len;
 800270a:	687b      	ldr	r3, [r7, #4]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800273c:	605a      	str	r2, [r3, #4]
  return 0;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_isatty>:

int _isatty(int file)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002754:	2301      	movs	r3, #1
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002784:	4a14      	ldr	r2, [pc, #80]	@ (80027d8 <_sbrk+0x5c>)
 8002786:	4b15      	ldr	r3, [pc, #84]	@ (80027dc <_sbrk+0x60>)
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002790:	4b13      	ldr	r3, [pc, #76]	@ (80027e0 <_sbrk+0x64>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002798:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <_sbrk+0x64>)
 800279a:	4a12      	ldr	r2, [pc, #72]	@ (80027e4 <_sbrk+0x68>)
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800279e:	4b10      	ldr	r3, [pc, #64]	@ (80027e0 <_sbrk+0x64>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d207      	bcs.n	80027bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027ac:	f003 ff26 	bl	80065fc <__errno>
 80027b0:	4603      	mov	r3, r0
 80027b2:	220c      	movs	r2, #12
 80027b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	e009      	b.n	80027d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027bc:	4b08      	ldr	r3, [pc, #32]	@ (80027e0 <_sbrk+0x64>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027c2:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <_sbrk+0x64>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	4a05      	ldr	r2, [pc, #20]	@ (80027e0 <_sbrk+0x64>)
 80027cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ce:	68fb      	ldr	r3, [r7, #12]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20018000 	.word	0x20018000
 80027dc:	00000400 	.word	0x00000400
 80027e0:	20000550 	.word	0x20000550
 80027e4:	200006a8 	.word	0x200006a8

080027e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027ec:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <SystemInit+0x20>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f2:	4a05      	ldr	r2, [pc, #20]	@ (8002808 <SystemInit+0x20>)
 80027f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800280c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002844 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002810:	f7ff ffea 	bl	80027e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002814:	480c      	ldr	r0, [pc, #48]	@ (8002848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002816:	490d      	ldr	r1, [pc, #52]	@ (800284c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002818:	4a0d      	ldr	r2, [pc, #52]	@ (8002850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800281c:	e002      	b.n	8002824 <LoopCopyDataInit>

0800281e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002822:	3304      	adds	r3, #4

08002824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002828:	d3f9      	bcc.n	800281e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282a:	4a0a      	ldr	r2, [pc, #40]	@ (8002854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800282c:	4c0a      	ldr	r4, [pc, #40]	@ (8002858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002830:	e001      	b.n	8002836 <LoopFillZerobss>

08002832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002834:	3204      	adds	r2, #4

08002836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002838:	d3fb      	bcc.n	8002832 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800283a:	f003 fee5 	bl	8006608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800283e:	f7fe fe19 	bl	8001474 <main>
  bx  lr    
 8002842:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002844:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800284c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8002850:	08008968 	.word	0x08008968
  ldr r2, =_sbss
 8002854:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8002858:	200006a4 	.word	0x200006a4

0800285c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800285c:	e7fe      	b.n	800285c <ADC_IRQHandler>
	...

08002860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002864:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_Init+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0d      	ldr	r2, [pc, #52]	@ (80028a0 <HAL_Init+0x40>)
 800286a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800286e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_Init+0x40>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <HAL_Init+0x40>)
 8002876:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800287a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800287c:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <HAL_Init+0x40>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a07      	ldr	r2, [pc, #28]	@ (80028a0 <HAL_Init+0x40>)
 8002882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002888:	2003      	movs	r0, #3
 800288a:	f000 fcfd 	bl	8003288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800288e:	200f      	movs	r0, #15
 8002890:	f000 f808 	bl	80028a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002894:	f7ff fd50 	bl	8002338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023c00 	.word	0x40023c00

080028a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ac:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <HAL_InitTick+0x54>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b12      	ldr	r3, [pc, #72]	@ (80028fc <HAL_InitTick+0x58>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80028be:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fd15 	bl	80032f2 <HAL_SYSTICK_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00e      	b.n	80028f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b0f      	cmp	r3, #15
 80028d6:	d80a      	bhi.n	80028ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d8:	2200      	movs	r2, #0
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f000 fcdd 	bl	800329e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e4:	4a06      	ldr	r2, [pc, #24]	@ (8002900 <HAL_InitTick+0x5c>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000168 	.word	0x20000168
 80028fc:	20000170 	.word	0x20000170
 8002900:	2000016c 	.word	0x2000016c

08002904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002908:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_IncTick+0x20>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_IncTick+0x24>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4413      	add	r3, r2
 8002914:	4a04      	ldr	r2, [pc, #16]	@ (8002928 <HAL_IncTick+0x24>)
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000170 	.word	0x20000170
 8002928:	20000554 	.word	0x20000554

0800292c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return uwTick;
 8002930:	4b03      	ldr	r3, [pc, #12]	@ (8002940 <HAL_GetTick+0x14>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20000554 	.word	0x20000554

08002944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7ff ffee 	bl	800292c <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d005      	beq.n	800296a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800295e:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <HAL_Delay+0x44>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800296a:	bf00      	nop
 800296c:	f7ff ffde 	bl	800292c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d8f7      	bhi.n	800296c <HAL_Delay+0x28>
  {
  }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000170 	.word	0x20000170

0800298c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e033      	b.n	8002a0a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fcec 	bl	8002388 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d118      	bne.n	80029fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029d2:	f023 0302 	bic.w	r3, r3, #2
 80029d6:	f043 0202 	orr.w	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fa86 	bl	8002ef0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f023 0303 	bic.w	r3, r3, #3
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80029fa:	e001      	b.n	8002a00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_Start+0x1a>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e097      	b.n	8002b5e <HAL_ADC_Start+0x14a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d018      	beq.n	8002a76 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a54:	4b45      	ldr	r3, [pc, #276]	@ (8002b6c <HAL_ADC_Start+0x158>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a45      	ldr	r2, [pc, #276]	@ (8002b70 <HAL_ADC_Start+0x15c>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0c9a      	lsrs	r2, r3, #18
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002a68:	e002      	b.n	8002a70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f9      	bne.n	8002a6a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d15f      	bne.n	8002b44 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002aae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac2:	d106      	bne.n	8002ad2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac8:	f023 0206 	bic.w	r2, r3, #6
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ad0:	e002      	b.n	8002ad8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae0:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <HAL_ADC_Start+0x160>)
 8002ae2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002aec:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10f      	bne.n	8002b1a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d129      	bne.n	8002b5c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	e020      	b.n	8002b5c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a16      	ldr	r2, [pc, #88]	@ (8002b78 <HAL_ADC_Start+0x164>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d11b      	bne.n	8002b5c <HAL_ADC_Start+0x148>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d114      	bne.n	8002b5c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b40:	609a      	str	r2, [r3, #8]
 8002b42:	e00b      	b.n	8002b5c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	f043 0210 	orr.w	r2, r3, #16
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000168 	.word	0x20000168
 8002b70:	431bde83 	.word	0x431bde83
 8002b74:	40012300 	.word	0x40012300
 8002b78:	40012000 	.word	0x40012000

08002b7c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b98:	d113      	bne.n	8002bc2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f043 0220 	orr.w	r2, r3, #32
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e063      	b.n	8002c8a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bc2:	f7ff feb3 	bl	800292c <HAL_GetTick>
 8002bc6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bc8:	e021      	b.n	8002c0e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd0:	d01d      	beq.n	8002c0e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d007      	beq.n	8002be8 <HAL_ADC_PollForConversion+0x6c>
 8002bd8:	f7ff fea8 	bl	800292c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d212      	bcs.n	8002c0e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d00b      	beq.n	8002c0e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f043 0204 	orr.w	r2, r3, #4
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e03d      	b.n	8002c8a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d1d6      	bne.n	8002bca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0212 	mvn.w	r2, #18
 8002c24:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d123      	bne.n	8002c88 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d11f      	bne.n	8002c88 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d111      	bne.n	8002c88 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d105      	bne.n	8002c88 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	f043 0201 	orr.w	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x1c>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e105      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x228>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b09      	cmp	r3, #9
 8002cd6:	d925      	bls.n	8002d24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68d9      	ldr	r1, [r3, #12]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	3b1e      	subs	r3, #30
 8002cee:	2207      	movs	r2, #7
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	400a      	ands	r2, r1
 8002cfc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68d9      	ldr	r1, [r3, #12]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	4618      	mov	r0, r3
 8002d10:	4603      	mov	r3, r0
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4403      	add	r3, r0
 8002d16:	3b1e      	subs	r3, #30
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	e022      	b.n	8002d6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6919      	ldr	r1, [r3, #16]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	2207      	movs	r2, #7
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	400a      	ands	r2, r1
 8002d46:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6919      	ldr	r1, [r3, #16]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	4618      	mov	r0, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4403      	add	r3, r0
 8002d60:	409a      	lsls	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b06      	cmp	r3, #6
 8002d70:	d824      	bhi.n	8002dbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	3b05      	subs	r3, #5
 8002d84:	221f      	movs	r2, #31
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	400a      	ands	r2, r1
 8002d92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	4618      	mov	r0, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	3b05      	subs	r3, #5
 8002dae:	fa00 f203 	lsl.w	r2, r0, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dba:	e04c      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b0c      	cmp	r3, #12
 8002dc2:	d824      	bhi.n	8002e0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3b23      	subs	r3, #35	@ 0x23
 8002dd6:	221f      	movs	r2, #31
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	400a      	ands	r2, r1
 8002de4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	4618      	mov	r0, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3b23      	subs	r3, #35	@ 0x23
 8002e00:	fa00 f203 	lsl.w	r2, r0, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e0c:	e023      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3b41      	subs	r3, #65	@ 0x41
 8002e20:	221f      	movs	r2, #31
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43da      	mvns	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	3b41      	subs	r3, #65	@ 0x41
 8002e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e56:	4b22      	ldr	r3, [pc, #136]	@ (8002ee0 <HAL_ADC_ConfigChannel+0x234>)
 8002e58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a21      	ldr	r2, [pc, #132]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x238>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d109      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1cc>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b12      	cmp	r3, #18
 8002e6a:	d105      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a19      	ldr	r2, [pc, #100]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x238>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d123      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x21e>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d003      	beq.n	8002e92 <HAL_ADC_ConfigChannel+0x1e6>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b11      	cmp	r3, #17
 8002e90:	d11b      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b10      	cmp	r3, #16
 8002ea4:	d111      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ea6:	4b10      	ldr	r3, [pc, #64]	@ (8002ee8 <HAL_ADC_ConfigChannel+0x23c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a10      	ldr	r2, [pc, #64]	@ (8002eec <HAL_ADC_ConfigChannel+0x240>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	0c9a      	lsrs	r2, r3, #18
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ebc:	e002      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f9      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40012300 	.word	0x40012300
 8002ee4:	40012000 	.word	0x40012000
 8002ee8:	20000168 	.word	0x20000168
 8002eec:	431bde83 	.word	0x431bde83

08002ef0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ef8:	4b79      	ldr	r3, [pc, #484]	@ (80030e0 <ADC_Init+0x1f0>)
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	021a      	lsls	r2, r3, #8
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6899      	ldr	r1, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f82:	4a58      	ldr	r2, [pc, #352]	@ (80030e4 <ADC_Init+0x1f4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d022      	beq.n	8002fce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6899      	ldr	r1, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6899      	ldr	r1, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	e00f      	b.n	8002fee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0202 	bic.w	r2, r2, #2
 8002ffc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6899      	ldr	r1, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7e1b      	ldrb	r3, [r3, #24]
 8003008:	005a      	lsls	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01b      	beq.n	8003054 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800302a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800303a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	3b01      	subs	r3, #1
 8003048:	035a      	lsls	r2, r3, #13
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	e007      	b.n	8003064 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003062:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003072:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	3b01      	subs	r3, #1
 8003080:	051a      	lsls	r2, r3, #20
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003098:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6899      	ldr	r1, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030a6:	025a      	lsls	r2, r3, #9
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6899      	ldr	r1, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	029a      	lsls	r2, r3, #10
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	609a      	str	r2, [r3, #8]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	40012300 	.word	0x40012300
 80030e4:	0f000001 	.word	0x0f000001

080030e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f8:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <__NVIC_SetPriorityGrouping+0x44>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003104:	4013      	ands	r3, r2
 8003106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003110:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311a:	4a04      	ldr	r2, [pc, #16]	@ (800312c <__NVIC_SetPriorityGrouping+0x44>)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	60d3      	str	r3, [r2, #12]
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003134:	4b04      	ldr	r3, [pc, #16]	@ (8003148 <__NVIC_GetPriorityGrouping+0x18>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	0a1b      	lsrs	r3, r3, #8
 800313a:	f003 0307 	and.w	r3, r3, #7
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	2b00      	cmp	r3, #0
 800315c:	db0b      	blt.n	8003176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	f003 021f 	and.w	r2, r3, #31
 8003164:	4907      	ldr	r1, [pc, #28]	@ (8003184 <__NVIC_EnableIRQ+0x38>)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	2001      	movs	r0, #1
 800316e:	fa00 f202 	lsl.w	r2, r0, r2
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	e000e100 	.word	0xe000e100

08003188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	6039      	str	r1, [r7, #0]
 8003192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003198:	2b00      	cmp	r3, #0
 800319a:	db0a      	blt.n	80031b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	490c      	ldr	r1, [pc, #48]	@ (80031d4 <__NVIC_SetPriority+0x4c>)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	0112      	lsls	r2, r2, #4
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	440b      	add	r3, r1
 80031ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b0:	e00a      	b.n	80031c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	4908      	ldr	r1, [pc, #32]	@ (80031d8 <__NVIC_SetPriority+0x50>)
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	3b04      	subs	r3, #4
 80031c0:	0112      	lsls	r2, r2, #4
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	440b      	add	r3, r1
 80031c6:	761a      	strb	r2, [r3, #24]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	e000e100 	.word	0xe000e100
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	@ 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f1c3 0307 	rsb	r3, r3, #7
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	bf28      	it	cs
 80031fa:	2304      	movcs	r3, #4
 80031fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3304      	adds	r3, #4
 8003202:	2b06      	cmp	r3, #6
 8003204:	d902      	bls.n	800320c <NVIC_EncodePriority+0x30>
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3b03      	subs	r3, #3
 800320a:	e000      	b.n	800320e <NVIC_EncodePriority+0x32>
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003210:	f04f 32ff 	mov.w	r2, #4294967295
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43da      	mvns	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	401a      	ands	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003224:	f04f 31ff 	mov.w	r1, #4294967295
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	43d9      	mvns	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	4313      	orrs	r3, r2
         );
}
 8003236:	4618      	mov	r0, r3
 8003238:	3724      	adds	r7, #36	@ 0x24
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3b01      	subs	r3, #1
 8003250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003254:	d301      	bcc.n	800325a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003256:	2301      	movs	r3, #1
 8003258:	e00f      	b.n	800327a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800325a:	4a0a      	ldr	r2, [pc, #40]	@ (8003284 <SysTick_Config+0x40>)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3b01      	subs	r3, #1
 8003260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003262:	210f      	movs	r1, #15
 8003264:	f04f 30ff 	mov.w	r0, #4294967295
 8003268:	f7ff ff8e 	bl	8003188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800326c:	4b05      	ldr	r3, [pc, #20]	@ (8003284 <SysTick_Config+0x40>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003272:	4b04      	ldr	r3, [pc, #16]	@ (8003284 <SysTick_Config+0x40>)
 8003274:	2207      	movs	r2, #7
 8003276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	e000e010 	.word	0xe000e010

08003288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff ff29 	bl	80030e8 <__NVIC_SetPriorityGrouping>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	4603      	mov	r3, r0
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032b0:	f7ff ff3e 	bl	8003130 <__NVIC_GetPriorityGrouping>
 80032b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	6978      	ldr	r0, [r7, #20]
 80032bc:	f7ff ff8e 	bl	80031dc <NVIC_EncodePriority>
 80032c0:	4602      	mov	r2, r0
 80032c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c6:	4611      	mov	r1, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff5d 	bl	8003188 <__NVIC_SetPriority>
}
 80032ce:	bf00      	nop
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff31 	bl	800314c <__NVIC_EnableIRQ>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff ffa2 	bl	8003244 <SysTick_Config>
 8003300:	4603      	mov	r3, r0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	@ 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800331e:	2300      	movs	r3, #0
 8003320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	e159      	b.n	80035dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003328:	2201      	movs	r2, #1
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	429a      	cmp	r2, r3
 8003342:	f040 8148 	bne.w	80035d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b01      	cmp	r3, #1
 8003350:	d005      	beq.n	800335e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800335a:	2b02      	cmp	r3, #2
 800335c:	d130      	bne.n	80033c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	2203      	movs	r2, #3
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003394:	2201      	movs	r2, #1
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 0201 	and.w	r2, r3, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d017      	beq.n	80033fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	2203      	movs	r2, #3
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d123      	bne.n	8003450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	08da      	lsrs	r2, r3, #3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3208      	adds	r2, #8
 8003410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	220f      	movs	r2, #15
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	08da      	lsrs	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3208      	adds	r2, #8
 800344a:	69b9      	ldr	r1, [r7, #24]
 800344c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	2203      	movs	r2, #3
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0203 	and.w	r2, r3, #3
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80a2 	beq.w	80035d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	4b57      	ldr	r3, [pc, #348]	@ (80035f4 <HAL_GPIO_Init+0x2e8>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	4a56      	ldr	r2, [pc, #344]	@ (80035f4 <HAL_GPIO_Init+0x2e8>)
 800349c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034a2:	4b54      	ldr	r3, [pc, #336]	@ (80035f4 <HAL_GPIO_Init+0x2e8>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ae:	4a52      	ldr	r2, [pc, #328]	@ (80035f8 <HAL_GPIO_Init+0x2ec>)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	089b      	lsrs	r3, r3, #2
 80034b4:	3302      	adds	r3, #2
 80034b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	220f      	movs	r2, #15
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4013      	ands	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a49      	ldr	r2, [pc, #292]	@ (80035fc <HAL_GPIO_Init+0x2f0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d019      	beq.n	800350e <HAL_GPIO_Init+0x202>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a48      	ldr	r2, [pc, #288]	@ (8003600 <HAL_GPIO_Init+0x2f4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_GPIO_Init+0x1fe>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a47      	ldr	r2, [pc, #284]	@ (8003604 <HAL_GPIO_Init+0x2f8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00d      	beq.n	8003506 <HAL_GPIO_Init+0x1fa>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a46      	ldr	r2, [pc, #280]	@ (8003608 <HAL_GPIO_Init+0x2fc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d007      	beq.n	8003502 <HAL_GPIO_Init+0x1f6>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a45      	ldr	r2, [pc, #276]	@ (800360c <HAL_GPIO_Init+0x300>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_GPIO_Init+0x1f2>
 80034fa:	2304      	movs	r3, #4
 80034fc:	e008      	b.n	8003510 <HAL_GPIO_Init+0x204>
 80034fe:	2307      	movs	r3, #7
 8003500:	e006      	b.n	8003510 <HAL_GPIO_Init+0x204>
 8003502:	2303      	movs	r3, #3
 8003504:	e004      	b.n	8003510 <HAL_GPIO_Init+0x204>
 8003506:	2302      	movs	r3, #2
 8003508:	e002      	b.n	8003510 <HAL_GPIO_Init+0x204>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_GPIO_Init+0x204>
 800350e:	2300      	movs	r3, #0
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	f002 0203 	and.w	r2, r2, #3
 8003516:	0092      	lsls	r2, r2, #2
 8003518:	4093      	lsls	r3, r2
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003520:	4935      	ldr	r1, [pc, #212]	@ (80035f8 <HAL_GPIO_Init+0x2ec>)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	3302      	adds	r3, #2
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800352e:	4b38      	ldr	r3, [pc, #224]	@ (8003610 <HAL_GPIO_Init+0x304>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003552:	4a2f      	ldr	r2, [pc, #188]	@ (8003610 <HAL_GPIO_Init+0x304>)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003558:	4b2d      	ldr	r3, [pc, #180]	@ (8003610 <HAL_GPIO_Init+0x304>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800357c:	4a24      	ldr	r2, [pc, #144]	@ (8003610 <HAL_GPIO_Init+0x304>)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003582:	4b23      	ldr	r3, [pc, #140]	@ (8003610 <HAL_GPIO_Init+0x304>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003610 <HAL_GPIO_Init+0x304>)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ac:	4b18      	ldr	r3, [pc, #96]	@ (8003610 <HAL_GPIO_Init+0x304>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003610 <HAL_GPIO_Init+0x304>)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3301      	adds	r3, #1
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b0f      	cmp	r3, #15
 80035e0:	f67f aea2 	bls.w	8003328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3724      	adds	r7, #36	@ 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40013800 	.word	0x40013800
 80035fc:	40020000 	.word	0x40020000
 8003600:	40020400 	.word	0x40020400
 8003604:	40020800 	.word	0x40020800
 8003608:	40020c00 	.word	0x40020c00
 800360c:	40021000 	.word	0x40021000
 8003610:	40013c00 	.word	0x40013c00

08003614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	807b      	strh	r3, [r7, #2]
 8003620:	4613      	mov	r3, r2
 8003622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003624:	787b      	ldrb	r3, [r7, #1]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003630:	e003      	b.n	800363a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003632:	887b      	ldrh	r3, [r7, #2]
 8003634:	041a      	lsls	r2, r3, #16
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	619a      	str	r2, [r3, #24]
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e267      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d075      	beq.n	8003752 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003666:	4b88      	ldr	r3, [pc, #544]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b04      	cmp	r3, #4
 8003670:	d00c      	beq.n	800368c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003672:	4b85      	ldr	r3, [pc, #532]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800367a:	2b08      	cmp	r3, #8
 800367c:	d112      	bne.n	80036a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367e:	4b82      	ldr	r3, [pc, #520]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003686:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800368a:	d10b      	bne.n	80036a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	4b7e      	ldr	r3, [pc, #504]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d05b      	beq.n	8003750 <HAL_RCC_OscConfig+0x108>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d157      	bne.n	8003750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e242      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ac:	d106      	bne.n	80036bc <HAL_RCC_OscConfig+0x74>
 80036ae:	4b76      	ldr	r3, [pc, #472]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a75      	ldr	r2, [pc, #468]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e01d      	b.n	80036f8 <HAL_RCC_OscConfig+0xb0>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0x98>
 80036c6:	4b70      	ldr	r3, [pc, #448]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 80036cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a6c      	ldr	r2, [pc, #432]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e00b      	b.n	80036f8 <HAL_RCC_OscConfig+0xb0>
 80036e0:	4b69      	ldr	r3, [pc, #420]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a68      	ldr	r2, [pc, #416]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 80036e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b66      	ldr	r3, [pc, #408]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a65      	ldr	r2, [pc, #404]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 80036f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d013      	beq.n	8003728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7ff f914 	bl	800292c <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003708:	f7ff f910 	bl	800292c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	@ 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e207      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b5b      	ldr	r3, [pc, #364]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0xc0>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7ff f900 	bl	800292c <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003730:	f7ff f8fc 	bl	800292c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	@ 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e1f3      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003742:	4b51      	ldr	r3, [pc, #324]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0xe8>
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d063      	beq.n	8003826 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800375e:	4b4a      	ldr	r3, [pc, #296]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376a:	4b47      	ldr	r3, [pc, #284]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003772:	2b08      	cmp	r3, #8
 8003774:	d11c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003776:	4b44      	ldr	r3, [pc, #272]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d116      	bne.n	80037b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	4b41      	ldr	r3, [pc, #260]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_RCC_OscConfig+0x152>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d001      	beq.n	800379a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e1c7      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379a:	4b3b      	ldr	r3, [pc, #236]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4937      	ldr	r1, [pc, #220]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ae:	e03a      	b.n	8003826 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d020      	beq.n	80037fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b8:	4b34      	ldr	r3, [pc, #208]	@ (800388c <HAL_RCC_OscConfig+0x244>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7ff f8b5 	bl	800292c <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c6:	f7ff f8b1 	bl	800292c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e1a8      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e4:	4b28      	ldr	r3, [pc, #160]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4925      	ldr	r1, [pc, #148]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]
 80037f8:	e015      	b.n	8003826 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fa:	4b24      	ldr	r3, [pc, #144]	@ (800388c <HAL_RCC_OscConfig+0x244>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7ff f894 	bl	800292c <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003808:	f7ff f890 	bl	800292c <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e187      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381a:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d036      	beq.n	80038a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383a:	4b15      	ldr	r3, [pc, #84]	@ (8003890 <HAL_RCC_OscConfig+0x248>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003840:	f7ff f874 	bl	800292c <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003848:	f7ff f870 	bl	800292c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e167      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385a:	4b0b      	ldr	r3, [pc, #44]	@ (8003888 <HAL_RCC_OscConfig+0x240>)
 800385c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x200>
 8003866:	e01b      	b.n	80038a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003868:	4b09      	ldr	r3, [pc, #36]	@ (8003890 <HAL_RCC_OscConfig+0x248>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386e:	f7ff f85d 	bl	800292c <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003874:	e00e      	b.n	8003894 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003876:	f7ff f859 	bl	800292c <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d907      	bls.n	8003894 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e150      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
 8003888:	40023800 	.word	0x40023800
 800388c:	42470000 	.word	0x42470000
 8003890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003894:	4b88      	ldr	r3, [pc, #544]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ea      	bne.n	8003876 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8097 	beq.w	80039dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b2:	4b81      	ldr	r3, [pc, #516]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10f      	bne.n	80038de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	4b7d      	ldr	r3, [pc, #500]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ce:	4b7a      	ldr	r3, [pc, #488]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038da:	2301      	movs	r3, #1
 80038dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038de:	4b77      	ldr	r3, [pc, #476]	@ (8003abc <HAL_RCC_OscConfig+0x474>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d118      	bne.n	800391c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ea:	4b74      	ldr	r3, [pc, #464]	@ (8003abc <HAL_RCC_OscConfig+0x474>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a73      	ldr	r2, [pc, #460]	@ (8003abc <HAL_RCC_OscConfig+0x474>)
 80038f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f6:	f7ff f819 	bl	800292c <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fe:	f7ff f815 	bl	800292c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e10c      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003910:	4b6a      	ldr	r3, [pc, #424]	@ (8003abc <HAL_RCC_OscConfig+0x474>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d106      	bne.n	8003932 <HAL_RCC_OscConfig+0x2ea>
 8003924:	4b64      	ldr	r3, [pc, #400]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003928:	4a63      	ldr	r2, [pc, #396]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003930:	e01c      	b.n	800396c <HAL_RCC_OscConfig+0x324>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b05      	cmp	r3, #5
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x30c>
 800393a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003940:	f043 0304 	orr.w	r3, r3, #4
 8003944:	6713      	str	r3, [r2, #112]	@ 0x70
 8003946:	4b5c      	ldr	r3, [pc, #368]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	6713      	str	r3, [r2, #112]	@ 0x70
 8003952:	e00b      	b.n	800396c <HAL_RCC_OscConfig+0x324>
 8003954:	4b58      	ldr	r3, [pc, #352]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003958:	4a57      	ldr	r2, [pc, #348]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003960:	4b55      	ldr	r3, [pc, #340]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003964:	4a54      	ldr	r2, [pc, #336]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003966:	f023 0304 	bic.w	r3, r3, #4
 800396a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d015      	beq.n	80039a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fe ffda 	bl	800292c <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397a:	e00a      	b.n	8003992 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800397c:	f7fe ffd6 	bl	800292c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0cb      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003992:	4b49      	ldr	r3, [pc, #292]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0ee      	beq.n	800397c <HAL_RCC_OscConfig+0x334>
 800399e:	e014      	b.n	80039ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a0:	f7fe ffc4 	bl	800292c <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a6:	e00a      	b.n	80039be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a8:	f7fe ffc0 	bl	800292c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e0b5      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039be:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1ee      	bne.n	80039a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d0:	4b39      	ldr	r3, [pc, #228]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d4:	4a38      	ldr	r2, [pc, #224]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80039d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80a1 	beq.w	8003b28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039e6:	4b34      	ldr	r3, [pc, #208]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d05c      	beq.n	8003aac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d141      	bne.n	8003a7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fa:	4b31      	ldr	r3, [pc, #196]	@ (8003ac0 <HAL_RCC_OscConfig+0x478>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fe ff94 	bl	800292c <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe ff90 	bl	800292c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e087      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	4b27      	ldr	r3, [pc, #156]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	019b      	lsls	r3, r3, #6
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a48:	061b      	lsls	r3, r3, #24
 8003a4a:	491b      	ldr	r1, [pc, #108]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <HAL_RCC_OscConfig+0x478>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fe ff69 	bl	800292c <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a5e:	f7fe ff65 	bl	800292c <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e05c      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a70:	4b11      	ldr	r3, [pc, #68]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x416>
 8003a7c:	e054      	b.n	8003b28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7e:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <HAL_RCC_OscConfig+0x478>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fe ff52 	bl	800292c <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fe ff4e 	bl	800292c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e045      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9e:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x444>
 8003aaa:	e03d      	b.n	8003b28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d107      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e038      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40007000 	.word	0x40007000
 8003ac0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b34 <HAL_RCC_OscConfig+0x4ec>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d028      	beq.n	8003b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d121      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d11a      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003af4:	4013      	ands	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003afa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d111      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d107      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800

08003b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0cc      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b4c:	4b68      	ldr	r3, [pc, #416]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d90c      	bls.n	8003b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5a:	4b65      	ldr	r3, [pc, #404]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b62:	4b63      	ldr	r3, [pc, #396]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0b8      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d020      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b8c:	4b59      	ldr	r3, [pc, #356]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4a58      	ldr	r2, [pc, #352]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba4:	4b53      	ldr	r3, [pc, #332]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	4a52      	ldr	r2, [pc, #328]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb0:	4b50      	ldr	r3, [pc, #320]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	494d      	ldr	r1, [pc, #308]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d044      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d107      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	4b47      	ldr	r3, [pc, #284]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d119      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e07f      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d107      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e06f      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c06:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e067      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c16:	4b37      	ldr	r3, [pc, #220]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f023 0203 	bic.w	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	4934      	ldr	r1, [pc, #208]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c28:	f7fe fe80 	bl	800292c <HAL_GetTick>
 8003c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2e:	e00a      	b.n	8003c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c30:	f7fe fe7c 	bl	800292c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e04f      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c46:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 020c 	and.w	r2, r3, #12
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d1eb      	bne.n	8003c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c58:	4b25      	ldr	r3, [pc, #148]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d20c      	bcs.n	8003c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b22      	ldr	r3, [pc, #136]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6e:	4b20      	ldr	r3, [pc, #128]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e032      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c8c:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4916      	ldr	r1, [pc, #88]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003caa:	4b12      	ldr	r3, [pc, #72]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	490e      	ldr	r1, [pc, #56]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cbe:	f000 f821 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	490a      	ldr	r1, [pc, #40]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd0:	5ccb      	ldrb	r3, [r1, r3]
 8003cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd6:	4a09      	ldr	r2, [pc, #36]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cda:	4b09      	ldr	r3, [pc, #36]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe fde0 	bl	80028a4 <HAL_InitTick>

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40023c00 	.word	0x40023c00
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	080085c0 	.word	0x080085c0
 8003cfc:	20000168 	.word	0x20000168
 8003d00:	2000016c 	.word	0x2000016c

08003d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d08:	b090      	sub	sp, #64	@ 0x40
 8003d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d10:	2300      	movs	r3, #0
 8003d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d14:	2300      	movs	r3, #0
 8003d16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d1c:	4b59      	ldr	r3, [pc, #356]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d00d      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x40>
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	f200 80a1 	bhi.w	8003e70 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x34>
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d003      	beq.n	8003d3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d36:	e09b      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d38:	4b53      	ldr	r3, [pc, #332]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003d3c:	e09b      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d3e:	4b53      	ldr	r3, [pc, #332]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d42:	e098      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d44:	4b4f      	ldr	r3, [pc, #316]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d4e:	4b4d      	ldr	r3, [pc, #308]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d028      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	099b      	lsrs	r3, r3, #6
 8003d60:	2200      	movs	r2, #0
 8003d62:	623b      	str	r3, [r7, #32]
 8003d64:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4b47      	ldr	r3, [pc, #284]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d70:	fb03 f201 	mul.w	r2, r3, r1
 8003d74:	2300      	movs	r3, #0
 8003d76:	fb00 f303 	mul.w	r3, r0, r3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	4a43      	ldr	r2, [pc, #268]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d7e:	fba0 1202 	umull	r1, r2, r0, r2
 8003d82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d84:	460a      	mov	r2, r1
 8003d86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d8a:	4413      	add	r3, r2
 8003d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d90:	2200      	movs	r2, #0
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	61fa      	str	r2, [r7, #28]
 8003d96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d9e:	f7fc ff2b 	bl	8000bf8 <__aeabi_uldivmod>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4613      	mov	r3, r2
 8003da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003daa:	e053      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dac:	4b35      	ldr	r3, [pc, #212]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	099b      	lsrs	r3, r3, #6
 8003db2:	2200      	movs	r2, #0
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	617a      	str	r2, [r7, #20]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dbe:	f04f 0b00 	mov.w	fp, #0
 8003dc2:	4652      	mov	r2, sl
 8003dc4:	465b      	mov	r3, fp
 8003dc6:	f04f 0000 	mov.w	r0, #0
 8003dca:	f04f 0100 	mov.w	r1, #0
 8003dce:	0159      	lsls	r1, r3, #5
 8003dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dd4:	0150      	lsls	r0, r2, #5
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	ebb2 080a 	subs.w	r8, r2, sl
 8003dde:	eb63 090b 	sbc.w	r9, r3, fp
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003df2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003df6:	ebb2 0408 	subs.w	r4, r2, r8
 8003dfa:	eb63 0509 	sbc.w	r5, r3, r9
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	00eb      	lsls	r3, r5, #3
 8003e08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e0c:	00e2      	lsls	r2, r4, #3
 8003e0e:	4614      	mov	r4, r2
 8003e10:	461d      	mov	r5, r3
 8003e12:	eb14 030a 	adds.w	r3, r4, sl
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	eb45 030b 	adc.w	r3, r5, fp
 8003e1c:	607b      	str	r3, [r7, #4]
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	028b      	lsls	r3, r1, #10
 8003e2e:	4621      	mov	r1, r4
 8003e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e34:	4621      	mov	r1, r4
 8003e36:	028a      	lsls	r2, r1, #10
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3e:	2200      	movs	r2, #0
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	60fa      	str	r2, [r7, #12]
 8003e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e48:	f7fc fed6 	bl	8000bf8 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4613      	mov	r3, r2
 8003e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e54:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003e64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e6e:	e002      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e70:	4b05      	ldr	r3, [pc, #20]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3740      	adds	r7, #64	@ 0x40
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800
 8003e88:	00f42400 	.word	0x00f42400
 8003e8c:	017d7840 	.word	0x017d7840

08003e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e94:	4b03      	ldr	r3, [pc, #12]	@ (8003ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e96:	681b      	ldr	r3, [r3, #0]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000168 	.word	0x20000168

08003ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003eac:	f7ff fff0 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b05      	ldr	r3, [pc, #20]	@ (8003ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	0a9b      	lsrs	r3, r3, #10
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4903      	ldr	r1, [pc, #12]	@ (8003ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	080085d0 	.word	0x080085d0

08003ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ed4:	f7ff ffdc 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b05      	ldr	r3, [pc, #20]	@ (8003ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	0b5b      	lsrs	r3, r3, #13
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	4903      	ldr	r1, [pc, #12]	@ (8003ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	080085d0 	.word	0x080085d0

08003ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e041      	b.n	8003f8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fe fabe 	bl	80024a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3304      	adds	r3, #4
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f000 fd3c 	bl	80049b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e03c      	b.n	800402a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8004038 <HAL_TIM_Base_Start+0xa0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d018      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x5c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fca:	d013      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x5c>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800403c <HAL_TIM_Base_Start+0xa4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x5c>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a19      	ldr	r2, [pc, #100]	@ (8004040 <HAL_TIM_Base_Start+0xa8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d009      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x5c>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a17      	ldr	r2, [pc, #92]	@ (8004044 <HAL_TIM_Base_Start+0xac>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x5c>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a16      	ldr	r2, [pc, #88]	@ (8004048 <HAL_TIM_Base_Start+0xb0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d111      	bne.n	8004018 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b06      	cmp	r3, #6
 8004004:	d010      	beq.n	8004028 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004016:	e007      	b.n	8004028 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40010000 	.word	0x40010000
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800
 8004044:	40000c00 	.word	0x40000c00
 8004048:	40014000 	.word	0x40014000

0800404c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d001      	beq.n	8004064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e044      	b.n	80040ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1e      	ldr	r2, [pc, #120]	@ (80040fc <HAL_TIM_Base_Start_IT+0xb0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d018      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x6c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800408e:	d013      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x6c>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1a      	ldr	r2, [pc, #104]	@ (8004100 <HAL_TIM_Base_Start_IT+0xb4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00e      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x6c>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a19      	ldr	r2, [pc, #100]	@ (8004104 <HAL_TIM_Base_Start_IT+0xb8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d009      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x6c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a17      	ldr	r2, [pc, #92]	@ (8004108 <HAL_TIM_Base_Start_IT+0xbc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d004      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x6c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a16      	ldr	r2, [pc, #88]	@ (800410c <HAL_TIM_Base_Start_IT+0xc0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d111      	bne.n	80040dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b06      	cmp	r3, #6
 80040c8:	d010      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040da:	e007      	b.n	80040ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40010000 	.word	0x40010000
 8004100:	40000400 	.word	0x40000400
 8004104:	40000800 	.word	0x40000800
 8004108:	40000c00 	.word	0x40000c00
 800410c:	40014000 	.word	0x40014000

08004110 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e041      	b.n	80041a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f839 	bl	80041ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f000 fc30 	bl	80049b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <HAL_TIM_PWM_Start+0x24>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	e022      	b.n	800422e <HAL_TIM_PWM_Start+0x6a>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d109      	bne.n	8004202 <HAL_TIM_PWM_Start+0x3e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	e015      	b.n	800422e <HAL_TIM_PWM_Start+0x6a>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d109      	bne.n	800421c <HAL_TIM_PWM_Start+0x58>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	e008      	b.n	800422e <HAL_TIM_PWM_Start+0x6a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e068      	b.n	8004308 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <HAL_TIM_PWM_Start+0x82>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004244:	e013      	b.n	800426e <HAL_TIM_PWM_Start+0xaa>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d104      	bne.n	8004256 <HAL_TIM_PWM_Start+0x92>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004254:	e00b      	b.n	800426e <HAL_TIM_PWM_Start+0xaa>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d104      	bne.n	8004266 <HAL_TIM_PWM_Start+0xa2>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004264:	e003      	b.n	800426e <HAL_TIM_PWM_Start+0xaa>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2201      	movs	r2, #1
 8004274:	6839      	ldr	r1, [r7, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fe4e 	bl	8004f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a23      	ldr	r2, [pc, #140]	@ (8004310 <HAL_TIM_PWM_Start+0x14c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d107      	bne.n	8004296 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004294:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1d      	ldr	r2, [pc, #116]	@ (8004310 <HAL_TIM_PWM_Start+0x14c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d018      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x10e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a8:	d013      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x10e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a19      	ldr	r2, [pc, #100]	@ (8004314 <HAL_TIM_PWM_Start+0x150>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00e      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x10e>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a17      	ldr	r2, [pc, #92]	@ (8004318 <HAL_TIM_PWM_Start+0x154>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d009      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x10e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a16      	ldr	r2, [pc, #88]	@ (800431c <HAL_TIM_PWM_Start+0x158>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x10e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a14      	ldr	r2, [pc, #80]	@ (8004320 <HAL_TIM_PWM_Start+0x15c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d111      	bne.n	80042f6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d010      	beq.n	8004306 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	e007      	b.n	8004306 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40010000 	.word	0x40010000
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800
 800431c:	40000c00 	.word	0x40000c00
 8004320:	40014000 	.word	0x40014000

08004324 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e097      	b.n	8004468 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d106      	bne.n	8004352 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7fe f85f 	bl	8002410 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004368:	f023 0307 	bic.w	r3, r3, #7
 800436c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3304      	adds	r3, #4
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f000 fb1b 	bl	80049b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043a6:	f023 0303 	bic.w	r3, r3, #3
 80043aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	4313      	orrs	r3, r2
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80043c4:	f023 030c 	bic.w	r3, r3, #12
 80043c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	4313      	orrs	r3, r2
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	011a      	lsls	r2, r3, #4
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	031b      	lsls	r3, r3, #12
 80043f4:	4313      	orrs	r3, r2
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004402:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800440a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	4313      	orrs	r3, r2
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d020      	beq.n	80044d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01b      	beq.n	80044d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0202 	mvn.w	r2, #2
 80044a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fa5b 	bl	8004976 <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa4d 	bl	8004962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fa5e 	bl	800498a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d020      	beq.n	8004520 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01b      	beq.n	8004520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0204 	mvn.w	r2, #4
 80044f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa35 	bl	8004976 <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fa27 	bl	8004962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fa38 	bl	800498a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d020      	beq.n	800456c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01b      	beq.n	800456c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0208 	mvn.w	r2, #8
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2204      	movs	r2, #4
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fa0f 	bl	8004976 <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fa01 	bl	8004962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fa12 	bl	800498a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b00      	cmp	r3, #0
 8004574:	d020      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01b      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0210 	mvn.w	r2, #16
 8004588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2208      	movs	r2, #8
 800458e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f9e9 	bl	8004976 <HAL_TIM_IC_CaptureCallback>
 80045a4:	e005      	b.n	80045b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f9db 	bl	8004962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f9ec 	bl	800498a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00c      	beq.n	80045dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0201 	mvn.w	r2, #1
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd fcba 	bl	8001f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fd2a 	bl	8005054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00c      	beq.n	8004624 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f9bd 	bl	800499e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0220 	mvn.w	r2, #32
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fcfc 	bl	8005040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800466a:	2302      	movs	r3, #2
 800466c:	e0ae      	b.n	80047cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b0c      	cmp	r3, #12
 800467a:	f200 809f 	bhi.w	80047bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800467e:	a201      	add	r2, pc, #4	@ (adr r2, 8004684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046b9 	.word	0x080046b9
 8004688:	080047bd 	.word	0x080047bd
 800468c:	080047bd 	.word	0x080047bd
 8004690:	080047bd 	.word	0x080047bd
 8004694:	080046f9 	.word	0x080046f9
 8004698:	080047bd 	.word	0x080047bd
 800469c:	080047bd 	.word	0x080047bd
 80046a0:	080047bd 	.word	0x080047bd
 80046a4:	0800473b 	.word	0x0800473b
 80046a8:	080047bd 	.word	0x080047bd
 80046ac:	080047bd 	.word	0x080047bd
 80046b0:	080047bd 	.word	0x080047bd
 80046b4:	0800477b 	.word	0x0800477b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fa04 	bl	8004acc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0208 	orr.w	r2, r2, #8
 80046d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0204 	bic.w	r2, r2, #4
 80046e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6999      	ldr	r1, [r3, #24]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	619a      	str	r2, [r3, #24]
      break;
 80046f6:	e064      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fa4a 	bl	8004b98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6999      	ldr	r1, [r3, #24]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	021a      	lsls	r2, r3, #8
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	619a      	str	r2, [r3, #24]
      break;
 8004738:	e043      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fa95 	bl	8004c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0208 	orr.w	r2, r2, #8
 8004754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0204 	bic.w	r2, r2, #4
 8004764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69d9      	ldr	r1, [r3, #28]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	61da      	str	r2, [r3, #28]
      break;
 8004778:	e023      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fadf 	bl	8004d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69d9      	ldr	r1, [r3, #28]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	021a      	lsls	r2, r3, #8
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	61da      	str	r2, [r3, #28]
      break;
 80047ba:	e002      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	75fb      	strb	r3, [r7, #23]
      break;
 80047c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_TIM_ConfigClockSource+0x1c>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e0b4      	b.n	800495a <HAL_TIM_ConfigClockSource+0x186>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800480e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004828:	d03e      	beq.n	80048a8 <HAL_TIM_ConfigClockSource+0xd4>
 800482a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800482e:	f200 8087 	bhi.w	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004836:	f000 8086 	beq.w	8004946 <HAL_TIM_ConfigClockSource+0x172>
 800483a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800483e:	d87f      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004840:	2b70      	cmp	r3, #112	@ 0x70
 8004842:	d01a      	beq.n	800487a <HAL_TIM_ConfigClockSource+0xa6>
 8004844:	2b70      	cmp	r3, #112	@ 0x70
 8004846:	d87b      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004848:	2b60      	cmp	r3, #96	@ 0x60
 800484a:	d050      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x11a>
 800484c:	2b60      	cmp	r3, #96	@ 0x60
 800484e:	d877      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004850:	2b50      	cmp	r3, #80	@ 0x50
 8004852:	d03c      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0xfa>
 8004854:	2b50      	cmp	r3, #80	@ 0x50
 8004856:	d873      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004858:	2b40      	cmp	r3, #64	@ 0x40
 800485a:	d058      	beq.n	800490e <HAL_TIM_ConfigClockSource+0x13a>
 800485c:	2b40      	cmp	r3, #64	@ 0x40
 800485e:	d86f      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004860:	2b30      	cmp	r3, #48	@ 0x30
 8004862:	d064      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x15a>
 8004864:	2b30      	cmp	r3, #48	@ 0x30
 8004866:	d86b      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004868:	2b20      	cmp	r3, #32
 800486a:	d060      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x15a>
 800486c:	2b20      	cmp	r3, #32
 800486e:	d867      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d05c      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x15a>
 8004874:	2b10      	cmp	r3, #16
 8004876:	d05a      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x15a>
 8004878:	e062      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800488a:	f000 fb25 	bl	8004ed8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800489c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	609a      	str	r2, [r3, #8]
      break;
 80048a6:	e04f      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048b8:	f000 fb0e 	bl	8004ed8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ca:	609a      	str	r2, [r3, #8]
      break;
 80048cc:	e03c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048da:	461a      	mov	r2, r3
 80048dc:	f000 fa82 	bl	8004de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2150      	movs	r1, #80	@ 0x50
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fadb 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 80048ec:	e02c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048fa:	461a      	mov	r2, r3
 80048fc:	f000 faa1 	bl	8004e42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2160      	movs	r1, #96	@ 0x60
 8004906:	4618      	mov	r0, r3
 8004908:	f000 facb 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 800490c:	e01c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800491a:	461a      	mov	r2, r3
 800491c:	f000 fa62 	bl	8004de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2140      	movs	r1, #64	@ 0x40
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fabb 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 800492c:	e00c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f000 fab2 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 800493e:	e003      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
      break;
 8004944:	e000      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a3a      	ldr	r2, [pc, #232]	@ (8004ab0 <TIM_Base_SetConfig+0xfc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00f      	beq.n	80049ec <TIM_Base_SetConfig+0x38>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d2:	d00b      	beq.n	80049ec <TIM_Base_SetConfig+0x38>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a37      	ldr	r2, [pc, #220]	@ (8004ab4 <TIM_Base_SetConfig+0x100>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d007      	beq.n	80049ec <TIM_Base_SetConfig+0x38>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a36      	ldr	r2, [pc, #216]	@ (8004ab8 <TIM_Base_SetConfig+0x104>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d003      	beq.n	80049ec <TIM_Base_SetConfig+0x38>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a35      	ldr	r2, [pc, #212]	@ (8004abc <TIM_Base_SetConfig+0x108>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d108      	bne.n	80049fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab0 <TIM_Base_SetConfig+0xfc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01b      	beq.n	8004a3e <TIM_Base_SetConfig+0x8a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a0c:	d017      	beq.n	8004a3e <TIM_Base_SetConfig+0x8a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a28      	ldr	r2, [pc, #160]	@ (8004ab4 <TIM_Base_SetConfig+0x100>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d013      	beq.n	8004a3e <TIM_Base_SetConfig+0x8a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a27      	ldr	r2, [pc, #156]	@ (8004ab8 <TIM_Base_SetConfig+0x104>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00f      	beq.n	8004a3e <TIM_Base_SetConfig+0x8a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a26      	ldr	r2, [pc, #152]	@ (8004abc <TIM_Base_SetConfig+0x108>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00b      	beq.n	8004a3e <TIM_Base_SetConfig+0x8a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a25      	ldr	r2, [pc, #148]	@ (8004ac0 <TIM_Base_SetConfig+0x10c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d007      	beq.n	8004a3e <TIM_Base_SetConfig+0x8a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a24      	ldr	r2, [pc, #144]	@ (8004ac4 <TIM_Base_SetConfig+0x110>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_Base_SetConfig+0x8a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a23      	ldr	r2, [pc, #140]	@ (8004ac8 <TIM_Base_SetConfig+0x114>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d108      	bne.n	8004a50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab0 <TIM_Base_SetConfig+0xfc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d103      	bne.n	8004a84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d105      	bne.n	8004aa2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f023 0201 	bic.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	611a      	str	r2, [r3, #16]
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800
 8004abc:	40000c00 	.word	0x40000c00
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40014400 	.word	0x40014400
 8004ac8:	40014800 	.word	0x40014800

08004acc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f023 0201 	bic.w	r2, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f023 0302 	bic.w	r3, r3, #2
 8004b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a1c      	ldr	r2, [pc, #112]	@ (8004b94 <TIM_OC1_SetConfig+0xc8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d10c      	bne.n	8004b42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 0308 	bic.w	r3, r3, #8
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f023 0304 	bic.w	r3, r3, #4
 8004b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a13      	ldr	r2, [pc, #76]	@ (8004b94 <TIM_OC1_SetConfig+0xc8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d111      	bne.n	8004b6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	621a      	str	r2, [r3, #32]
}
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40010000 	.word	0x40010000

08004b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f023 0210 	bic.w	r2, r3, #16
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f023 0320 	bic.w	r3, r3, #32
 8004be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c6c <TIM_OC2_SetConfig+0xd4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d10d      	bne.n	8004c14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a15      	ldr	r2, [pc, #84]	@ (8004c6c <TIM_OC2_SetConfig+0xd4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d113      	bne.n	8004c44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	621a      	str	r2, [r3, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000

08004c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d40 <TIM_OC3_SetConfig+0xd0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d10d      	bne.n	8004cea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a14      	ldr	r2, [pc, #80]	@ (8004d40 <TIM_OC3_SetConfig+0xd0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d113      	bne.n	8004d1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	621a      	str	r2, [r3, #32]
}
 8004d34:	bf00      	nop
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	40010000 	.word	0x40010000

08004d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	021b      	lsls	r3, r3, #8
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	031b      	lsls	r3, r3, #12
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a10      	ldr	r2, [pc, #64]	@ (8004de0 <TIM_OC4_SetConfig+0x9c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d109      	bne.n	8004db8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	019b      	lsls	r3, r3, #6
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000

08004de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f023 0201 	bic.w	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f023 030a 	bic.w	r3, r3, #10
 8004e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	621a      	str	r2, [r3, #32]
}
 8004e36:	bf00      	nop
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b087      	sub	sp, #28
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	f023 0210 	bic.w	r2, r3, #16
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	031b      	lsls	r3, r3, #12
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f043 0307 	orr.w	r3, r3, #7
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	609a      	str	r2, [r3, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	021a      	lsls	r2, r3, #8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	609a      	str	r2, [r3, #8]
}
 8004f0c:	bf00      	nop
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1a      	ldr	r2, [r3, #32]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	401a      	ands	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1a      	ldr	r2, [r3, #32]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	431a      	orrs	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e050      	b.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1c      	ldr	r2, [pc, #112]	@ (800502c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d018      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc8:	d013      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a18      	ldr	r2, [pc, #96]	@ (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00e      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a16      	ldr	r2, [pc, #88]	@ (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d009      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a15      	ldr	r2, [pc, #84]	@ (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d004      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a13      	ldr	r2, [pc, #76]	@ (800503c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d10c      	bne.n	800500c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	4313      	orrs	r3, r2
 8005002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40014000 	.word	0x40014000

08005040 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e042      	b.n	8005100 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fd fa7e 	bl	8002590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	@ 0x24
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f973 	bl	8005398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	@ 0x28
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	4613      	mov	r3, r2
 8005116:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b20      	cmp	r3, #32
 8005126:	d175      	bne.n	8005214 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_UART_Transmit+0x2c>
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e06e      	b.n	8005216 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2221      	movs	r2, #33	@ 0x21
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005146:	f7fd fbf1 	bl	800292c <HAL_GetTick>
 800514a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	88fa      	ldrh	r2, [r7, #6]
 8005150:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	88fa      	ldrh	r2, [r7, #6]
 8005156:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005160:	d108      	bne.n	8005174 <HAL_UART_Transmit+0x6c>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d104      	bne.n	8005174 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	e003      	b.n	800517c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800517c:	e02e      	b.n	80051dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	2180      	movs	r1, #128	@ 0x80
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f848 	bl	800521e <UART_WaitOnFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e03a      	b.n	8005216 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10b      	bne.n	80051be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	3302      	adds	r3, #2
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	e007      	b.n	80051ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	781a      	ldrb	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	3301      	adds	r3, #1
 80051cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1cb      	bne.n	800517e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2200      	movs	r2, #0
 80051ee:	2140      	movs	r1, #64	@ 0x40
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f814 	bl	800521e <UART_WaitOnFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e006      	b.n	8005216 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	e000      	b.n	8005216 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005214:	2302      	movs	r3, #2
  }
}
 8005216:	4618      	mov	r0, r3
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b086      	sub	sp, #24
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522e:	e03b      	b.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005236:	d037      	beq.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005238:	f7fd fb78 	bl	800292c <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	429a      	cmp	r2, r3
 8005246:	d302      	bcc.n	800524e <UART_WaitOnFlagUntilTimeout+0x30>
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e03a      	b.n	80052c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d023      	beq.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b80      	cmp	r3, #128	@ 0x80
 8005264:	d020      	beq.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b40      	cmp	r3, #64	@ 0x40
 800526a:	d01d      	beq.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b08      	cmp	r3, #8
 8005278:	d116      	bne.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f81d 	bl	80052d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2208      	movs	r2, #8
 800529a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e00f      	b.n	80052c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4013      	ands	r3, r2
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	bf0c      	ite	eq
 80052b8:	2301      	moveq	r3, #1
 80052ba:	2300      	movne	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d0b4      	beq.n	8005230 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b095      	sub	sp, #84	@ 0x54
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80052fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e5      	bne.n	80052d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3314      	adds	r3, #20
 8005312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	61fb      	str	r3, [r7, #28]
   return(result);
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3314      	adds	r3, #20
 800532a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800532c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800532e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e5      	bne.n	800530c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	2b01      	cmp	r3, #1
 8005346:	d119      	bne.n	800537c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	60bb      	str	r3, [r7, #8]
   return(result);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f023 0310 	bic.w	r3, r3, #16
 800535e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005368:	61ba      	str	r2, [r7, #24]
 800536a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6979      	ldr	r1, [r7, #20]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	613b      	str	r3, [r7, #16]
   return(result);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e5      	bne.n	8005348 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800538a:	bf00      	nop
 800538c:	3754      	adds	r7, #84	@ 0x54
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
	...

08005398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800539c:	b0c0      	sub	sp, #256	@ 0x100
 800539e:	af00      	add	r7, sp, #0
 80053a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b4:	68d9      	ldr	r1, [r3, #12]
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	ea40 0301 	orr.w	r3, r0, r1
 80053c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053f0:	f021 010c 	bic.w	r1, r1, #12
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053fe:	430b      	orrs	r3, r1
 8005400:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800540e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005412:	6999      	ldr	r1, [r3, #24]
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	ea40 0301 	orr.w	r3, r0, r1
 800541e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b8f      	ldr	r3, [pc, #572]	@ (8005664 <UART_SetConfig+0x2cc>)
 8005428:	429a      	cmp	r2, r3
 800542a:	d005      	beq.n	8005438 <UART_SetConfig+0xa0>
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b8d      	ldr	r3, [pc, #564]	@ (8005668 <UART_SetConfig+0x2d0>)
 8005434:	429a      	cmp	r2, r3
 8005436:	d104      	bne.n	8005442 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005438:	f7fe fd4a 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 800543c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005440:	e003      	b.n	800544a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005442:	f7fe fd31 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 8005446:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800544a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005454:	f040 810c 	bne.w	8005670 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800545c:	2200      	movs	r2, #0
 800545e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005462:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005466:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800546a:	4622      	mov	r2, r4
 800546c:	462b      	mov	r3, r5
 800546e:	1891      	adds	r1, r2, r2
 8005470:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005472:	415b      	adcs	r3, r3
 8005474:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005476:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800547a:	4621      	mov	r1, r4
 800547c:	eb12 0801 	adds.w	r8, r2, r1
 8005480:	4629      	mov	r1, r5
 8005482:	eb43 0901 	adc.w	r9, r3, r1
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	f04f 0300 	mov.w	r3, #0
 800548e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800549a:	4690      	mov	r8, r2
 800549c:	4699      	mov	r9, r3
 800549e:	4623      	mov	r3, r4
 80054a0:	eb18 0303 	adds.w	r3, r8, r3
 80054a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80054a8:	462b      	mov	r3, r5
 80054aa:	eb49 0303 	adc.w	r3, r9, r3
 80054ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80054c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054c6:	460b      	mov	r3, r1
 80054c8:	18db      	adds	r3, r3, r3
 80054ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80054cc:	4613      	mov	r3, r2
 80054ce:	eb42 0303 	adc.w	r3, r2, r3
 80054d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80054d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054dc:	f7fb fb8c 	bl	8000bf8 <__aeabi_uldivmod>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4b61      	ldr	r3, [pc, #388]	@ (800566c <UART_SetConfig+0x2d4>)
 80054e6:	fba3 2302 	umull	r2, r3, r3, r2
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	011c      	lsls	r4, r3, #4
 80054ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005500:	4642      	mov	r2, r8
 8005502:	464b      	mov	r3, r9
 8005504:	1891      	adds	r1, r2, r2
 8005506:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005508:	415b      	adcs	r3, r3
 800550a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800550c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005510:	4641      	mov	r1, r8
 8005512:	eb12 0a01 	adds.w	sl, r2, r1
 8005516:	4649      	mov	r1, r9
 8005518:	eb43 0b01 	adc.w	fp, r3, r1
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005528:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800552c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005530:	4692      	mov	sl, r2
 8005532:	469b      	mov	fp, r3
 8005534:	4643      	mov	r3, r8
 8005536:	eb1a 0303 	adds.w	r3, sl, r3
 800553a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800553e:	464b      	mov	r3, r9
 8005540:	eb4b 0303 	adc.w	r3, fp, r3
 8005544:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005554:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005558:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800555c:	460b      	mov	r3, r1
 800555e:	18db      	adds	r3, r3, r3
 8005560:	643b      	str	r3, [r7, #64]	@ 0x40
 8005562:	4613      	mov	r3, r2
 8005564:	eb42 0303 	adc.w	r3, r2, r3
 8005568:	647b      	str	r3, [r7, #68]	@ 0x44
 800556a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800556e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005572:	f7fb fb41 	bl	8000bf8 <__aeabi_uldivmod>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4611      	mov	r1, r2
 800557c:	4b3b      	ldr	r3, [pc, #236]	@ (800566c <UART_SetConfig+0x2d4>)
 800557e:	fba3 2301 	umull	r2, r3, r3, r1
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	2264      	movs	r2, #100	@ 0x64
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	1acb      	subs	r3, r1, r3
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005592:	4b36      	ldr	r3, [pc, #216]	@ (800566c <UART_SetConfig+0x2d4>)
 8005594:	fba3 2302 	umull	r2, r3, r3, r2
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80055a0:	441c      	add	r4, r3
 80055a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80055b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80055b4:	4642      	mov	r2, r8
 80055b6:	464b      	mov	r3, r9
 80055b8:	1891      	adds	r1, r2, r2
 80055ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80055bc:	415b      	adcs	r3, r3
 80055be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80055c4:	4641      	mov	r1, r8
 80055c6:	1851      	adds	r1, r2, r1
 80055c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80055ca:	4649      	mov	r1, r9
 80055cc:	414b      	adcs	r3, r1
 80055ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055dc:	4659      	mov	r1, fp
 80055de:	00cb      	lsls	r3, r1, #3
 80055e0:	4651      	mov	r1, sl
 80055e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055e6:	4651      	mov	r1, sl
 80055e8:	00ca      	lsls	r2, r1, #3
 80055ea:	4610      	mov	r0, r2
 80055ec:	4619      	mov	r1, r3
 80055ee:	4603      	mov	r3, r0
 80055f0:	4642      	mov	r2, r8
 80055f2:	189b      	adds	r3, r3, r2
 80055f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055f8:	464b      	mov	r3, r9
 80055fa:	460a      	mov	r2, r1
 80055fc:	eb42 0303 	adc.w	r3, r2, r3
 8005600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005610:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005614:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005618:	460b      	mov	r3, r1
 800561a:	18db      	adds	r3, r3, r3
 800561c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800561e:	4613      	mov	r3, r2
 8005620:	eb42 0303 	adc.w	r3, r2, r3
 8005624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800562a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800562e:	f7fb fae3 	bl	8000bf8 <__aeabi_uldivmod>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4b0d      	ldr	r3, [pc, #52]	@ (800566c <UART_SetConfig+0x2d4>)
 8005638:	fba3 1302 	umull	r1, r3, r3, r2
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	2164      	movs	r1, #100	@ 0x64
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	3332      	adds	r3, #50	@ 0x32
 800564a:	4a08      	ldr	r2, [pc, #32]	@ (800566c <UART_SetConfig+0x2d4>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	f003 0207 	and.w	r2, r3, #7
 8005656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4422      	add	r2, r4
 800565e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005660:	e106      	b.n	8005870 <UART_SetConfig+0x4d8>
 8005662:	bf00      	nop
 8005664:	40011000 	.word	0x40011000
 8005668:	40011400 	.word	0x40011400
 800566c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005674:	2200      	movs	r2, #0
 8005676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800567a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800567e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005682:	4642      	mov	r2, r8
 8005684:	464b      	mov	r3, r9
 8005686:	1891      	adds	r1, r2, r2
 8005688:	6239      	str	r1, [r7, #32]
 800568a:	415b      	adcs	r3, r3
 800568c:	627b      	str	r3, [r7, #36]	@ 0x24
 800568e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005692:	4641      	mov	r1, r8
 8005694:	1854      	adds	r4, r2, r1
 8005696:	4649      	mov	r1, r9
 8005698:	eb43 0501 	adc.w	r5, r3, r1
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	00eb      	lsls	r3, r5, #3
 80056a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056aa:	00e2      	lsls	r2, r4, #3
 80056ac:	4614      	mov	r4, r2
 80056ae:	461d      	mov	r5, r3
 80056b0:	4643      	mov	r3, r8
 80056b2:	18e3      	adds	r3, r4, r3
 80056b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056b8:	464b      	mov	r3, r9
 80056ba:	eb45 0303 	adc.w	r3, r5, r3
 80056be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056de:	4629      	mov	r1, r5
 80056e0:	008b      	lsls	r3, r1, #2
 80056e2:	4621      	mov	r1, r4
 80056e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056e8:	4621      	mov	r1, r4
 80056ea:	008a      	lsls	r2, r1, #2
 80056ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056f0:	f7fb fa82 	bl	8000bf8 <__aeabi_uldivmod>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4b60      	ldr	r3, [pc, #384]	@ (800587c <UART_SetConfig+0x4e4>)
 80056fa:	fba3 2302 	umull	r2, r3, r3, r2
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	011c      	lsls	r4, r3, #4
 8005702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005706:	2200      	movs	r2, #0
 8005708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800570c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005710:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005714:	4642      	mov	r2, r8
 8005716:	464b      	mov	r3, r9
 8005718:	1891      	adds	r1, r2, r2
 800571a:	61b9      	str	r1, [r7, #24]
 800571c:	415b      	adcs	r3, r3
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005724:	4641      	mov	r1, r8
 8005726:	1851      	adds	r1, r2, r1
 8005728:	6139      	str	r1, [r7, #16]
 800572a:	4649      	mov	r1, r9
 800572c:	414b      	adcs	r3, r1
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800573c:	4659      	mov	r1, fp
 800573e:	00cb      	lsls	r3, r1, #3
 8005740:	4651      	mov	r1, sl
 8005742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005746:	4651      	mov	r1, sl
 8005748:	00ca      	lsls	r2, r1, #3
 800574a:	4610      	mov	r0, r2
 800574c:	4619      	mov	r1, r3
 800574e:	4603      	mov	r3, r0
 8005750:	4642      	mov	r2, r8
 8005752:	189b      	adds	r3, r3, r2
 8005754:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005758:	464b      	mov	r3, r9
 800575a:	460a      	mov	r2, r1
 800575c:	eb42 0303 	adc.w	r3, r2, r3
 8005760:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800576e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800577c:	4649      	mov	r1, r9
 800577e:	008b      	lsls	r3, r1, #2
 8005780:	4641      	mov	r1, r8
 8005782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005786:	4641      	mov	r1, r8
 8005788:	008a      	lsls	r2, r1, #2
 800578a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800578e:	f7fb fa33 	bl	8000bf8 <__aeabi_uldivmod>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4611      	mov	r1, r2
 8005798:	4b38      	ldr	r3, [pc, #224]	@ (800587c <UART_SetConfig+0x4e4>)
 800579a:	fba3 2301 	umull	r2, r3, r3, r1
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	2264      	movs	r2, #100	@ 0x64
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
 80057a6:	1acb      	subs	r3, r1, r3
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	3332      	adds	r3, #50	@ 0x32
 80057ac:	4a33      	ldr	r2, [pc, #204]	@ (800587c <UART_SetConfig+0x4e4>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057b8:	441c      	add	r4, r3
 80057ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057be:	2200      	movs	r2, #0
 80057c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80057c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80057c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	1891      	adds	r1, r2, r2
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	415b      	adcs	r3, r3
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057d8:	4641      	mov	r1, r8
 80057da:	1851      	adds	r1, r2, r1
 80057dc:	6039      	str	r1, [r7, #0]
 80057de:	4649      	mov	r1, r9
 80057e0:	414b      	adcs	r3, r1
 80057e2:	607b      	str	r3, [r7, #4]
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057f0:	4659      	mov	r1, fp
 80057f2:	00cb      	lsls	r3, r1, #3
 80057f4:	4651      	mov	r1, sl
 80057f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057fa:	4651      	mov	r1, sl
 80057fc:	00ca      	lsls	r2, r1, #3
 80057fe:	4610      	mov	r0, r2
 8005800:	4619      	mov	r1, r3
 8005802:	4603      	mov	r3, r0
 8005804:	4642      	mov	r2, r8
 8005806:	189b      	adds	r3, r3, r2
 8005808:	66bb      	str	r3, [r7, #104]	@ 0x68
 800580a:	464b      	mov	r3, r9
 800580c:	460a      	mov	r2, r1
 800580e:	eb42 0303 	adc.w	r3, r2, r3
 8005812:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	663b      	str	r3, [r7, #96]	@ 0x60
 800581e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800582c:	4649      	mov	r1, r9
 800582e:	008b      	lsls	r3, r1, #2
 8005830:	4641      	mov	r1, r8
 8005832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005836:	4641      	mov	r1, r8
 8005838:	008a      	lsls	r2, r1, #2
 800583a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800583e:	f7fb f9db 	bl	8000bf8 <__aeabi_uldivmod>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4b0d      	ldr	r3, [pc, #52]	@ (800587c <UART_SetConfig+0x4e4>)
 8005848:	fba3 1302 	umull	r1, r3, r3, r2
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	2164      	movs	r1, #100	@ 0x64
 8005850:	fb01 f303 	mul.w	r3, r1, r3
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	3332      	adds	r3, #50	@ 0x32
 800585a:	4a08      	ldr	r2, [pc, #32]	@ (800587c <UART_SetConfig+0x4e4>)
 800585c:	fba2 2303 	umull	r2, r3, r2, r3
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	f003 020f 	and.w	r2, r3, #15
 8005866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4422      	add	r2, r4
 800586e:	609a      	str	r2, [r3, #8]
}
 8005870:	bf00      	nop
 8005872:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005876:	46bd      	mov	sp, r7
 8005878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800587c:	51eb851f 	.word	0x51eb851f

08005880 <calloc>:
 8005880:	4b02      	ldr	r3, [pc, #8]	@ (800588c <calloc+0xc>)
 8005882:	460a      	mov	r2, r1
 8005884:	4601      	mov	r1, r0
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	f000 b802 	b.w	8005890 <_calloc_r>
 800588c:	20000180 	.word	0x20000180

08005890 <_calloc_r>:
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	fba1 5402 	umull	r5, r4, r1, r2
 8005896:	b93c      	cbnz	r4, 80058a8 <_calloc_r+0x18>
 8005898:	4629      	mov	r1, r5
 800589a:	f000 f837 	bl	800590c <_malloc_r>
 800589e:	4606      	mov	r6, r0
 80058a0:	b928      	cbnz	r0, 80058ae <_calloc_r+0x1e>
 80058a2:	2600      	movs	r6, #0
 80058a4:	4630      	mov	r0, r6
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	220c      	movs	r2, #12
 80058aa:	6002      	str	r2, [r0, #0]
 80058ac:	e7f9      	b.n	80058a2 <_calloc_r+0x12>
 80058ae:	462a      	mov	r2, r5
 80058b0:	4621      	mov	r1, r4
 80058b2:	f000 fe40 	bl	8006536 <memset>
 80058b6:	e7f5      	b.n	80058a4 <_calloc_r+0x14>

080058b8 <malloc>:
 80058b8:	4b02      	ldr	r3, [pc, #8]	@ (80058c4 <malloc+0xc>)
 80058ba:	4601      	mov	r1, r0
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	f000 b825 	b.w	800590c <_malloc_r>
 80058c2:	bf00      	nop
 80058c4:	20000180 	.word	0x20000180

080058c8 <sbrk_aligned>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	4e0f      	ldr	r6, [pc, #60]	@ (8005908 <sbrk_aligned+0x40>)
 80058cc:	460c      	mov	r4, r1
 80058ce:	6831      	ldr	r1, [r6, #0]
 80058d0:	4605      	mov	r5, r0
 80058d2:	b911      	cbnz	r1, 80058da <sbrk_aligned+0x12>
 80058d4:	f000 fe70 	bl	80065b8 <_sbrk_r>
 80058d8:	6030      	str	r0, [r6, #0]
 80058da:	4621      	mov	r1, r4
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 fe6b 	bl	80065b8 <_sbrk_r>
 80058e2:	1c43      	adds	r3, r0, #1
 80058e4:	d103      	bne.n	80058ee <sbrk_aligned+0x26>
 80058e6:	f04f 34ff 	mov.w	r4, #4294967295
 80058ea:	4620      	mov	r0, r4
 80058ec:	bd70      	pop	{r4, r5, r6, pc}
 80058ee:	1cc4      	adds	r4, r0, #3
 80058f0:	f024 0403 	bic.w	r4, r4, #3
 80058f4:	42a0      	cmp	r0, r4
 80058f6:	d0f8      	beq.n	80058ea <sbrk_aligned+0x22>
 80058f8:	1a21      	subs	r1, r4, r0
 80058fa:	4628      	mov	r0, r5
 80058fc:	f000 fe5c 	bl	80065b8 <_sbrk_r>
 8005900:	3001      	adds	r0, #1
 8005902:	d1f2      	bne.n	80058ea <sbrk_aligned+0x22>
 8005904:	e7ef      	b.n	80058e6 <sbrk_aligned+0x1e>
 8005906:	bf00      	nop
 8005908:	20000558 	.word	0x20000558

0800590c <_malloc_r>:
 800590c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005910:	1ccd      	adds	r5, r1, #3
 8005912:	f025 0503 	bic.w	r5, r5, #3
 8005916:	3508      	adds	r5, #8
 8005918:	2d0c      	cmp	r5, #12
 800591a:	bf38      	it	cc
 800591c:	250c      	movcc	r5, #12
 800591e:	2d00      	cmp	r5, #0
 8005920:	4606      	mov	r6, r0
 8005922:	db01      	blt.n	8005928 <_malloc_r+0x1c>
 8005924:	42a9      	cmp	r1, r5
 8005926:	d904      	bls.n	8005932 <_malloc_r+0x26>
 8005928:	230c      	movs	r3, #12
 800592a:	6033      	str	r3, [r6, #0]
 800592c:	2000      	movs	r0, #0
 800592e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a08 <_malloc_r+0xfc>
 8005936:	f000 f869 	bl	8005a0c <__malloc_lock>
 800593a:	f8d8 3000 	ldr.w	r3, [r8]
 800593e:	461c      	mov	r4, r3
 8005940:	bb44      	cbnz	r4, 8005994 <_malloc_r+0x88>
 8005942:	4629      	mov	r1, r5
 8005944:	4630      	mov	r0, r6
 8005946:	f7ff ffbf 	bl	80058c8 <sbrk_aligned>
 800594a:	1c43      	adds	r3, r0, #1
 800594c:	4604      	mov	r4, r0
 800594e:	d158      	bne.n	8005a02 <_malloc_r+0xf6>
 8005950:	f8d8 4000 	ldr.w	r4, [r8]
 8005954:	4627      	mov	r7, r4
 8005956:	2f00      	cmp	r7, #0
 8005958:	d143      	bne.n	80059e2 <_malloc_r+0xd6>
 800595a:	2c00      	cmp	r4, #0
 800595c:	d04b      	beq.n	80059f6 <_malloc_r+0xea>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	4639      	mov	r1, r7
 8005962:	4630      	mov	r0, r6
 8005964:	eb04 0903 	add.w	r9, r4, r3
 8005968:	f000 fe26 	bl	80065b8 <_sbrk_r>
 800596c:	4581      	cmp	r9, r0
 800596e:	d142      	bne.n	80059f6 <_malloc_r+0xea>
 8005970:	6821      	ldr	r1, [r4, #0]
 8005972:	1a6d      	subs	r5, r5, r1
 8005974:	4629      	mov	r1, r5
 8005976:	4630      	mov	r0, r6
 8005978:	f7ff ffa6 	bl	80058c8 <sbrk_aligned>
 800597c:	3001      	adds	r0, #1
 800597e:	d03a      	beq.n	80059f6 <_malloc_r+0xea>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	442b      	add	r3, r5
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	f8d8 3000 	ldr.w	r3, [r8]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	bb62      	cbnz	r2, 80059e8 <_malloc_r+0xdc>
 800598e:	f8c8 7000 	str.w	r7, [r8]
 8005992:	e00f      	b.n	80059b4 <_malloc_r+0xa8>
 8005994:	6822      	ldr	r2, [r4, #0]
 8005996:	1b52      	subs	r2, r2, r5
 8005998:	d420      	bmi.n	80059dc <_malloc_r+0xd0>
 800599a:	2a0b      	cmp	r2, #11
 800599c:	d917      	bls.n	80059ce <_malloc_r+0xc2>
 800599e:	1961      	adds	r1, r4, r5
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	6025      	str	r5, [r4, #0]
 80059a4:	bf18      	it	ne
 80059a6:	6059      	strne	r1, [r3, #4]
 80059a8:	6863      	ldr	r3, [r4, #4]
 80059aa:	bf08      	it	eq
 80059ac:	f8c8 1000 	streq.w	r1, [r8]
 80059b0:	5162      	str	r2, [r4, r5]
 80059b2:	604b      	str	r3, [r1, #4]
 80059b4:	4630      	mov	r0, r6
 80059b6:	f000 f82f 	bl	8005a18 <__malloc_unlock>
 80059ba:	f104 000b 	add.w	r0, r4, #11
 80059be:	1d23      	adds	r3, r4, #4
 80059c0:	f020 0007 	bic.w	r0, r0, #7
 80059c4:	1ac2      	subs	r2, r0, r3
 80059c6:	bf1c      	itt	ne
 80059c8:	1a1b      	subne	r3, r3, r0
 80059ca:	50a3      	strne	r3, [r4, r2]
 80059cc:	e7af      	b.n	800592e <_malloc_r+0x22>
 80059ce:	6862      	ldr	r2, [r4, #4]
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	bf0c      	ite	eq
 80059d4:	f8c8 2000 	streq.w	r2, [r8]
 80059d8:	605a      	strne	r2, [r3, #4]
 80059da:	e7eb      	b.n	80059b4 <_malloc_r+0xa8>
 80059dc:	4623      	mov	r3, r4
 80059de:	6864      	ldr	r4, [r4, #4]
 80059e0:	e7ae      	b.n	8005940 <_malloc_r+0x34>
 80059e2:	463c      	mov	r4, r7
 80059e4:	687f      	ldr	r7, [r7, #4]
 80059e6:	e7b6      	b.n	8005956 <_malloc_r+0x4a>
 80059e8:	461a      	mov	r2, r3
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	d1fb      	bne.n	80059e8 <_malloc_r+0xdc>
 80059f0:	2300      	movs	r3, #0
 80059f2:	6053      	str	r3, [r2, #4]
 80059f4:	e7de      	b.n	80059b4 <_malloc_r+0xa8>
 80059f6:	230c      	movs	r3, #12
 80059f8:	6033      	str	r3, [r6, #0]
 80059fa:	4630      	mov	r0, r6
 80059fc:	f000 f80c 	bl	8005a18 <__malloc_unlock>
 8005a00:	e794      	b.n	800592c <_malloc_r+0x20>
 8005a02:	6005      	str	r5, [r0, #0]
 8005a04:	e7d6      	b.n	80059b4 <_malloc_r+0xa8>
 8005a06:	bf00      	nop
 8005a08:	2000055c 	.word	0x2000055c

08005a0c <__malloc_lock>:
 8005a0c:	4801      	ldr	r0, [pc, #4]	@ (8005a14 <__malloc_lock+0x8>)
 8005a0e:	f000 be20 	b.w	8006652 <__retarget_lock_acquire_recursive>
 8005a12:	bf00      	nop
 8005a14:	200006a0 	.word	0x200006a0

08005a18 <__malloc_unlock>:
 8005a18:	4801      	ldr	r0, [pc, #4]	@ (8005a20 <__malloc_unlock+0x8>)
 8005a1a:	f000 be1b 	b.w	8006654 <__retarget_lock_release_recursive>
 8005a1e:	bf00      	nop
 8005a20:	200006a0 	.word	0x200006a0

08005a24 <__cvt>:
 8005a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a28:	ec57 6b10 	vmov	r6, r7, d0
 8005a2c:	2f00      	cmp	r7, #0
 8005a2e:	460c      	mov	r4, r1
 8005a30:	4619      	mov	r1, r3
 8005a32:	463b      	mov	r3, r7
 8005a34:	bfbb      	ittet	lt
 8005a36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005a3a:	461f      	movlt	r7, r3
 8005a3c:	2300      	movge	r3, #0
 8005a3e:	232d      	movlt	r3, #45	@ 0x2d
 8005a40:	700b      	strb	r3, [r1, #0]
 8005a42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a48:	4691      	mov	r9, r2
 8005a4a:	f023 0820 	bic.w	r8, r3, #32
 8005a4e:	bfbc      	itt	lt
 8005a50:	4632      	movlt	r2, r6
 8005a52:	4616      	movlt	r6, r2
 8005a54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a58:	d005      	beq.n	8005a66 <__cvt+0x42>
 8005a5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a5e:	d100      	bne.n	8005a62 <__cvt+0x3e>
 8005a60:	3401      	adds	r4, #1
 8005a62:	2102      	movs	r1, #2
 8005a64:	e000      	b.n	8005a68 <__cvt+0x44>
 8005a66:	2103      	movs	r1, #3
 8005a68:	ab03      	add	r3, sp, #12
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	ab02      	add	r3, sp, #8
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	ec47 6b10 	vmov	d0, r6, r7
 8005a74:	4653      	mov	r3, sl
 8005a76:	4622      	mov	r2, r4
 8005a78:	f000 fe76 	bl	8006768 <_dtoa_r>
 8005a7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a80:	4605      	mov	r5, r0
 8005a82:	d119      	bne.n	8005ab8 <__cvt+0x94>
 8005a84:	f019 0f01 	tst.w	r9, #1
 8005a88:	d00e      	beq.n	8005aa8 <__cvt+0x84>
 8005a8a:	eb00 0904 	add.w	r9, r0, r4
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2300      	movs	r3, #0
 8005a92:	4630      	mov	r0, r6
 8005a94:	4639      	mov	r1, r7
 8005a96:	f7fb f81f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a9a:	b108      	cbz	r0, 8005aa0 <__cvt+0x7c>
 8005a9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005aa0:	2230      	movs	r2, #48	@ 0x30
 8005aa2:	9b03      	ldr	r3, [sp, #12]
 8005aa4:	454b      	cmp	r3, r9
 8005aa6:	d31e      	bcc.n	8005ae6 <__cvt+0xc2>
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005aac:	1b5b      	subs	r3, r3, r5
 8005aae:	4628      	mov	r0, r5
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	b004      	add	sp, #16
 8005ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005abc:	eb00 0904 	add.w	r9, r0, r4
 8005ac0:	d1e5      	bne.n	8005a8e <__cvt+0x6a>
 8005ac2:	7803      	ldrb	r3, [r0, #0]
 8005ac4:	2b30      	cmp	r3, #48	@ 0x30
 8005ac6:	d10a      	bne.n	8005ade <__cvt+0xba>
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2300      	movs	r3, #0
 8005acc:	4630      	mov	r0, r6
 8005ace:	4639      	mov	r1, r7
 8005ad0:	f7fb f802 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ad4:	b918      	cbnz	r0, 8005ade <__cvt+0xba>
 8005ad6:	f1c4 0401 	rsb	r4, r4, #1
 8005ada:	f8ca 4000 	str.w	r4, [sl]
 8005ade:	f8da 3000 	ldr.w	r3, [sl]
 8005ae2:	4499      	add	r9, r3
 8005ae4:	e7d3      	b.n	8005a8e <__cvt+0x6a>
 8005ae6:	1c59      	adds	r1, r3, #1
 8005ae8:	9103      	str	r1, [sp, #12]
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	e7d9      	b.n	8005aa2 <__cvt+0x7e>

08005aee <__exponent>:
 8005aee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005af0:	2900      	cmp	r1, #0
 8005af2:	bfba      	itte	lt
 8005af4:	4249      	neglt	r1, r1
 8005af6:	232d      	movlt	r3, #45	@ 0x2d
 8005af8:	232b      	movge	r3, #43	@ 0x2b
 8005afa:	2909      	cmp	r1, #9
 8005afc:	7002      	strb	r2, [r0, #0]
 8005afe:	7043      	strb	r3, [r0, #1]
 8005b00:	dd29      	ble.n	8005b56 <__exponent+0x68>
 8005b02:	f10d 0307 	add.w	r3, sp, #7
 8005b06:	461d      	mov	r5, r3
 8005b08:	270a      	movs	r7, #10
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b10:	fb07 1416 	mls	r4, r7, r6, r1
 8005b14:	3430      	adds	r4, #48	@ 0x30
 8005b16:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	2c63      	cmp	r4, #99	@ 0x63
 8005b1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b22:	4631      	mov	r1, r6
 8005b24:	dcf1      	bgt.n	8005b0a <__exponent+0x1c>
 8005b26:	3130      	adds	r1, #48	@ 0x30
 8005b28:	1e94      	subs	r4, r2, #2
 8005b2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b2e:	1c41      	adds	r1, r0, #1
 8005b30:	4623      	mov	r3, r4
 8005b32:	42ab      	cmp	r3, r5
 8005b34:	d30a      	bcc.n	8005b4c <__exponent+0x5e>
 8005b36:	f10d 0309 	add.w	r3, sp, #9
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	42ac      	cmp	r4, r5
 8005b3e:	bf88      	it	hi
 8005b40:	2300      	movhi	r3, #0
 8005b42:	3302      	adds	r3, #2
 8005b44:	4403      	add	r3, r0
 8005b46:	1a18      	subs	r0, r3, r0
 8005b48:	b003      	add	sp, #12
 8005b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b50:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b54:	e7ed      	b.n	8005b32 <__exponent+0x44>
 8005b56:	2330      	movs	r3, #48	@ 0x30
 8005b58:	3130      	adds	r1, #48	@ 0x30
 8005b5a:	7083      	strb	r3, [r0, #2]
 8005b5c:	70c1      	strb	r1, [r0, #3]
 8005b5e:	1d03      	adds	r3, r0, #4
 8005b60:	e7f1      	b.n	8005b46 <__exponent+0x58>
	...

08005b64 <_printf_float>:
 8005b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b68:	b08d      	sub	sp, #52	@ 0x34
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005b70:	4616      	mov	r6, r2
 8005b72:	461f      	mov	r7, r3
 8005b74:	4605      	mov	r5, r0
 8005b76:	f000 fce7 	bl	8006548 <_localeconv_r>
 8005b7a:	6803      	ldr	r3, [r0, #0]
 8005b7c:	9304      	str	r3, [sp, #16]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fa fb7e 	bl	8000280 <strlen>
 8005b84:	2300      	movs	r3, #0
 8005b86:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b88:	f8d8 3000 	ldr.w	r3, [r8]
 8005b8c:	9005      	str	r0, [sp, #20]
 8005b8e:	3307      	adds	r3, #7
 8005b90:	f023 0307 	bic.w	r3, r3, #7
 8005b94:	f103 0208 	add.w	r2, r3, #8
 8005b98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b9c:	f8d4 b000 	ldr.w	fp, [r4]
 8005ba0:	f8c8 2000 	str.w	r2, [r8]
 8005ba4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ba8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005bac:	9307      	str	r3, [sp, #28]
 8005bae:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bb2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bba:	4b9c      	ldr	r3, [pc, #624]	@ (8005e2c <_printf_float+0x2c8>)
 8005bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc0:	f7fa ffbc 	bl	8000b3c <__aeabi_dcmpun>
 8005bc4:	bb70      	cbnz	r0, 8005c24 <_printf_float+0xc0>
 8005bc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bca:	4b98      	ldr	r3, [pc, #608]	@ (8005e2c <_printf_float+0x2c8>)
 8005bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd0:	f7fa ff96 	bl	8000b00 <__aeabi_dcmple>
 8005bd4:	bb30      	cbnz	r0, 8005c24 <_printf_float+0xc0>
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4640      	mov	r0, r8
 8005bdc:	4649      	mov	r1, r9
 8005bde:	f7fa ff85 	bl	8000aec <__aeabi_dcmplt>
 8005be2:	b110      	cbz	r0, 8005bea <_printf_float+0x86>
 8005be4:	232d      	movs	r3, #45	@ 0x2d
 8005be6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bea:	4a91      	ldr	r2, [pc, #580]	@ (8005e30 <_printf_float+0x2cc>)
 8005bec:	4b91      	ldr	r3, [pc, #580]	@ (8005e34 <_printf_float+0x2d0>)
 8005bee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005bf2:	bf94      	ite	ls
 8005bf4:	4690      	movls	r8, r2
 8005bf6:	4698      	movhi	r8, r3
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	6123      	str	r3, [r4, #16]
 8005bfc:	f02b 0304 	bic.w	r3, fp, #4
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	f04f 0900 	mov.w	r9, #0
 8005c06:	9700      	str	r7, [sp, #0]
 8005c08:	4633      	mov	r3, r6
 8005c0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 f9d2 	bl	8005fb8 <_printf_common>
 8005c14:	3001      	adds	r0, #1
 8005c16:	f040 808d 	bne.w	8005d34 <_printf_float+0x1d0>
 8005c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1e:	b00d      	add	sp, #52	@ 0x34
 8005c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c24:	4642      	mov	r2, r8
 8005c26:	464b      	mov	r3, r9
 8005c28:	4640      	mov	r0, r8
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	f7fa ff86 	bl	8000b3c <__aeabi_dcmpun>
 8005c30:	b140      	cbz	r0, 8005c44 <_printf_float+0xe0>
 8005c32:	464b      	mov	r3, r9
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bfbc      	itt	lt
 8005c38:	232d      	movlt	r3, #45	@ 0x2d
 8005c3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c3e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e38 <_printf_float+0x2d4>)
 8005c40:	4b7e      	ldr	r3, [pc, #504]	@ (8005e3c <_printf_float+0x2d8>)
 8005c42:	e7d4      	b.n	8005bee <_printf_float+0x8a>
 8005c44:	6863      	ldr	r3, [r4, #4]
 8005c46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c4a:	9206      	str	r2, [sp, #24]
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	d13b      	bne.n	8005cc8 <_printf_float+0x164>
 8005c50:	2306      	movs	r3, #6
 8005c52:	6063      	str	r3, [r4, #4]
 8005c54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005c58:	2300      	movs	r3, #0
 8005c5a:	6022      	str	r2, [r4, #0]
 8005c5c:	9303      	str	r3, [sp, #12]
 8005c5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005c60:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005c64:	ab09      	add	r3, sp, #36	@ 0x24
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	6861      	ldr	r1, [r4, #4]
 8005c6a:	ec49 8b10 	vmov	d0, r8, r9
 8005c6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005c72:	4628      	mov	r0, r5
 8005c74:	f7ff fed6 	bl	8005a24 <__cvt>
 8005c78:	9b06      	ldr	r3, [sp, #24]
 8005c7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c7c:	2b47      	cmp	r3, #71	@ 0x47
 8005c7e:	4680      	mov	r8, r0
 8005c80:	d129      	bne.n	8005cd6 <_printf_float+0x172>
 8005c82:	1cc8      	adds	r0, r1, #3
 8005c84:	db02      	blt.n	8005c8c <_printf_float+0x128>
 8005c86:	6863      	ldr	r3, [r4, #4]
 8005c88:	4299      	cmp	r1, r3
 8005c8a:	dd41      	ble.n	8005d10 <_printf_float+0x1ac>
 8005c8c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c90:	fa5f fa8a 	uxtb.w	sl, sl
 8005c94:	3901      	subs	r1, #1
 8005c96:	4652      	mov	r2, sl
 8005c98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c9e:	f7ff ff26 	bl	8005aee <__exponent>
 8005ca2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ca4:	1813      	adds	r3, r2, r0
 8005ca6:	2a01      	cmp	r2, #1
 8005ca8:	4681      	mov	r9, r0
 8005caa:	6123      	str	r3, [r4, #16]
 8005cac:	dc02      	bgt.n	8005cb4 <_printf_float+0x150>
 8005cae:	6822      	ldr	r2, [r4, #0]
 8005cb0:	07d2      	lsls	r2, r2, #31
 8005cb2:	d501      	bpl.n	8005cb8 <_printf_float+0x154>
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	6123      	str	r3, [r4, #16]
 8005cb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0a2      	beq.n	8005c06 <_printf_float+0xa2>
 8005cc0:	232d      	movs	r3, #45	@ 0x2d
 8005cc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cc6:	e79e      	b.n	8005c06 <_printf_float+0xa2>
 8005cc8:	9a06      	ldr	r2, [sp, #24]
 8005cca:	2a47      	cmp	r2, #71	@ 0x47
 8005ccc:	d1c2      	bne.n	8005c54 <_printf_float+0xf0>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1c0      	bne.n	8005c54 <_printf_float+0xf0>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e7bd      	b.n	8005c52 <_printf_float+0xee>
 8005cd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cda:	d9db      	bls.n	8005c94 <_printf_float+0x130>
 8005cdc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ce0:	d118      	bne.n	8005d14 <_printf_float+0x1b0>
 8005ce2:	2900      	cmp	r1, #0
 8005ce4:	6863      	ldr	r3, [r4, #4]
 8005ce6:	dd0b      	ble.n	8005d00 <_printf_float+0x19c>
 8005ce8:	6121      	str	r1, [r4, #16]
 8005cea:	b913      	cbnz	r3, 8005cf2 <_printf_float+0x18e>
 8005cec:	6822      	ldr	r2, [r4, #0]
 8005cee:	07d0      	lsls	r0, r2, #31
 8005cf0:	d502      	bpl.n	8005cf8 <_printf_float+0x194>
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	440b      	add	r3, r1
 8005cf6:	6123      	str	r3, [r4, #16]
 8005cf8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005cfa:	f04f 0900 	mov.w	r9, #0
 8005cfe:	e7db      	b.n	8005cb8 <_printf_float+0x154>
 8005d00:	b913      	cbnz	r3, 8005d08 <_printf_float+0x1a4>
 8005d02:	6822      	ldr	r2, [r4, #0]
 8005d04:	07d2      	lsls	r2, r2, #31
 8005d06:	d501      	bpl.n	8005d0c <_printf_float+0x1a8>
 8005d08:	3302      	adds	r3, #2
 8005d0a:	e7f4      	b.n	8005cf6 <_printf_float+0x192>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e7f2      	b.n	8005cf6 <_printf_float+0x192>
 8005d10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d16:	4299      	cmp	r1, r3
 8005d18:	db05      	blt.n	8005d26 <_printf_float+0x1c2>
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	6121      	str	r1, [r4, #16]
 8005d1e:	07d8      	lsls	r0, r3, #31
 8005d20:	d5ea      	bpl.n	8005cf8 <_printf_float+0x194>
 8005d22:	1c4b      	adds	r3, r1, #1
 8005d24:	e7e7      	b.n	8005cf6 <_printf_float+0x192>
 8005d26:	2900      	cmp	r1, #0
 8005d28:	bfd4      	ite	le
 8005d2a:	f1c1 0202 	rsble	r2, r1, #2
 8005d2e:	2201      	movgt	r2, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	e7e0      	b.n	8005cf6 <_printf_float+0x192>
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	055a      	lsls	r2, r3, #21
 8005d38:	d407      	bmi.n	8005d4a <_printf_float+0x1e6>
 8005d3a:	6923      	ldr	r3, [r4, #16]
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	d12b      	bne.n	8005da0 <_printf_float+0x23c>
 8005d48:	e767      	b.n	8005c1a <_printf_float+0xb6>
 8005d4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d4e:	f240 80dd 	bls.w	8005f0c <_printf_float+0x3a8>
 8005d52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d56:	2200      	movs	r2, #0
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f7fa febd 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d033      	beq.n	8005dca <_printf_float+0x266>
 8005d62:	4a37      	ldr	r2, [pc, #220]	@ (8005e40 <_printf_float+0x2dc>)
 8005d64:	2301      	movs	r3, #1
 8005d66:	4631      	mov	r1, r6
 8005d68:	4628      	mov	r0, r5
 8005d6a:	47b8      	blx	r7
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	f43f af54 	beq.w	8005c1a <_printf_float+0xb6>
 8005d72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005d76:	4543      	cmp	r3, r8
 8005d78:	db02      	blt.n	8005d80 <_printf_float+0x21c>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	07d8      	lsls	r0, r3, #31
 8005d7e:	d50f      	bpl.n	8005da0 <_printf_float+0x23c>
 8005d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d84:	4631      	mov	r1, r6
 8005d86:	4628      	mov	r0, r5
 8005d88:	47b8      	blx	r7
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	f43f af45 	beq.w	8005c1a <_printf_float+0xb6>
 8005d90:	f04f 0900 	mov.w	r9, #0
 8005d94:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d98:	f104 0a1a 	add.w	sl, r4, #26
 8005d9c:	45c8      	cmp	r8, r9
 8005d9e:	dc09      	bgt.n	8005db4 <_printf_float+0x250>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	079b      	lsls	r3, r3, #30
 8005da4:	f100 8103 	bmi.w	8005fae <_printf_float+0x44a>
 8005da8:	68e0      	ldr	r0, [r4, #12]
 8005daa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dac:	4298      	cmp	r0, r3
 8005dae:	bfb8      	it	lt
 8005db0:	4618      	movlt	r0, r3
 8005db2:	e734      	b.n	8005c1e <_printf_float+0xba>
 8005db4:	2301      	movs	r3, #1
 8005db6:	4652      	mov	r2, sl
 8005db8:	4631      	mov	r1, r6
 8005dba:	4628      	mov	r0, r5
 8005dbc:	47b8      	blx	r7
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	f43f af2b 	beq.w	8005c1a <_printf_float+0xb6>
 8005dc4:	f109 0901 	add.w	r9, r9, #1
 8005dc8:	e7e8      	b.n	8005d9c <_printf_float+0x238>
 8005dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	dc39      	bgt.n	8005e44 <_printf_float+0x2e0>
 8005dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e40 <_printf_float+0x2dc>)
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	47b8      	blx	r7
 8005dda:	3001      	adds	r0, #1
 8005ddc:	f43f af1d 	beq.w	8005c1a <_printf_float+0xb6>
 8005de0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005de4:	ea59 0303 	orrs.w	r3, r9, r3
 8005de8:	d102      	bne.n	8005df0 <_printf_float+0x28c>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	07d9      	lsls	r1, r3, #31
 8005dee:	d5d7      	bpl.n	8005da0 <_printf_float+0x23c>
 8005df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005df4:	4631      	mov	r1, r6
 8005df6:	4628      	mov	r0, r5
 8005df8:	47b8      	blx	r7
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	f43f af0d 	beq.w	8005c1a <_printf_float+0xb6>
 8005e00:	f04f 0a00 	mov.w	sl, #0
 8005e04:	f104 0b1a 	add.w	fp, r4, #26
 8005e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0a:	425b      	negs	r3, r3
 8005e0c:	4553      	cmp	r3, sl
 8005e0e:	dc01      	bgt.n	8005e14 <_printf_float+0x2b0>
 8005e10:	464b      	mov	r3, r9
 8005e12:	e793      	b.n	8005d3c <_printf_float+0x1d8>
 8005e14:	2301      	movs	r3, #1
 8005e16:	465a      	mov	r2, fp
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f43f aefb 	beq.w	8005c1a <_printf_float+0xb6>
 8005e24:	f10a 0a01 	add.w	sl, sl, #1
 8005e28:	e7ee      	b.n	8005e08 <_printf_float+0x2a4>
 8005e2a:	bf00      	nop
 8005e2c:	7fefffff 	.word	0x7fefffff
 8005e30:	080085d8 	.word	0x080085d8
 8005e34:	080085dc 	.word	0x080085dc
 8005e38:	080085e0 	.word	0x080085e0
 8005e3c:	080085e4 	.word	0x080085e4
 8005e40:	080085e8 	.word	0x080085e8
 8005e44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e4a:	4553      	cmp	r3, sl
 8005e4c:	bfa8      	it	ge
 8005e4e:	4653      	movge	r3, sl
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	4699      	mov	r9, r3
 8005e54:	dc36      	bgt.n	8005ec4 <_printf_float+0x360>
 8005e56:	f04f 0b00 	mov.w	fp, #0
 8005e5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e5e:	f104 021a 	add.w	r2, r4, #26
 8005e62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e64:	9306      	str	r3, [sp, #24]
 8005e66:	eba3 0309 	sub.w	r3, r3, r9
 8005e6a:	455b      	cmp	r3, fp
 8005e6c:	dc31      	bgt.n	8005ed2 <_printf_float+0x36e>
 8005e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e70:	459a      	cmp	sl, r3
 8005e72:	dc3a      	bgt.n	8005eea <_printf_float+0x386>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	07da      	lsls	r2, r3, #31
 8005e78:	d437      	bmi.n	8005eea <_printf_float+0x386>
 8005e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e7c:	ebaa 0903 	sub.w	r9, sl, r3
 8005e80:	9b06      	ldr	r3, [sp, #24]
 8005e82:	ebaa 0303 	sub.w	r3, sl, r3
 8005e86:	4599      	cmp	r9, r3
 8005e88:	bfa8      	it	ge
 8005e8a:	4699      	movge	r9, r3
 8005e8c:	f1b9 0f00 	cmp.w	r9, #0
 8005e90:	dc33      	bgt.n	8005efa <_printf_float+0x396>
 8005e92:	f04f 0800 	mov.w	r8, #0
 8005e96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e9a:	f104 0b1a 	add.w	fp, r4, #26
 8005e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea0:	ebaa 0303 	sub.w	r3, sl, r3
 8005ea4:	eba3 0309 	sub.w	r3, r3, r9
 8005ea8:	4543      	cmp	r3, r8
 8005eaa:	f77f af79 	ble.w	8005da0 <_printf_float+0x23c>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	465a      	mov	r2, fp
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f43f aeae 	beq.w	8005c1a <_printf_float+0xb6>
 8005ebe:	f108 0801 	add.w	r8, r8, #1
 8005ec2:	e7ec      	b.n	8005e9e <_printf_float+0x33a>
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	47b8      	blx	r7
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d1c2      	bne.n	8005e56 <_printf_float+0x2f2>
 8005ed0:	e6a3      	b.n	8005c1a <_printf_float+0xb6>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	9206      	str	r2, [sp, #24]
 8005eda:	47b8      	blx	r7
 8005edc:	3001      	adds	r0, #1
 8005ede:	f43f ae9c 	beq.w	8005c1a <_printf_float+0xb6>
 8005ee2:	9a06      	ldr	r2, [sp, #24]
 8005ee4:	f10b 0b01 	add.w	fp, fp, #1
 8005ee8:	e7bb      	b.n	8005e62 <_printf_float+0x2fe>
 8005eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eee:	4631      	mov	r1, r6
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	47b8      	blx	r7
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d1c0      	bne.n	8005e7a <_printf_float+0x316>
 8005ef8:	e68f      	b.n	8005c1a <_printf_float+0xb6>
 8005efa:	9a06      	ldr	r2, [sp, #24]
 8005efc:	464b      	mov	r3, r9
 8005efe:	4442      	add	r2, r8
 8005f00:	4631      	mov	r1, r6
 8005f02:	4628      	mov	r0, r5
 8005f04:	47b8      	blx	r7
 8005f06:	3001      	adds	r0, #1
 8005f08:	d1c3      	bne.n	8005e92 <_printf_float+0x32e>
 8005f0a:	e686      	b.n	8005c1a <_printf_float+0xb6>
 8005f0c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f10:	f1ba 0f01 	cmp.w	sl, #1
 8005f14:	dc01      	bgt.n	8005f1a <_printf_float+0x3b6>
 8005f16:	07db      	lsls	r3, r3, #31
 8005f18:	d536      	bpl.n	8005f88 <_printf_float+0x424>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	4631      	mov	r1, r6
 8005f20:	4628      	mov	r0, r5
 8005f22:	47b8      	blx	r7
 8005f24:	3001      	adds	r0, #1
 8005f26:	f43f ae78 	beq.w	8005c1a <_printf_float+0xb6>
 8005f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	f43f ae70 	beq.w	8005c1a <_printf_float+0xb6>
 8005f3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2300      	movs	r3, #0
 8005f42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f46:	f7fa fdc7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f4a:	b9c0      	cbnz	r0, 8005f7e <_printf_float+0x41a>
 8005f4c:	4653      	mov	r3, sl
 8005f4e:	f108 0201 	add.w	r2, r8, #1
 8005f52:	4631      	mov	r1, r6
 8005f54:	4628      	mov	r0, r5
 8005f56:	47b8      	blx	r7
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d10c      	bne.n	8005f76 <_printf_float+0x412>
 8005f5c:	e65d      	b.n	8005c1a <_printf_float+0xb6>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	465a      	mov	r2, fp
 8005f62:	4631      	mov	r1, r6
 8005f64:	4628      	mov	r0, r5
 8005f66:	47b8      	blx	r7
 8005f68:	3001      	adds	r0, #1
 8005f6a:	f43f ae56 	beq.w	8005c1a <_printf_float+0xb6>
 8005f6e:	f108 0801 	add.w	r8, r8, #1
 8005f72:	45d0      	cmp	r8, sl
 8005f74:	dbf3      	blt.n	8005f5e <_printf_float+0x3fa>
 8005f76:	464b      	mov	r3, r9
 8005f78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f7c:	e6df      	b.n	8005d3e <_printf_float+0x1da>
 8005f7e:	f04f 0800 	mov.w	r8, #0
 8005f82:	f104 0b1a 	add.w	fp, r4, #26
 8005f86:	e7f4      	b.n	8005f72 <_printf_float+0x40e>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	4642      	mov	r2, r8
 8005f8c:	e7e1      	b.n	8005f52 <_printf_float+0x3ee>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	464a      	mov	r2, r9
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b8      	blx	r7
 8005f98:	3001      	adds	r0, #1
 8005f9a:	f43f ae3e 	beq.w	8005c1a <_printf_float+0xb6>
 8005f9e:	f108 0801 	add.w	r8, r8, #1
 8005fa2:	68e3      	ldr	r3, [r4, #12]
 8005fa4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005fa6:	1a5b      	subs	r3, r3, r1
 8005fa8:	4543      	cmp	r3, r8
 8005faa:	dcf0      	bgt.n	8005f8e <_printf_float+0x42a>
 8005fac:	e6fc      	b.n	8005da8 <_printf_float+0x244>
 8005fae:	f04f 0800 	mov.w	r8, #0
 8005fb2:	f104 0919 	add.w	r9, r4, #25
 8005fb6:	e7f4      	b.n	8005fa2 <_printf_float+0x43e>

08005fb8 <_printf_common>:
 8005fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	4698      	mov	r8, r3
 8005fc0:	688a      	ldr	r2, [r1, #8]
 8005fc2:	690b      	ldr	r3, [r1, #16]
 8005fc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	bfb8      	it	lt
 8005fcc:	4613      	movlt	r3, r2
 8005fce:	6033      	str	r3, [r6, #0]
 8005fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	b10a      	cbz	r2, 8005fde <_printf_common+0x26>
 8005fda:	3301      	adds	r3, #1
 8005fdc:	6033      	str	r3, [r6, #0]
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	0699      	lsls	r1, r3, #26
 8005fe2:	bf42      	ittt	mi
 8005fe4:	6833      	ldrmi	r3, [r6, #0]
 8005fe6:	3302      	addmi	r3, #2
 8005fe8:	6033      	strmi	r3, [r6, #0]
 8005fea:	6825      	ldr	r5, [r4, #0]
 8005fec:	f015 0506 	ands.w	r5, r5, #6
 8005ff0:	d106      	bne.n	8006000 <_printf_common+0x48>
 8005ff2:	f104 0a19 	add.w	sl, r4, #25
 8005ff6:	68e3      	ldr	r3, [r4, #12]
 8005ff8:	6832      	ldr	r2, [r6, #0]
 8005ffa:	1a9b      	subs	r3, r3, r2
 8005ffc:	42ab      	cmp	r3, r5
 8005ffe:	dc26      	bgt.n	800604e <_printf_common+0x96>
 8006000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006004:	6822      	ldr	r2, [r4, #0]
 8006006:	3b00      	subs	r3, #0
 8006008:	bf18      	it	ne
 800600a:	2301      	movne	r3, #1
 800600c:	0692      	lsls	r2, r2, #26
 800600e:	d42b      	bmi.n	8006068 <_printf_common+0xb0>
 8006010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006014:	4641      	mov	r1, r8
 8006016:	4638      	mov	r0, r7
 8006018:	47c8      	blx	r9
 800601a:	3001      	adds	r0, #1
 800601c:	d01e      	beq.n	800605c <_printf_common+0xa4>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	6922      	ldr	r2, [r4, #16]
 8006022:	f003 0306 	and.w	r3, r3, #6
 8006026:	2b04      	cmp	r3, #4
 8006028:	bf02      	ittt	eq
 800602a:	68e5      	ldreq	r5, [r4, #12]
 800602c:	6833      	ldreq	r3, [r6, #0]
 800602e:	1aed      	subeq	r5, r5, r3
 8006030:	68a3      	ldr	r3, [r4, #8]
 8006032:	bf0c      	ite	eq
 8006034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006038:	2500      	movne	r5, #0
 800603a:	4293      	cmp	r3, r2
 800603c:	bfc4      	itt	gt
 800603e:	1a9b      	subgt	r3, r3, r2
 8006040:	18ed      	addgt	r5, r5, r3
 8006042:	2600      	movs	r6, #0
 8006044:	341a      	adds	r4, #26
 8006046:	42b5      	cmp	r5, r6
 8006048:	d11a      	bne.n	8006080 <_printf_common+0xc8>
 800604a:	2000      	movs	r0, #0
 800604c:	e008      	b.n	8006060 <_printf_common+0xa8>
 800604e:	2301      	movs	r3, #1
 8006050:	4652      	mov	r2, sl
 8006052:	4641      	mov	r1, r8
 8006054:	4638      	mov	r0, r7
 8006056:	47c8      	blx	r9
 8006058:	3001      	adds	r0, #1
 800605a:	d103      	bne.n	8006064 <_printf_common+0xac>
 800605c:	f04f 30ff 	mov.w	r0, #4294967295
 8006060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006064:	3501      	adds	r5, #1
 8006066:	e7c6      	b.n	8005ff6 <_printf_common+0x3e>
 8006068:	18e1      	adds	r1, r4, r3
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	2030      	movs	r0, #48	@ 0x30
 800606e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006072:	4422      	add	r2, r4
 8006074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800607c:	3302      	adds	r3, #2
 800607e:	e7c7      	b.n	8006010 <_printf_common+0x58>
 8006080:	2301      	movs	r3, #1
 8006082:	4622      	mov	r2, r4
 8006084:	4641      	mov	r1, r8
 8006086:	4638      	mov	r0, r7
 8006088:	47c8      	blx	r9
 800608a:	3001      	adds	r0, #1
 800608c:	d0e6      	beq.n	800605c <_printf_common+0xa4>
 800608e:	3601      	adds	r6, #1
 8006090:	e7d9      	b.n	8006046 <_printf_common+0x8e>
	...

08006094 <_printf_i>:
 8006094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	7e0f      	ldrb	r7, [r1, #24]
 800609a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800609c:	2f78      	cmp	r7, #120	@ 0x78
 800609e:	4691      	mov	r9, r2
 80060a0:	4680      	mov	r8, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	469a      	mov	sl, r3
 80060a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060aa:	d807      	bhi.n	80060bc <_printf_i+0x28>
 80060ac:	2f62      	cmp	r7, #98	@ 0x62
 80060ae:	d80a      	bhi.n	80060c6 <_printf_i+0x32>
 80060b0:	2f00      	cmp	r7, #0
 80060b2:	f000 80d2 	beq.w	800625a <_printf_i+0x1c6>
 80060b6:	2f58      	cmp	r7, #88	@ 0x58
 80060b8:	f000 80b9 	beq.w	800622e <_printf_i+0x19a>
 80060bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060c4:	e03a      	b.n	800613c <_printf_i+0xa8>
 80060c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060ca:	2b15      	cmp	r3, #21
 80060cc:	d8f6      	bhi.n	80060bc <_printf_i+0x28>
 80060ce:	a101      	add	r1, pc, #4	@ (adr r1, 80060d4 <_printf_i+0x40>)
 80060d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	08006141 	.word	0x08006141
 80060dc:	080060bd 	.word	0x080060bd
 80060e0:	080060bd 	.word	0x080060bd
 80060e4:	080060bd 	.word	0x080060bd
 80060e8:	080060bd 	.word	0x080060bd
 80060ec:	08006141 	.word	0x08006141
 80060f0:	080060bd 	.word	0x080060bd
 80060f4:	080060bd 	.word	0x080060bd
 80060f8:	080060bd 	.word	0x080060bd
 80060fc:	080060bd 	.word	0x080060bd
 8006100:	08006241 	.word	0x08006241
 8006104:	0800616b 	.word	0x0800616b
 8006108:	080061fb 	.word	0x080061fb
 800610c:	080060bd 	.word	0x080060bd
 8006110:	080060bd 	.word	0x080060bd
 8006114:	08006263 	.word	0x08006263
 8006118:	080060bd 	.word	0x080060bd
 800611c:	0800616b 	.word	0x0800616b
 8006120:	080060bd 	.word	0x080060bd
 8006124:	080060bd 	.word	0x080060bd
 8006128:	08006203 	.word	0x08006203
 800612c:	6833      	ldr	r3, [r6, #0]
 800612e:	1d1a      	adds	r2, r3, #4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6032      	str	r2, [r6, #0]
 8006134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800613c:	2301      	movs	r3, #1
 800613e:	e09d      	b.n	800627c <_printf_i+0x1e8>
 8006140:	6833      	ldr	r3, [r6, #0]
 8006142:	6820      	ldr	r0, [r4, #0]
 8006144:	1d19      	adds	r1, r3, #4
 8006146:	6031      	str	r1, [r6, #0]
 8006148:	0606      	lsls	r6, r0, #24
 800614a:	d501      	bpl.n	8006150 <_printf_i+0xbc>
 800614c:	681d      	ldr	r5, [r3, #0]
 800614e:	e003      	b.n	8006158 <_printf_i+0xc4>
 8006150:	0645      	lsls	r5, r0, #25
 8006152:	d5fb      	bpl.n	800614c <_printf_i+0xb8>
 8006154:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006158:	2d00      	cmp	r5, #0
 800615a:	da03      	bge.n	8006164 <_printf_i+0xd0>
 800615c:	232d      	movs	r3, #45	@ 0x2d
 800615e:	426d      	negs	r5, r5
 8006160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006164:	4859      	ldr	r0, [pc, #356]	@ (80062cc <_printf_i+0x238>)
 8006166:	230a      	movs	r3, #10
 8006168:	e011      	b.n	800618e <_printf_i+0xfa>
 800616a:	6821      	ldr	r1, [r4, #0]
 800616c:	6833      	ldr	r3, [r6, #0]
 800616e:	0608      	lsls	r0, r1, #24
 8006170:	f853 5b04 	ldr.w	r5, [r3], #4
 8006174:	d402      	bmi.n	800617c <_printf_i+0xe8>
 8006176:	0649      	lsls	r1, r1, #25
 8006178:	bf48      	it	mi
 800617a:	b2ad      	uxthmi	r5, r5
 800617c:	2f6f      	cmp	r7, #111	@ 0x6f
 800617e:	4853      	ldr	r0, [pc, #332]	@ (80062cc <_printf_i+0x238>)
 8006180:	6033      	str	r3, [r6, #0]
 8006182:	bf14      	ite	ne
 8006184:	230a      	movne	r3, #10
 8006186:	2308      	moveq	r3, #8
 8006188:	2100      	movs	r1, #0
 800618a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800618e:	6866      	ldr	r6, [r4, #4]
 8006190:	60a6      	str	r6, [r4, #8]
 8006192:	2e00      	cmp	r6, #0
 8006194:	bfa2      	ittt	ge
 8006196:	6821      	ldrge	r1, [r4, #0]
 8006198:	f021 0104 	bicge.w	r1, r1, #4
 800619c:	6021      	strge	r1, [r4, #0]
 800619e:	b90d      	cbnz	r5, 80061a4 <_printf_i+0x110>
 80061a0:	2e00      	cmp	r6, #0
 80061a2:	d04b      	beq.n	800623c <_printf_i+0x1a8>
 80061a4:	4616      	mov	r6, r2
 80061a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80061aa:	fb03 5711 	mls	r7, r3, r1, r5
 80061ae:	5dc7      	ldrb	r7, [r0, r7]
 80061b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061b4:	462f      	mov	r7, r5
 80061b6:	42bb      	cmp	r3, r7
 80061b8:	460d      	mov	r5, r1
 80061ba:	d9f4      	bls.n	80061a6 <_printf_i+0x112>
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d10b      	bne.n	80061d8 <_printf_i+0x144>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	07df      	lsls	r7, r3, #31
 80061c4:	d508      	bpl.n	80061d8 <_printf_i+0x144>
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	6861      	ldr	r1, [r4, #4]
 80061ca:	4299      	cmp	r1, r3
 80061cc:	bfde      	ittt	le
 80061ce:	2330      	movle	r3, #48	@ 0x30
 80061d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061d8:	1b92      	subs	r2, r2, r6
 80061da:	6122      	str	r2, [r4, #16]
 80061dc:	f8cd a000 	str.w	sl, [sp]
 80061e0:	464b      	mov	r3, r9
 80061e2:	aa03      	add	r2, sp, #12
 80061e4:	4621      	mov	r1, r4
 80061e6:	4640      	mov	r0, r8
 80061e8:	f7ff fee6 	bl	8005fb8 <_printf_common>
 80061ec:	3001      	adds	r0, #1
 80061ee:	d14a      	bne.n	8006286 <_printf_i+0x1f2>
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	b004      	add	sp, #16
 80061f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	f043 0320 	orr.w	r3, r3, #32
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	4833      	ldr	r0, [pc, #204]	@ (80062d0 <_printf_i+0x23c>)
 8006204:	2778      	movs	r7, #120	@ 0x78
 8006206:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	6831      	ldr	r1, [r6, #0]
 800620e:	061f      	lsls	r7, r3, #24
 8006210:	f851 5b04 	ldr.w	r5, [r1], #4
 8006214:	d402      	bmi.n	800621c <_printf_i+0x188>
 8006216:	065f      	lsls	r7, r3, #25
 8006218:	bf48      	it	mi
 800621a:	b2ad      	uxthmi	r5, r5
 800621c:	6031      	str	r1, [r6, #0]
 800621e:	07d9      	lsls	r1, r3, #31
 8006220:	bf44      	itt	mi
 8006222:	f043 0320 	orrmi.w	r3, r3, #32
 8006226:	6023      	strmi	r3, [r4, #0]
 8006228:	b11d      	cbz	r5, 8006232 <_printf_i+0x19e>
 800622a:	2310      	movs	r3, #16
 800622c:	e7ac      	b.n	8006188 <_printf_i+0xf4>
 800622e:	4827      	ldr	r0, [pc, #156]	@ (80062cc <_printf_i+0x238>)
 8006230:	e7e9      	b.n	8006206 <_printf_i+0x172>
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	f023 0320 	bic.w	r3, r3, #32
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	e7f6      	b.n	800622a <_printf_i+0x196>
 800623c:	4616      	mov	r6, r2
 800623e:	e7bd      	b.n	80061bc <_printf_i+0x128>
 8006240:	6833      	ldr	r3, [r6, #0]
 8006242:	6825      	ldr	r5, [r4, #0]
 8006244:	6961      	ldr	r1, [r4, #20]
 8006246:	1d18      	adds	r0, r3, #4
 8006248:	6030      	str	r0, [r6, #0]
 800624a:	062e      	lsls	r6, r5, #24
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	d501      	bpl.n	8006254 <_printf_i+0x1c0>
 8006250:	6019      	str	r1, [r3, #0]
 8006252:	e002      	b.n	800625a <_printf_i+0x1c6>
 8006254:	0668      	lsls	r0, r5, #25
 8006256:	d5fb      	bpl.n	8006250 <_printf_i+0x1bc>
 8006258:	8019      	strh	r1, [r3, #0]
 800625a:	2300      	movs	r3, #0
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	4616      	mov	r6, r2
 8006260:	e7bc      	b.n	80061dc <_printf_i+0x148>
 8006262:	6833      	ldr	r3, [r6, #0]
 8006264:	1d1a      	adds	r2, r3, #4
 8006266:	6032      	str	r2, [r6, #0]
 8006268:	681e      	ldr	r6, [r3, #0]
 800626a:	6862      	ldr	r2, [r4, #4]
 800626c:	2100      	movs	r1, #0
 800626e:	4630      	mov	r0, r6
 8006270:	f7f9 ffb6 	bl	80001e0 <memchr>
 8006274:	b108      	cbz	r0, 800627a <_printf_i+0x1e6>
 8006276:	1b80      	subs	r0, r0, r6
 8006278:	6060      	str	r0, [r4, #4]
 800627a:	6863      	ldr	r3, [r4, #4]
 800627c:	6123      	str	r3, [r4, #16]
 800627e:	2300      	movs	r3, #0
 8006280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006284:	e7aa      	b.n	80061dc <_printf_i+0x148>
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	4632      	mov	r2, r6
 800628a:	4649      	mov	r1, r9
 800628c:	4640      	mov	r0, r8
 800628e:	47d0      	blx	sl
 8006290:	3001      	adds	r0, #1
 8006292:	d0ad      	beq.n	80061f0 <_printf_i+0x15c>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	079b      	lsls	r3, r3, #30
 8006298:	d413      	bmi.n	80062c2 <_printf_i+0x22e>
 800629a:	68e0      	ldr	r0, [r4, #12]
 800629c:	9b03      	ldr	r3, [sp, #12]
 800629e:	4298      	cmp	r0, r3
 80062a0:	bfb8      	it	lt
 80062a2:	4618      	movlt	r0, r3
 80062a4:	e7a6      	b.n	80061f4 <_printf_i+0x160>
 80062a6:	2301      	movs	r3, #1
 80062a8:	4632      	mov	r2, r6
 80062aa:	4649      	mov	r1, r9
 80062ac:	4640      	mov	r0, r8
 80062ae:	47d0      	blx	sl
 80062b0:	3001      	adds	r0, #1
 80062b2:	d09d      	beq.n	80061f0 <_printf_i+0x15c>
 80062b4:	3501      	adds	r5, #1
 80062b6:	68e3      	ldr	r3, [r4, #12]
 80062b8:	9903      	ldr	r1, [sp, #12]
 80062ba:	1a5b      	subs	r3, r3, r1
 80062bc:	42ab      	cmp	r3, r5
 80062be:	dcf2      	bgt.n	80062a6 <_printf_i+0x212>
 80062c0:	e7eb      	b.n	800629a <_printf_i+0x206>
 80062c2:	2500      	movs	r5, #0
 80062c4:	f104 0619 	add.w	r6, r4, #25
 80062c8:	e7f5      	b.n	80062b6 <_printf_i+0x222>
 80062ca:	bf00      	nop
 80062cc:	080085ea 	.word	0x080085ea
 80062d0:	080085fb 	.word	0x080085fb

080062d4 <std>:
 80062d4:	2300      	movs	r3, #0
 80062d6:	b510      	push	{r4, lr}
 80062d8:	4604      	mov	r4, r0
 80062da:	e9c0 3300 	strd	r3, r3, [r0]
 80062de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062e2:	6083      	str	r3, [r0, #8]
 80062e4:	8181      	strh	r1, [r0, #12]
 80062e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80062e8:	81c2      	strh	r2, [r0, #14]
 80062ea:	6183      	str	r3, [r0, #24]
 80062ec:	4619      	mov	r1, r3
 80062ee:	2208      	movs	r2, #8
 80062f0:	305c      	adds	r0, #92	@ 0x5c
 80062f2:	f000 f920 	bl	8006536 <memset>
 80062f6:	4b0d      	ldr	r3, [pc, #52]	@ (800632c <std+0x58>)
 80062f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80062fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006330 <std+0x5c>)
 80062fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006334 <std+0x60>)
 8006300:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006302:	4b0d      	ldr	r3, [pc, #52]	@ (8006338 <std+0x64>)
 8006304:	6323      	str	r3, [r4, #48]	@ 0x30
 8006306:	4b0d      	ldr	r3, [pc, #52]	@ (800633c <std+0x68>)
 8006308:	6224      	str	r4, [r4, #32]
 800630a:	429c      	cmp	r4, r3
 800630c:	d006      	beq.n	800631c <std+0x48>
 800630e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006312:	4294      	cmp	r4, r2
 8006314:	d002      	beq.n	800631c <std+0x48>
 8006316:	33d0      	adds	r3, #208	@ 0xd0
 8006318:	429c      	cmp	r4, r3
 800631a:	d105      	bne.n	8006328 <std+0x54>
 800631c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006324:	f000 b994 	b.w	8006650 <__retarget_lock_init_recursive>
 8006328:	bd10      	pop	{r4, pc}
 800632a:	bf00      	nop
 800632c:	0800647d 	.word	0x0800647d
 8006330:	0800649f 	.word	0x0800649f
 8006334:	080064d7 	.word	0x080064d7
 8006338:	080064fb 	.word	0x080064fb
 800633c:	20000560 	.word	0x20000560

08006340 <stdio_exit_handler>:
 8006340:	4a02      	ldr	r2, [pc, #8]	@ (800634c <stdio_exit_handler+0xc>)
 8006342:	4903      	ldr	r1, [pc, #12]	@ (8006350 <stdio_exit_handler+0x10>)
 8006344:	4803      	ldr	r0, [pc, #12]	@ (8006354 <stdio_exit_handler+0x14>)
 8006346:	f000 b869 	b.w	800641c <_fwalk_sglue>
 800634a:	bf00      	nop
 800634c:	20000174 	.word	0x20000174
 8006350:	08007e15 	.word	0x08007e15
 8006354:	20000184 	.word	0x20000184

08006358 <cleanup_stdio>:
 8006358:	6841      	ldr	r1, [r0, #4]
 800635a:	4b0c      	ldr	r3, [pc, #48]	@ (800638c <cleanup_stdio+0x34>)
 800635c:	4299      	cmp	r1, r3
 800635e:	b510      	push	{r4, lr}
 8006360:	4604      	mov	r4, r0
 8006362:	d001      	beq.n	8006368 <cleanup_stdio+0x10>
 8006364:	f001 fd56 	bl	8007e14 <_fflush_r>
 8006368:	68a1      	ldr	r1, [r4, #8]
 800636a:	4b09      	ldr	r3, [pc, #36]	@ (8006390 <cleanup_stdio+0x38>)
 800636c:	4299      	cmp	r1, r3
 800636e:	d002      	beq.n	8006376 <cleanup_stdio+0x1e>
 8006370:	4620      	mov	r0, r4
 8006372:	f001 fd4f 	bl	8007e14 <_fflush_r>
 8006376:	68e1      	ldr	r1, [r4, #12]
 8006378:	4b06      	ldr	r3, [pc, #24]	@ (8006394 <cleanup_stdio+0x3c>)
 800637a:	4299      	cmp	r1, r3
 800637c:	d004      	beq.n	8006388 <cleanup_stdio+0x30>
 800637e:	4620      	mov	r0, r4
 8006380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006384:	f001 bd46 	b.w	8007e14 <_fflush_r>
 8006388:	bd10      	pop	{r4, pc}
 800638a:	bf00      	nop
 800638c:	20000560 	.word	0x20000560
 8006390:	200005c8 	.word	0x200005c8
 8006394:	20000630 	.word	0x20000630

08006398 <global_stdio_init.part.0>:
 8006398:	b510      	push	{r4, lr}
 800639a:	4b0b      	ldr	r3, [pc, #44]	@ (80063c8 <global_stdio_init.part.0+0x30>)
 800639c:	4c0b      	ldr	r4, [pc, #44]	@ (80063cc <global_stdio_init.part.0+0x34>)
 800639e:	4a0c      	ldr	r2, [pc, #48]	@ (80063d0 <global_stdio_init.part.0+0x38>)
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	4620      	mov	r0, r4
 80063a4:	2200      	movs	r2, #0
 80063a6:	2104      	movs	r1, #4
 80063a8:	f7ff ff94 	bl	80062d4 <std>
 80063ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063b0:	2201      	movs	r2, #1
 80063b2:	2109      	movs	r1, #9
 80063b4:	f7ff ff8e 	bl	80062d4 <std>
 80063b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063bc:	2202      	movs	r2, #2
 80063be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c2:	2112      	movs	r1, #18
 80063c4:	f7ff bf86 	b.w	80062d4 <std>
 80063c8:	20000698 	.word	0x20000698
 80063cc:	20000560 	.word	0x20000560
 80063d0:	08006341 	.word	0x08006341

080063d4 <__sfp_lock_acquire>:
 80063d4:	4801      	ldr	r0, [pc, #4]	@ (80063dc <__sfp_lock_acquire+0x8>)
 80063d6:	f000 b93c 	b.w	8006652 <__retarget_lock_acquire_recursive>
 80063da:	bf00      	nop
 80063dc:	200006a1 	.word	0x200006a1

080063e0 <__sfp_lock_release>:
 80063e0:	4801      	ldr	r0, [pc, #4]	@ (80063e8 <__sfp_lock_release+0x8>)
 80063e2:	f000 b937 	b.w	8006654 <__retarget_lock_release_recursive>
 80063e6:	bf00      	nop
 80063e8:	200006a1 	.word	0x200006a1

080063ec <__sinit>:
 80063ec:	b510      	push	{r4, lr}
 80063ee:	4604      	mov	r4, r0
 80063f0:	f7ff fff0 	bl	80063d4 <__sfp_lock_acquire>
 80063f4:	6a23      	ldr	r3, [r4, #32]
 80063f6:	b11b      	cbz	r3, 8006400 <__sinit+0x14>
 80063f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063fc:	f7ff bff0 	b.w	80063e0 <__sfp_lock_release>
 8006400:	4b04      	ldr	r3, [pc, #16]	@ (8006414 <__sinit+0x28>)
 8006402:	6223      	str	r3, [r4, #32]
 8006404:	4b04      	ldr	r3, [pc, #16]	@ (8006418 <__sinit+0x2c>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1f5      	bne.n	80063f8 <__sinit+0xc>
 800640c:	f7ff ffc4 	bl	8006398 <global_stdio_init.part.0>
 8006410:	e7f2      	b.n	80063f8 <__sinit+0xc>
 8006412:	bf00      	nop
 8006414:	08006359 	.word	0x08006359
 8006418:	20000698 	.word	0x20000698

0800641c <_fwalk_sglue>:
 800641c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006420:	4607      	mov	r7, r0
 8006422:	4688      	mov	r8, r1
 8006424:	4614      	mov	r4, r2
 8006426:	2600      	movs	r6, #0
 8006428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800642c:	f1b9 0901 	subs.w	r9, r9, #1
 8006430:	d505      	bpl.n	800643e <_fwalk_sglue+0x22>
 8006432:	6824      	ldr	r4, [r4, #0]
 8006434:	2c00      	cmp	r4, #0
 8006436:	d1f7      	bne.n	8006428 <_fwalk_sglue+0xc>
 8006438:	4630      	mov	r0, r6
 800643a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800643e:	89ab      	ldrh	r3, [r5, #12]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d907      	bls.n	8006454 <_fwalk_sglue+0x38>
 8006444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006448:	3301      	adds	r3, #1
 800644a:	d003      	beq.n	8006454 <_fwalk_sglue+0x38>
 800644c:	4629      	mov	r1, r5
 800644e:	4638      	mov	r0, r7
 8006450:	47c0      	blx	r8
 8006452:	4306      	orrs	r6, r0
 8006454:	3568      	adds	r5, #104	@ 0x68
 8006456:	e7e9      	b.n	800642c <_fwalk_sglue+0x10>

08006458 <iprintf>:
 8006458:	b40f      	push	{r0, r1, r2, r3}
 800645a:	b507      	push	{r0, r1, r2, lr}
 800645c:	4906      	ldr	r1, [pc, #24]	@ (8006478 <iprintf+0x20>)
 800645e:	ab04      	add	r3, sp, #16
 8006460:	6808      	ldr	r0, [r1, #0]
 8006462:	f853 2b04 	ldr.w	r2, [r3], #4
 8006466:	6881      	ldr	r1, [r0, #8]
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	f001 fb37 	bl	8007adc <_vfiprintf_r>
 800646e:	b003      	add	sp, #12
 8006470:	f85d eb04 	ldr.w	lr, [sp], #4
 8006474:	b004      	add	sp, #16
 8006476:	4770      	bx	lr
 8006478:	20000180 	.word	0x20000180

0800647c <__sread>:
 800647c:	b510      	push	{r4, lr}
 800647e:	460c      	mov	r4, r1
 8006480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006484:	f000 f886 	bl	8006594 <_read_r>
 8006488:	2800      	cmp	r0, #0
 800648a:	bfab      	itete	ge
 800648c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800648e:	89a3      	ldrhlt	r3, [r4, #12]
 8006490:	181b      	addge	r3, r3, r0
 8006492:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006496:	bfac      	ite	ge
 8006498:	6563      	strge	r3, [r4, #84]	@ 0x54
 800649a:	81a3      	strhlt	r3, [r4, #12]
 800649c:	bd10      	pop	{r4, pc}

0800649e <__swrite>:
 800649e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a2:	461f      	mov	r7, r3
 80064a4:	898b      	ldrh	r3, [r1, #12]
 80064a6:	05db      	lsls	r3, r3, #23
 80064a8:	4605      	mov	r5, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	4616      	mov	r6, r2
 80064ae:	d505      	bpl.n	80064bc <__swrite+0x1e>
 80064b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b4:	2302      	movs	r3, #2
 80064b6:	2200      	movs	r2, #0
 80064b8:	f000 f85a 	bl	8006570 <_lseek_r>
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	4632      	mov	r2, r6
 80064ca:	463b      	mov	r3, r7
 80064cc:	4628      	mov	r0, r5
 80064ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064d2:	f000 b881 	b.w	80065d8 <_write_r>

080064d6 <__sseek>:
 80064d6:	b510      	push	{r4, lr}
 80064d8:	460c      	mov	r4, r1
 80064da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064de:	f000 f847 	bl	8006570 <_lseek_r>
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	bf15      	itete	ne
 80064e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80064ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80064ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80064f2:	81a3      	strheq	r3, [r4, #12]
 80064f4:	bf18      	it	ne
 80064f6:	81a3      	strhne	r3, [r4, #12]
 80064f8:	bd10      	pop	{r4, pc}

080064fa <__sclose>:
 80064fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fe:	f000 b827 	b.w	8006550 <_close_r>

08006502 <memmove>:
 8006502:	4288      	cmp	r0, r1
 8006504:	b510      	push	{r4, lr}
 8006506:	eb01 0402 	add.w	r4, r1, r2
 800650a:	d902      	bls.n	8006512 <memmove+0x10>
 800650c:	4284      	cmp	r4, r0
 800650e:	4623      	mov	r3, r4
 8006510:	d807      	bhi.n	8006522 <memmove+0x20>
 8006512:	1e43      	subs	r3, r0, #1
 8006514:	42a1      	cmp	r1, r4
 8006516:	d008      	beq.n	800652a <memmove+0x28>
 8006518:	f811 2b01 	ldrb.w	r2, [r1], #1
 800651c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006520:	e7f8      	b.n	8006514 <memmove+0x12>
 8006522:	4402      	add	r2, r0
 8006524:	4601      	mov	r1, r0
 8006526:	428a      	cmp	r2, r1
 8006528:	d100      	bne.n	800652c <memmove+0x2a>
 800652a:	bd10      	pop	{r4, pc}
 800652c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006530:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006534:	e7f7      	b.n	8006526 <memmove+0x24>

08006536 <memset>:
 8006536:	4402      	add	r2, r0
 8006538:	4603      	mov	r3, r0
 800653a:	4293      	cmp	r3, r2
 800653c:	d100      	bne.n	8006540 <memset+0xa>
 800653e:	4770      	bx	lr
 8006540:	f803 1b01 	strb.w	r1, [r3], #1
 8006544:	e7f9      	b.n	800653a <memset+0x4>
	...

08006548 <_localeconv_r>:
 8006548:	4800      	ldr	r0, [pc, #0]	@ (800654c <_localeconv_r+0x4>)
 800654a:	4770      	bx	lr
 800654c:	200002c0 	.word	0x200002c0

08006550 <_close_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4d06      	ldr	r5, [pc, #24]	@ (800656c <_close_r+0x1c>)
 8006554:	2300      	movs	r3, #0
 8006556:	4604      	mov	r4, r0
 8006558:	4608      	mov	r0, r1
 800655a:	602b      	str	r3, [r5, #0]
 800655c:	f7fc f8da 	bl	8002714 <_close>
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d102      	bne.n	800656a <_close_r+0x1a>
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	b103      	cbz	r3, 800656a <_close_r+0x1a>
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	2000069c 	.word	0x2000069c

08006570 <_lseek_r>:
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	4d07      	ldr	r5, [pc, #28]	@ (8006590 <_lseek_r+0x20>)
 8006574:	4604      	mov	r4, r0
 8006576:	4608      	mov	r0, r1
 8006578:	4611      	mov	r1, r2
 800657a:	2200      	movs	r2, #0
 800657c:	602a      	str	r2, [r5, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	f7fc f8ef 	bl	8002762 <_lseek>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d102      	bne.n	800658e <_lseek_r+0x1e>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	b103      	cbz	r3, 800658e <_lseek_r+0x1e>
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	2000069c 	.word	0x2000069c

08006594 <_read_r>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	4d07      	ldr	r5, [pc, #28]	@ (80065b4 <_read_r+0x20>)
 8006598:	4604      	mov	r4, r0
 800659a:	4608      	mov	r0, r1
 800659c:	4611      	mov	r1, r2
 800659e:	2200      	movs	r2, #0
 80065a0:	602a      	str	r2, [r5, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	f7fc f899 	bl	80026da <_read>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d102      	bne.n	80065b2 <_read_r+0x1e>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	b103      	cbz	r3, 80065b2 <_read_r+0x1e>
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
 80065b4:	2000069c 	.word	0x2000069c

080065b8 <_sbrk_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	4d06      	ldr	r5, [pc, #24]	@ (80065d4 <_sbrk_r+0x1c>)
 80065bc:	2300      	movs	r3, #0
 80065be:	4604      	mov	r4, r0
 80065c0:	4608      	mov	r0, r1
 80065c2:	602b      	str	r3, [r5, #0]
 80065c4:	f7fc f8da 	bl	800277c <_sbrk>
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d102      	bne.n	80065d2 <_sbrk_r+0x1a>
 80065cc:	682b      	ldr	r3, [r5, #0]
 80065ce:	b103      	cbz	r3, 80065d2 <_sbrk_r+0x1a>
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	bd38      	pop	{r3, r4, r5, pc}
 80065d4:	2000069c 	.word	0x2000069c

080065d8 <_write_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	4d07      	ldr	r5, [pc, #28]	@ (80065f8 <_write_r+0x20>)
 80065dc:	4604      	mov	r4, r0
 80065de:	4608      	mov	r0, r1
 80065e0:	4611      	mov	r1, r2
 80065e2:	2200      	movs	r2, #0
 80065e4:	602a      	str	r2, [r5, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	f7fa fd24 	bl	8001034 <_write>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d102      	bne.n	80065f6 <_write_r+0x1e>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	b103      	cbz	r3, 80065f6 <_write_r+0x1e>
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	2000069c 	.word	0x2000069c

080065fc <__errno>:
 80065fc:	4b01      	ldr	r3, [pc, #4]	@ (8006604 <__errno+0x8>)
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20000180 	.word	0x20000180

08006608 <__libc_init_array>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	4d0d      	ldr	r5, [pc, #52]	@ (8006640 <__libc_init_array+0x38>)
 800660c:	4c0d      	ldr	r4, [pc, #52]	@ (8006644 <__libc_init_array+0x3c>)
 800660e:	1b64      	subs	r4, r4, r5
 8006610:	10a4      	asrs	r4, r4, #2
 8006612:	2600      	movs	r6, #0
 8006614:	42a6      	cmp	r6, r4
 8006616:	d109      	bne.n	800662c <__libc_init_array+0x24>
 8006618:	4d0b      	ldr	r5, [pc, #44]	@ (8006648 <__libc_init_array+0x40>)
 800661a:	4c0c      	ldr	r4, [pc, #48]	@ (800664c <__libc_init_array+0x44>)
 800661c:	f001 ff9a 	bl	8008554 <_init>
 8006620:	1b64      	subs	r4, r4, r5
 8006622:	10a4      	asrs	r4, r4, #2
 8006624:	2600      	movs	r6, #0
 8006626:	42a6      	cmp	r6, r4
 8006628:	d105      	bne.n	8006636 <__libc_init_array+0x2e>
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006630:	4798      	blx	r3
 8006632:	3601      	adds	r6, #1
 8006634:	e7ee      	b.n	8006614 <__libc_init_array+0xc>
 8006636:	f855 3b04 	ldr.w	r3, [r5], #4
 800663a:	4798      	blx	r3
 800663c:	3601      	adds	r6, #1
 800663e:	e7f2      	b.n	8006626 <__libc_init_array+0x1e>
 8006640:	08008960 	.word	0x08008960
 8006644:	08008960 	.word	0x08008960
 8006648:	08008960 	.word	0x08008960
 800664c:	08008964 	.word	0x08008964

08006650 <__retarget_lock_init_recursive>:
 8006650:	4770      	bx	lr

08006652 <__retarget_lock_acquire_recursive>:
 8006652:	4770      	bx	lr

08006654 <__retarget_lock_release_recursive>:
 8006654:	4770      	bx	lr

08006656 <quorem>:
 8006656:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665a:	6903      	ldr	r3, [r0, #16]
 800665c:	690c      	ldr	r4, [r1, #16]
 800665e:	42a3      	cmp	r3, r4
 8006660:	4607      	mov	r7, r0
 8006662:	db7e      	blt.n	8006762 <quorem+0x10c>
 8006664:	3c01      	subs	r4, #1
 8006666:	f101 0814 	add.w	r8, r1, #20
 800666a:	00a3      	lsls	r3, r4, #2
 800666c:	f100 0514 	add.w	r5, r0, #20
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800667c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006680:	3301      	adds	r3, #1
 8006682:	429a      	cmp	r2, r3
 8006684:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006688:	fbb2 f6f3 	udiv	r6, r2, r3
 800668c:	d32e      	bcc.n	80066ec <quorem+0x96>
 800668e:	f04f 0a00 	mov.w	sl, #0
 8006692:	46c4      	mov	ip, r8
 8006694:	46ae      	mov	lr, r5
 8006696:	46d3      	mov	fp, sl
 8006698:	f85c 3b04 	ldr.w	r3, [ip], #4
 800669c:	b298      	uxth	r0, r3
 800669e:	fb06 a000 	mla	r0, r6, r0, sl
 80066a2:	0c02      	lsrs	r2, r0, #16
 80066a4:	0c1b      	lsrs	r3, r3, #16
 80066a6:	fb06 2303 	mla	r3, r6, r3, r2
 80066aa:	f8de 2000 	ldr.w	r2, [lr]
 80066ae:	b280      	uxth	r0, r0
 80066b0:	b292      	uxth	r2, r2
 80066b2:	1a12      	subs	r2, r2, r0
 80066b4:	445a      	add	r2, fp
 80066b6:	f8de 0000 	ldr.w	r0, [lr]
 80066ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066be:	b29b      	uxth	r3, r3
 80066c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80066c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80066c8:	b292      	uxth	r2, r2
 80066ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80066ce:	45e1      	cmp	r9, ip
 80066d0:	f84e 2b04 	str.w	r2, [lr], #4
 80066d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80066d8:	d2de      	bcs.n	8006698 <quorem+0x42>
 80066da:	9b00      	ldr	r3, [sp, #0]
 80066dc:	58eb      	ldr	r3, [r5, r3]
 80066de:	b92b      	cbnz	r3, 80066ec <quorem+0x96>
 80066e0:	9b01      	ldr	r3, [sp, #4]
 80066e2:	3b04      	subs	r3, #4
 80066e4:	429d      	cmp	r5, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	d32f      	bcc.n	800674a <quorem+0xf4>
 80066ea:	613c      	str	r4, [r7, #16]
 80066ec:	4638      	mov	r0, r7
 80066ee:	f001 f8c3 	bl	8007878 <__mcmp>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	db25      	blt.n	8006742 <quorem+0xec>
 80066f6:	4629      	mov	r1, r5
 80066f8:	2000      	movs	r0, #0
 80066fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80066fe:	f8d1 c000 	ldr.w	ip, [r1]
 8006702:	fa1f fe82 	uxth.w	lr, r2
 8006706:	fa1f f38c 	uxth.w	r3, ip
 800670a:	eba3 030e 	sub.w	r3, r3, lr
 800670e:	4403      	add	r3, r0
 8006710:	0c12      	lsrs	r2, r2, #16
 8006712:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006716:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800671a:	b29b      	uxth	r3, r3
 800671c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006720:	45c1      	cmp	r9, r8
 8006722:	f841 3b04 	str.w	r3, [r1], #4
 8006726:	ea4f 4022 	mov.w	r0, r2, asr #16
 800672a:	d2e6      	bcs.n	80066fa <quorem+0xa4>
 800672c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006730:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006734:	b922      	cbnz	r2, 8006740 <quorem+0xea>
 8006736:	3b04      	subs	r3, #4
 8006738:	429d      	cmp	r5, r3
 800673a:	461a      	mov	r2, r3
 800673c:	d30b      	bcc.n	8006756 <quorem+0x100>
 800673e:	613c      	str	r4, [r7, #16]
 8006740:	3601      	adds	r6, #1
 8006742:	4630      	mov	r0, r6
 8006744:	b003      	add	sp, #12
 8006746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	6812      	ldr	r2, [r2, #0]
 800674c:	3b04      	subs	r3, #4
 800674e:	2a00      	cmp	r2, #0
 8006750:	d1cb      	bne.n	80066ea <quorem+0x94>
 8006752:	3c01      	subs	r4, #1
 8006754:	e7c6      	b.n	80066e4 <quorem+0x8e>
 8006756:	6812      	ldr	r2, [r2, #0]
 8006758:	3b04      	subs	r3, #4
 800675a:	2a00      	cmp	r2, #0
 800675c:	d1ef      	bne.n	800673e <quorem+0xe8>
 800675e:	3c01      	subs	r4, #1
 8006760:	e7ea      	b.n	8006738 <quorem+0xe2>
 8006762:	2000      	movs	r0, #0
 8006764:	e7ee      	b.n	8006744 <quorem+0xee>
	...

08006768 <_dtoa_r>:
 8006768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676c:	69c7      	ldr	r7, [r0, #28]
 800676e:	b099      	sub	sp, #100	@ 0x64
 8006770:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006774:	ec55 4b10 	vmov	r4, r5, d0
 8006778:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800677a:	9109      	str	r1, [sp, #36]	@ 0x24
 800677c:	4683      	mov	fp, r0
 800677e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006780:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006782:	b97f      	cbnz	r7, 80067a4 <_dtoa_r+0x3c>
 8006784:	2010      	movs	r0, #16
 8006786:	f7ff f897 	bl	80058b8 <malloc>
 800678a:	4602      	mov	r2, r0
 800678c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006790:	b920      	cbnz	r0, 800679c <_dtoa_r+0x34>
 8006792:	4ba7      	ldr	r3, [pc, #668]	@ (8006a30 <_dtoa_r+0x2c8>)
 8006794:	21ef      	movs	r1, #239	@ 0xef
 8006796:	48a7      	ldr	r0, [pc, #668]	@ (8006a34 <_dtoa_r+0x2cc>)
 8006798:	f001 fc06 	bl	8007fa8 <__assert_func>
 800679c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80067a0:	6007      	str	r7, [r0, #0]
 80067a2:	60c7      	str	r7, [r0, #12]
 80067a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067a8:	6819      	ldr	r1, [r3, #0]
 80067aa:	b159      	cbz	r1, 80067c4 <_dtoa_r+0x5c>
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	604a      	str	r2, [r1, #4]
 80067b0:	2301      	movs	r3, #1
 80067b2:	4093      	lsls	r3, r2
 80067b4:	608b      	str	r3, [r1, #8]
 80067b6:	4658      	mov	r0, fp
 80067b8:	f000 fe24 	bl	8007404 <_Bfree>
 80067bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	1e2b      	subs	r3, r5, #0
 80067c6:	bfb9      	ittee	lt
 80067c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80067cc:	9303      	strlt	r3, [sp, #12]
 80067ce:	2300      	movge	r3, #0
 80067d0:	6033      	strge	r3, [r6, #0]
 80067d2:	9f03      	ldr	r7, [sp, #12]
 80067d4:	4b98      	ldr	r3, [pc, #608]	@ (8006a38 <_dtoa_r+0x2d0>)
 80067d6:	bfbc      	itt	lt
 80067d8:	2201      	movlt	r2, #1
 80067da:	6032      	strlt	r2, [r6, #0]
 80067dc:	43bb      	bics	r3, r7
 80067de:	d112      	bne.n	8006806 <_dtoa_r+0x9e>
 80067e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80067e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067ec:	4323      	orrs	r3, r4
 80067ee:	f000 854d 	beq.w	800728c <_dtoa_r+0xb24>
 80067f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006a4c <_dtoa_r+0x2e4>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 854f 	beq.w	800729c <_dtoa_r+0xb34>
 80067fe:	f10a 0303 	add.w	r3, sl, #3
 8006802:	f000 bd49 	b.w	8007298 <_dtoa_r+0xb30>
 8006806:	ed9d 7b02 	vldr	d7, [sp, #8]
 800680a:	2200      	movs	r2, #0
 800680c:	ec51 0b17 	vmov	r0, r1, d7
 8006810:	2300      	movs	r3, #0
 8006812:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006816:	f7fa f95f 	bl	8000ad8 <__aeabi_dcmpeq>
 800681a:	4680      	mov	r8, r0
 800681c:	b158      	cbz	r0, 8006836 <_dtoa_r+0xce>
 800681e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006820:	2301      	movs	r3, #1
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006826:	b113      	cbz	r3, 800682e <_dtoa_r+0xc6>
 8006828:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800682a:	4b84      	ldr	r3, [pc, #528]	@ (8006a3c <_dtoa_r+0x2d4>)
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006a50 <_dtoa_r+0x2e8>
 8006832:	f000 bd33 	b.w	800729c <_dtoa_r+0xb34>
 8006836:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800683a:	aa16      	add	r2, sp, #88	@ 0x58
 800683c:	a917      	add	r1, sp, #92	@ 0x5c
 800683e:	4658      	mov	r0, fp
 8006840:	f001 f8ca 	bl	80079d8 <__d2b>
 8006844:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006848:	4681      	mov	r9, r0
 800684a:	2e00      	cmp	r6, #0
 800684c:	d077      	beq.n	800693e <_dtoa_r+0x1d6>
 800684e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006850:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800685c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006860:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006864:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006868:	4619      	mov	r1, r3
 800686a:	2200      	movs	r2, #0
 800686c:	4b74      	ldr	r3, [pc, #464]	@ (8006a40 <_dtoa_r+0x2d8>)
 800686e:	f7f9 fd13 	bl	8000298 <__aeabi_dsub>
 8006872:	a369      	add	r3, pc, #420	@ (adr r3, 8006a18 <_dtoa_r+0x2b0>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f7f9 fec6 	bl	8000608 <__aeabi_dmul>
 800687c:	a368      	add	r3, pc, #416	@ (adr r3, 8006a20 <_dtoa_r+0x2b8>)
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f7f9 fd0b 	bl	800029c <__adddf3>
 8006886:	4604      	mov	r4, r0
 8006888:	4630      	mov	r0, r6
 800688a:	460d      	mov	r5, r1
 800688c:	f7f9 fe52 	bl	8000534 <__aeabi_i2d>
 8006890:	a365      	add	r3, pc, #404	@ (adr r3, 8006a28 <_dtoa_r+0x2c0>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f7f9 feb7 	bl	8000608 <__aeabi_dmul>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	f7f9 fcfb 	bl	800029c <__adddf3>
 80068a6:	4604      	mov	r4, r0
 80068a8:	460d      	mov	r5, r1
 80068aa:	f7fa f95d 	bl	8000b68 <__aeabi_d2iz>
 80068ae:	2200      	movs	r2, #0
 80068b0:	4607      	mov	r7, r0
 80068b2:	2300      	movs	r3, #0
 80068b4:	4620      	mov	r0, r4
 80068b6:	4629      	mov	r1, r5
 80068b8:	f7fa f918 	bl	8000aec <__aeabi_dcmplt>
 80068bc:	b140      	cbz	r0, 80068d0 <_dtoa_r+0x168>
 80068be:	4638      	mov	r0, r7
 80068c0:	f7f9 fe38 	bl	8000534 <__aeabi_i2d>
 80068c4:	4622      	mov	r2, r4
 80068c6:	462b      	mov	r3, r5
 80068c8:	f7fa f906 	bl	8000ad8 <__aeabi_dcmpeq>
 80068cc:	b900      	cbnz	r0, 80068d0 <_dtoa_r+0x168>
 80068ce:	3f01      	subs	r7, #1
 80068d0:	2f16      	cmp	r7, #22
 80068d2:	d851      	bhi.n	8006978 <_dtoa_r+0x210>
 80068d4:	4b5b      	ldr	r3, [pc, #364]	@ (8006a44 <_dtoa_r+0x2dc>)
 80068d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068e2:	f7fa f903 	bl	8000aec <__aeabi_dcmplt>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d048      	beq.n	800697c <_dtoa_r+0x214>
 80068ea:	3f01      	subs	r7, #1
 80068ec:	2300      	movs	r3, #0
 80068ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80068f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80068f2:	1b9b      	subs	r3, r3, r6
 80068f4:	1e5a      	subs	r2, r3, #1
 80068f6:	bf44      	itt	mi
 80068f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80068fc:	2300      	movmi	r3, #0
 80068fe:	9208      	str	r2, [sp, #32]
 8006900:	bf54      	ite	pl
 8006902:	f04f 0800 	movpl.w	r8, #0
 8006906:	9308      	strmi	r3, [sp, #32]
 8006908:	2f00      	cmp	r7, #0
 800690a:	db39      	blt.n	8006980 <_dtoa_r+0x218>
 800690c:	9b08      	ldr	r3, [sp, #32]
 800690e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006910:	443b      	add	r3, r7
 8006912:	9308      	str	r3, [sp, #32]
 8006914:	2300      	movs	r3, #0
 8006916:	930a      	str	r3, [sp, #40]	@ 0x28
 8006918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800691a:	2b09      	cmp	r3, #9
 800691c:	d864      	bhi.n	80069e8 <_dtoa_r+0x280>
 800691e:	2b05      	cmp	r3, #5
 8006920:	bfc4      	itt	gt
 8006922:	3b04      	subgt	r3, #4
 8006924:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006928:	f1a3 0302 	sub.w	r3, r3, #2
 800692c:	bfcc      	ite	gt
 800692e:	2400      	movgt	r4, #0
 8006930:	2401      	movle	r4, #1
 8006932:	2b03      	cmp	r3, #3
 8006934:	d863      	bhi.n	80069fe <_dtoa_r+0x296>
 8006936:	e8df f003 	tbb	[pc, r3]
 800693a:	372a      	.short	0x372a
 800693c:	5535      	.short	0x5535
 800693e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006942:	441e      	add	r6, r3
 8006944:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006948:	2b20      	cmp	r3, #32
 800694a:	bfc1      	itttt	gt
 800694c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006950:	409f      	lslgt	r7, r3
 8006952:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006956:	fa24 f303 	lsrgt.w	r3, r4, r3
 800695a:	bfd6      	itet	le
 800695c:	f1c3 0320 	rsble	r3, r3, #32
 8006960:	ea47 0003 	orrgt.w	r0, r7, r3
 8006964:	fa04 f003 	lslle.w	r0, r4, r3
 8006968:	f7f9 fdd4 	bl	8000514 <__aeabi_ui2d>
 800696c:	2201      	movs	r2, #1
 800696e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006972:	3e01      	subs	r6, #1
 8006974:	9214      	str	r2, [sp, #80]	@ 0x50
 8006976:	e777      	b.n	8006868 <_dtoa_r+0x100>
 8006978:	2301      	movs	r3, #1
 800697a:	e7b8      	b.n	80068ee <_dtoa_r+0x186>
 800697c:	9012      	str	r0, [sp, #72]	@ 0x48
 800697e:	e7b7      	b.n	80068f0 <_dtoa_r+0x188>
 8006980:	427b      	negs	r3, r7
 8006982:	930a      	str	r3, [sp, #40]	@ 0x28
 8006984:	2300      	movs	r3, #0
 8006986:	eba8 0807 	sub.w	r8, r8, r7
 800698a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800698c:	e7c4      	b.n	8006918 <_dtoa_r+0x1b0>
 800698e:	2300      	movs	r3, #0
 8006990:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006994:	2b00      	cmp	r3, #0
 8006996:	dc35      	bgt.n	8006a04 <_dtoa_r+0x29c>
 8006998:	2301      	movs	r3, #1
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	9307      	str	r3, [sp, #28]
 800699e:	461a      	mov	r2, r3
 80069a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80069a2:	e00b      	b.n	80069bc <_dtoa_r+0x254>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e7f3      	b.n	8006990 <_dtoa_r+0x228>
 80069a8:	2300      	movs	r3, #0
 80069aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069ae:	18fb      	adds	r3, r7, r3
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	9307      	str	r3, [sp, #28]
 80069b8:	bfb8      	it	lt
 80069ba:	2301      	movlt	r3, #1
 80069bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80069c0:	2100      	movs	r1, #0
 80069c2:	2204      	movs	r2, #4
 80069c4:	f102 0514 	add.w	r5, r2, #20
 80069c8:	429d      	cmp	r5, r3
 80069ca:	d91f      	bls.n	8006a0c <_dtoa_r+0x2a4>
 80069cc:	6041      	str	r1, [r0, #4]
 80069ce:	4658      	mov	r0, fp
 80069d0:	f000 fcd8 	bl	8007384 <_Balloc>
 80069d4:	4682      	mov	sl, r0
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d13c      	bne.n	8006a54 <_dtoa_r+0x2ec>
 80069da:	4b1b      	ldr	r3, [pc, #108]	@ (8006a48 <_dtoa_r+0x2e0>)
 80069dc:	4602      	mov	r2, r0
 80069de:	f240 11af 	movw	r1, #431	@ 0x1af
 80069e2:	e6d8      	b.n	8006796 <_dtoa_r+0x2e>
 80069e4:	2301      	movs	r3, #1
 80069e6:	e7e0      	b.n	80069aa <_dtoa_r+0x242>
 80069e8:	2401      	movs	r4, #1
 80069ea:	2300      	movs	r3, #0
 80069ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80069f0:	f04f 33ff 	mov.w	r3, #4294967295
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	9307      	str	r3, [sp, #28]
 80069f8:	2200      	movs	r2, #0
 80069fa:	2312      	movs	r3, #18
 80069fc:	e7d0      	b.n	80069a0 <_dtoa_r+0x238>
 80069fe:	2301      	movs	r3, #1
 8006a00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a02:	e7f5      	b.n	80069f0 <_dtoa_r+0x288>
 8006a04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	9307      	str	r3, [sp, #28]
 8006a0a:	e7d7      	b.n	80069bc <_dtoa_r+0x254>
 8006a0c:	3101      	adds	r1, #1
 8006a0e:	0052      	lsls	r2, r2, #1
 8006a10:	e7d8      	b.n	80069c4 <_dtoa_r+0x25c>
 8006a12:	bf00      	nop
 8006a14:	f3af 8000 	nop.w
 8006a18:	636f4361 	.word	0x636f4361
 8006a1c:	3fd287a7 	.word	0x3fd287a7
 8006a20:	8b60c8b3 	.word	0x8b60c8b3
 8006a24:	3fc68a28 	.word	0x3fc68a28
 8006a28:	509f79fb 	.word	0x509f79fb
 8006a2c:	3fd34413 	.word	0x3fd34413
 8006a30:	08008619 	.word	0x08008619
 8006a34:	08008630 	.word	0x08008630
 8006a38:	7ff00000 	.word	0x7ff00000
 8006a3c:	080085e9 	.word	0x080085e9
 8006a40:	3ff80000 	.word	0x3ff80000
 8006a44:	08008728 	.word	0x08008728
 8006a48:	08008688 	.word	0x08008688
 8006a4c:	08008615 	.word	0x08008615
 8006a50:	080085e8 	.word	0x080085e8
 8006a54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a58:	6018      	str	r0, [r3, #0]
 8006a5a:	9b07      	ldr	r3, [sp, #28]
 8006a5c:	2b0e      	cmp	r3, #14
 8006a5e:	f200 80a4 	bhi.w	8006baa <_dtoa_r+0x442>
 8006a62:	2c00      	cmp	r4, #0
 8006a64:	f000 80a1 	beq.w	8006baa <_dtoa_r+0x442>
 8006a68:	2f00      	cmp	r7, #0
 8006a6a:	dd33      	ble.n	8006ad4 <_dtoa_r+0x36c>
 8006a6c:	4bad      	ldr	r3, [pc, #692]	@ (8006d24 <_dtoa_r+0x5bc>)
 8006a6e:	f007 020f 	and.w	r2, r7, #15
 8006a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a76:	ed93 7b00 	vldr	d7, [r3]
 8006a7a:	05f8      	lsls	r0, r7, #23
 8006a7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a84:	d516      	bpl.n	8006ab4 <_dtoa_r+0x34c>
 8006a86:	4ba8      	ldr	r3, [pc, #672]	@ (8006d28 <_dtoa_r+0x5c0>)
 8006a88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a90:	f7f9 fee4 	bl	800085c <__aeabi_ddiv>
 8006a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a98:	f004 040f 	and.w	r4, r4, #15
 8006a9c:	2603      	movs	r6, #3
 8006a9e:	4da2      	ldr	r5, [pc, #648]	@ (8006d28 <_dtoa_r+0x5c0>)
 8006aa0:	b954      	cbnz	r4, 8006ab8 <_dtoa_r+0x350>
 8006aa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aaa:	f7f9 fed7 	bl	800085c <__aeabi_ddiv>
 8006aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ab2:	e028      	b.n	8006b06 <_dtoa_r+0x39e>
 8006ab4:	2602      	movs	r6, #2
 8006ab6:	e7f2      	b.n	8006a9e <_dtoa_r+0x336>
 8006ab8:	07e1      	lsls	r1, r4, #31
 8006aba:	d508      	bpl.n	8006ace <_dtoa_r+0x366>
 8006abc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ac0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ac4:	f7f9 fda0 	bl	8000608 <__aeabi_dmul>
 8006ac8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006acc:	3601      	adds	r6, #1
 8006ace:	1064      	asrs	r4, r4, #1
 8006ad0:	3508      	adds	r5, #8
 8006ad2:	e7e5      	b.n	8006aa0 <_dtoa_r+0x338>
 8006ad4:	f000 80d2 	beq.w	8006c7c <_dtoa_r+0x514>
 8006ad8:	427c      	negs	r4, r7
 8006ada:	4b92      	ldr	r3, [pc, #584]	@ (8006d24 <_dtoa_r+0x5bc>)
 8006adc:	4d92      	ldr	r5, [pc, #584]	@ (8006d28 <_dtoa_r+0x5c0>)
 8006ade:	f004 020f 	and.w	r2, r4, #15
 8006ae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006aee:	f7f9 fd8b 	bl	8000608 <__aeabi_dmul>
 8006af2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006af6:	1124      	asrs	r4, r4, #4
 8006af8:	2300      	movs	r3, #0
 8006afa:	2602      	movs	r6, #2
 8006afc:	2c00      	cmp	r4, #0
 8006afe:	f040 80b2 	bne.w	8006c66 <_dtoa_r+0x4fe>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1d3      	bne.n	8006aae <_dtoa_r+0x346>
 8006b06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80b7 	beq.w	8006c80 <_dtoa_r+0x518>
 8006b12:	4b86      	ldr	r3, [pc, #536]	@ (8006d2c <_dtoa_r+0x5c4>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	4620      	mov	r0, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7f9 ffe7 	bl	8000aec <__aeabi_dcmplt>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f000 80ae 	beq.w	8006c80 <_dtoa_r+0x518>
 8006b24:	9b07      	ldr	r3, [sp, #28]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 80aa 	beq.w	8006c80 <_dtoa_r+0x518>
 8006b2c:	9b00      	ldr	r3, [sp, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	dd37      	ble.n	8006ba2 <_dtoa_r+0x43a>
 8006b32:	1e7b      	subs	r3, r7, #1
 8006b34:	9304      	str	r3, [sp, #16]
 8006b36:	4620      	mov	r0, r4
 8006b38:	4b7d      	ldr	r3, [pc, #500]	@ (8006d30 <_dtoa_r+0x5c8>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7f9 fd63 	bl	8000608 <__aeabi_dmul>
 8006b42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b46:	9c00      	ldr	r4, [sp, #0]
 8006b48:	3601      	adds	r6, #1
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f7f9 fcf2 	bl	8000534 <__aeabi_i2d>
 8006b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b54:	f7f9 fd58 	bl	8000608 <__aeabi_dmul>
 8006b58:	4b76      	ldr	r3, [pc, #472]	@ (8006d34 <_dtoa_r+0x5cc>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f7f9 fb9e 	bl	800029c <__adddf3>
 8006b60:	4605      	mov	r5, r0
 8006b62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b66:	2c00      	cmp	r4, #0
 8006b68:	f040 808d 	bne.w	8006c86 <_dtoa_r+0x51e>
 8006b6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b70:	4b71      	ldr	r3, [pc, #452]	@ (8006d38 <_dtoa_r+0x5d0>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	f7f9 fb90 	bl	8000298 <__aeabi_dsub>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b80:	462a      	mov	r2, r5
 8006b82:	4633      	mov	r3, r6
 8006b84:	f7f9 ffd0 	bl	8000b28 <__aeabi_dcmpgt>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	f040 828b 	bne.w	80070a4 <_dtoa_r+0x93c>
 8006b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b92:	462a      	mov	r2, r5
 8006b94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b98:	f7f9 ffa8 	bl	8000aec <__aeabi_dcmplt>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f040 8128 	bne.w	8006df2 <_dtoa_r+0x68a>
 8006ba2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006ba6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006baa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f2c0 815a 	blt.w	8006e66 <_dtoa_r+0x6fe>
 8006bb2:	2f0e      	cmp	r7, #14
 8006bb4:	f300 8157 	bgt.w	8006e66 <_dtoa_r+0x6fe>
 8006bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8006d24 <_dtoa_r+0x5bc>)
 8006bba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bbe:	ed93 7b00 	vldr	d7, [r3]
 8006bc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	ed8d 7b00 	vstr	d7, [sp]
 8006bca:	da03      	bge.n	8006bd4 <_dtoa_r+0x46c>
 8006bcc:	9b07      	ldr	r3, [sp, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f340 8101 	ble.w	8006dd6 <_dtoa_r+0x66e>
 8006bd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006bd8:	4656      	mov	r6, sl
 8006bda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bde:	4620      	mov	r0, r4
 8006be0:	4629      	mov	r1, r5
 8006be2:	f7f9 fe3b 	bl	800085c <__aeabi_ddiv>
 8006be6:	f7f9 ffbf 	bl	8000b68 <__aeabi_d2iz>
 8006bea:	4680      	mov	r8, r0
 8006bec:	f7f9 fca2 	bl	8000534 <__aeabi_i2d>
 8006bf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bf4:	f7f9 fd08 	bl	8000608 <__aeabi_dmul>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	4629      	mov	r1, r5
 8006c00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c04:	f7f9 fb48 	bl	8000298 <__aeabi_dsub>
 8006c08:	f806 4b01 	strb.w	r4, [r6], #1
 8006c0c:	9d07      	ldr	r5, [sp, #28]
 8006c0e:	eba6 040a 	sub.w	r4, r6, sl
 8006c12:	42a5      	cmp	r5, r4
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	f040 8117 	bne.w	8006e4a <_dtoa_r+0x6e2>
 8006c1c:	f7f9 fb3e 	bl	800029c <__adddf3>
 8006c20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c24:	4604      	mov	r4, r0
 8006c26:	460d      	mov	r5, r1
 8006c28:	f7f9 ff7e 	bl	8000b28 <__aeabi_dcmpgt>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	f040 80f9 	bne.w	8006e24 <_dtoa_r+0x6bc>
 8006c32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c36:	4620      	mov	r0, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	f7f9 ff4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c3e:	b118      	cbz	r0, 8006c48 <_dtoa_r+0x4e0>
 8006c40:	f018 0f01 	tst.w	r8, #1
 8006c44:	f040 80ee 	bne.w	8006e24 <_dtoa_r+0x6bc>
 8006c48:	4649      	mov	r1, r9
 8006c4a:	4658      	mov	r0, fp
 8006c4c:	f000 fbda 	bl	8007404 <_Bfree>
 8006c50:	2300      	movs	r3, #0
 8006c52:	7033      	strb	r3, [r6, #0]
 8006c54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c56:	3701      	adds	r7, #1
 8006c58:	601f      	str	r7, [r3, #0]
 8006c5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 831d 	beq.w	800729c <_dtoa_r+0xb34>
 8006c62:	601e      	str	r6, [r3, #0]
 8006c64:	e31a      	b.n	800729c <_dtoa_r+0xb34>
 8006c66:	07e2      	lsls	r2, r4, #31
 8006c68:	d505      	bpl.n	8006c76 <_dtoa_r+0x50e>
 8006c6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c6e:	f7f9 fccb 	bl	8000608 <__aeabi_dmul>
 8006c72:	3601      	adds	r6, #1
 8006c74:	2301      	movs	r3, #1
 8006c76:	1064      	asrs	r4, r4, #1
 8006c78:	3508      	adds	r5, #8
 8006c7a:	e73f      	b.n	8006afc <_dtoa_r+0x394>
 8006c7c:	2602      	movs	r6, #2
 8006c7e:	e742      	b.n	8006b06 <_dtoa_r+0x39e>
 8006c80:	9c07      	ldr	r4, [sp, #28]
 8006c82:	9704      	str	r7, [sp, #16]
 8006c84:	e761      	b.n	8006b4a <_dtoa_r+0x3e2>
 8006c86:	4b27      	ldr	r3, [pc, #156]	@ (8006d24 <_dtoa_r+0x5bc>)
 8006c88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c92:	4454      	add	r4, sl
 8006c94:	2900      	cmp	r1, #0
 8006c96:	d053      	beq.n	8006d40 <_dtoa_r+0x5d8>
 8006c98:	4928      	ldr	r1, [pc, #160]	@ (8006d3c <_dtoa_r+0x5d4>)
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	f7f9 fdde 	bl	800085c <__aeabi_ddiv>
 8006ca0:	4633      	mov	r3, r6
 8006ca2:	462a      	mov	r2, r5
 8006ca4:	f7f9 faf8 	bl	8000298 <__aeabi_dsub>
 8006ca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cac:	4656      	mov	r6, sl
 8006cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cb2:	f7f9 ff59 	bl	8000b68 <__aeabi_d2iz>
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	f7f9 fc3c 	bl	8000534 <__aeabi_i2d>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cc4:	f7f9 fae8 	bl	8000298 <__aeabi_dsub>
 8006cc8:	3530      	adds	r5, #48	@ 0x30
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cd2:	f806 5b01 	strb.w	r5, [r6], #1
 8006cd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cda:	f7f9 ff07 	bl	8000aec <__aeabi_dcmplt>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d171      	bne.n	8006dc6 <_dtoa_r+0x65e>
 8006ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ce6:	4911      	ldr	r1, [pc, #68]	@ (8006d2c <_dtoa_r+0x5c4>)
 8006ce8:	2000      	movs	r0, #0
 8006cea:	f7f9 fad5 	bl	8000298 <__aeabi_dsub>
 8006cee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cf2:	f7f9 fefb 	bl	8000aec <__aeabi_dcmplt>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f040 8095 	bne.w	8006e26 <_dtoa_r+0x6be>
 8006cfc:	42a6      	cmp	r6, r4
 8006cfe:	f43f af50 	beq.w	8006ba2 <_dtoa_r+0x43a>
 8006d02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d06:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <_dtoa_r+0x5c8>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f7f9 fc7d 	bl	8000608 <__aeabi_dmul>
 8006d0e:	4b08      	ldr	r3, [pc, #32]	@ (8006d30 <_dtoa_r+0x5c8>)
 8006d10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d14:	2200      	movs	r2, #0
 8006d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d1a:	f7f9 fc75 	bl	8000608 <__aeabi_dmul>
 8006d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d22:	e7c4      	b.n	8006cae <_dtoa_r+0x546>
 8006d24:	08008728 	.word	0x08008728
 8006d28:	08008700 	.word	0x08008700
 8006d2c:	3ff00000 	.word	0x3ff00000
 8006d30:	40240000 	.word	0x40240000
 8006d34:	401c0000 	.word	0x401c0000
 8006d38:	40140000 	.word	0x40140000
 8006d3c:	3fe00000 	.word	0x3fe00000
 8006d40:	4631      	mov	r1, r6
 8006d42:	4628      	mov	r0, r5
 8006d44:	f7f9 fc60 	bl	8000608 <__aeabi_dmul>
 8006d48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006d4e:	4656      	mov	r6, sl
 8006d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d54:	f7f9 ff08 	bl	8000b68 <__aeabi_d2iz>
 8006d58:	4605      	mov	r5, r0
 8006d5a:	f7f9 fbeb 	bl	8000534 <__aeabi_i2d>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d66:	f7f9 fa97 	bl	8000298 <__aeabi_dsub>
 8006d6a:	3530      	adds	r5, #48	@ 0x30
 8006d6c:	f806 5b01 	strb.w	r5, [r6], #1
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	42a6      	cmp	r6, r4
 8006d76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	d124      	bne.n	8006dca <_dtoa_r+0x662>
 8006d80:	4bac      	ldr	r3, [pc, #688]	@ (8007034 <_dtoa_r+0x8cc>)
 8006d82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d86:	f7f9 fa89 	bl	800029c <__adddf3>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d92:	f7f9 fec9 	bl	8000b28 <__aeabi_dcmpgt>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d145      	bne.n	8006e26 <_dtoa_r+0x6be>
 8006d9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d9e:	49a5      	ldr	r1, [pc, #660]	@ (8007034 <_dtoa_r+0x8cc>)
 8006da0:	2000      	movs	r0, #0
 8006da2:	f7f9 fa79 	bl	8000298 <__aeabi_dsub>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dae:	f7f9 fe9d 	bl	8000aec <__aeabi_dcmplt>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	f43f aef5 	beq.w	8006ba2 <_dtoa_r+0x43a>
 8006db8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006dba:	1e73      	subs	r3, r6, #1
 8006dbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8006dbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006dc2:	2b30      	cmp	r3, #48	@ 0x30
 8006dc4:	d0f8      	beq.n	8006db8 <_dtoa_r+0x650>
 8006dc6:	9f04      	ldr	r7, [sp, #16]
 8006dc8:	e73e      	b.n	8006c48 <_dtoa_r+0x4e0>
 8006dca:	4b9b      	ldr	r3, [pc, #620]	@ (8007038 <_dtoa_r+0x8d0>)
 8006dcc:	f7f9 fc1c 	bl	8000608 <__aeabi_dmul>
 8006dd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dd4:	e7bc      	b.n	8006d50 <_dtoa_r+0x5e8>
 8006dd6:	d10c      	bne.n	8006df2 <_dtoa_r+0x68a>
 8006dd8:	4b98      	ldr	r3, [pc, #608]	@ (800703c <_dtoa_r+0x8d4>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006de0:	f7f9 fc12 	bl	8000608 <__aeabi_dmul>
 8006de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006de8:	f7f9 fe94 	bl	8000b14 <__aeabi_dcmpge>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	f000 8157 	beq.w	80070a0 <_dtoa_r+0x938>
 8006df2:	2400      	movs	r4, #0
 8006df4:	4625      	mov	r5, r4
 8006df6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006df8:	43db      	mvns	r3, r3
 8006dfa:	9304      	str	r3, [sp, #16]
 8006dfc:	4656      	mov	r6, sl
 8006dfe:	2700      	movs	r7, #0
 8006e00:	4621      	mov	r1, r4
 8006e02:	4658      	mov	r0, fp
 8006e04:	f000 fafe 	bl	8007404 <_Bfree>
 8006e08:	2d00      	cmp	r5, #0
 8006e0a:	d0dc      	beq.n	8006dc6 <_dtoa_r+0x65e>
 8006e0c:	b12f      	cbz	r7, 8006e1a <_dtoa_r+0x6b2>
 8006e0e:	42af      	cmp	r7, r5
 8006e10:	d003      	beq.n	8006e1a <_dtoa_r+0x6b2>
 8006e12:	4639      	mov	r1, r7
 8006e14:	4658      	mov	r0, fp
 8006e16:	f000 faf5 	bl	8007404 <_Bfree>
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	4658      	mov	r0, fp
 8006e1e:	f000 faf1 	bl	8007404 <_Bfree>
 8006e22:	e7d0      	b.n	8006dc6 <_dtoa_r+0x65e>
 8006e24:	9704      	str	r7, [sp, #16]
 8006e26:	4633      	mov	r3, r6
 8006e28:	461e      	mov	r6, r3
 8006e2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e2e:	2a39      	cmp	r2, #57	@ 0x39
 8006e30:	d107      	bne.n	8006e42 <_dtoa_r+0x6da>
 8006e32:	459a      	cmp	sl, r3
 8006e34:	d1f8      	bne.n	8006e28 <_dtoa_r+0x6c0>
 8006e36:	9a04      	ldr	r2, [sp, #16]
 8006e38:	3201      	adds	r2, #1
 8006e3a:	9204      	str	r2, [sp, #16]
 8006e3c:	2230      	movs	r2, #48	@ 0x30
 8006e3e:	f88a 2000 	strb.w	r2, [sl]
 8006e42:	781a      	ldrb	r2, [r3, #0]
 8006e44:	3201      	adds	r2, #1
 8006e46:	701a      	strb	r2, [r3, #0]
 8006e48:	e7bd      	b.n	8006dc6 <_dtoa_r+0x65e>
 8006e4a:	4b7b      	ldr	r3, [pc, #492]	@ (8007038 <_dtoa_r+0x8d0>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f7f9 fbdb 	bl	8000608 <__aeabi_dmul>
 8006e52:	2200      	movs	r2, #0
 8006e54:	2300      	movs	r3, #0
 8006e56:	4604      	mov	r4, r0
 8006e58:	460d      	mov	r5, r1
 8006e5a:	f7f9 fe3d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f43f aebb 	beq.w	8006bda <_dtoa_r+0x472>
 8006e64:	e6f0      	b.n	8006c48 <_dtoa_r+0x4e0>
 8006e66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e68:	2a00      	cmp	r2, #0
 8006e6a:	f000 80db 	beq.w	8007024 <_dtoa_r+0x8bc>
 8006e6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e70:	2a01      	cmp	r2, #1
 8006e72:	f300 80bf 	bgt.w	8006ff4 <_dtoa_r+0x88c>
 8006e76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006e78:	2a00      	cmp	r2, #0
 8006e7a:	f000 80b7 	beq.w	8006fec <_dtoa_r+0x884>
 8006e7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006e82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e84:	4646      	mov	r6, r8
 8006e86:	9a08      	ldr	r2, [sp, #32]
 8006e88:	2101      	movs	r1, #1
 8006e8a:	441a      	add	r2, r3
 8006e8c:	4658      	mov	r0, fp
 8006e8e:	4498      	add	r8, r3
 8006e90:	9208      	str	r2, [sp, #32]
 8006e92:	f000 fb6b 	bl	800756c <__i2b>
 8006e96:	4605      	mov	r5, r0
 8006e98:	b15e      	cbz	r6, 8006eb2 <_dtoa_r+0x74a>
 8006e9a:	9b08      	ldr	r3, [sp, #32]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	dd08      	ble.n	8006eb2 <_dtoa_r+0x74a>
 8006ea0:	42b3      	cmp	r3, r6
 8006ea2:	9a08      	ldr	r2, [sp, #32]
 8006ea4:	bfa8      	it	ge
 8006ea6:	4633      	movge	r3, r6
 8006ea8:	eba8 0803 	sub.w	r8, r8, r3
 8006eac:	1af6      	subs	r6, r6, r3
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	9308      	str	r3, [sp, #32]
 8006eb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eb4:	b1f3      	cbz	r3, 8006ef4 <_dtoa_r+0x78c>
 8006eb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 80b7 	beq.w	800702c <_dtoa_r+0x8c4>
 8006ebe:	b18c      	cbz	r4, 8006ee4 <_dtoa_r+0x77c>
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4622      	mov	r2, r4
 8006ec4:	4658      	mov	r0, fp
 8006ec6:	f000 fc11 	bl	80076ec <__pow5mult>
 8006eca:	464a      	mov	r2, r9
 8006ecc:	4601      	mov	r1, r0
 8006ece:	4605      	mov	r5, r0
 8006ed0:	4658      	mov	r0, fp
 8006ed2:	f000 fb61 	bl	8007598 <__multiply>
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	9004      	str	r0, [sp, #16]
 8006eda:	4658      	mov	r0, fp
 8006edc:	f000 fa92 	bl	8007404 <_Bfree>
 8006ee0:	9b04      	ldr	r3, [sp, #16]
 8006ee2:	4699      	mov	r9, r3
 8006ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ee6:	1b1a      	subs	r2, r3, r4
 8006ee8:	d004      	beq.n	8006ef4 <_dtoa_r+0x78c>
 8006eea:	4649      	mov	r1, r9
 8006eec:	4658      	mov	r0, fp
 8006eee:	f000 fbfd 	bl	80076ec <__pow5mult>
 8006ef2:	4681      	mov	r9, r0
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	4658      	mov	r0, fp
 8006ef8:	f000 fb38 	bl	800756c <__i2b>
 8006efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006efe:	4604      	mov	r4, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 81cf 	beq.w	80072a4 <_dtoa_r+0xb3c>
 8006f06:	461a      	mov	r2, r3
 8006f08:	4601      	mov	r1, r0
 8006f0a:	4658      	mov	r0, fp
 8006f0c:	f000 fbee 	bl	80076ec <__pow5mult>
 8006f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	4604      	mov	r4, r0
 8006f16:	f300 8095 	bgt.w	8007044 <_dtoa_r+0x8dc>
 8006f1a:	9b02      	ldr	r3, [sp, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 8087 	bne.w	8007030 <_dtoa_r+0x8c8>
 8006f22:	9b03      	ldr	r3, [sp, #12]
 8006f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f040 8089 	bne.w	8007040 <_dtoa_r+0x8d8>
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f34:	0d1b      	lsrs	r3, r3, #20
 8006f36:	051b      	lsls	r3, r3, #20
 8006f38:	b12b      	cbz	r3, 8006f46 <_dtoa_r+0x7de>
 8006f3a:	9b08      	ldr	r3, [sp, #32]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	9308      	str	r3, [sp, #32]
 8006f40:	f108 0801 	add.w	r8, r8, #1
 8006f44:	2301      	movs	r3, #1
 8006f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 81b0 	beq.w	80072b0 <_dtoa_r+0xb48>
 8006f50:	6923      	ldr	r3, [r4, #16]
 8006f52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f56:	6918      	ldr	r0, [r3, #16]
 8006f58:	f000 fabc 	bl	80074d4 <__hi0bits>
 8006f5c:	f1c0 0020 	rsb	r0, r0, #32
 8006f60:	9b08      	ldr	r3, [sp, #32]
 8006f62:	4418      	add	r0, r3
 8006f64:	f010 001f 	ands.w	r0, r0, #31
 8006f68:	d077      	beq.n	800705a <_dtoa_r+0x8f2>
 8006f6a:	f1c0 0320 	rsb	r3, r0, #32
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	dd6b      	ble.n	800704a <_dtoa_r+0x8e2>
 8006f72:	9b08      	ldr	r3, [sp, #32]
 8006f74:	f1c0 001c 	rsb	r0, r0, #28
 8006f78:	4403      	add	r3, r0
 8006f7a:	4480      	add	r8, r0
 8006f7c:	4406      	add	r6, r0
 8006f7e:	9308      	str	r3, [sp, #32]
 8006f80:	f1b8 0f00 	cmp.w	r8, #0
 8006f84:	dd05      	ble.n	8006f92 <_dtoa_r+0x82a>
 8006f86:	4649      	mov	r1, r9
 8006f88:	4642      	mov	r2, r8
 8006f8a:	4658      	mov	r0, fp
 8006f8c:	f000 fc08 	bl	80077a0 <__lshift>
 8006f90:	4681      	mov	r9, r0
 8006f92:	9b08      	ldr	r3, [sp, #32]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	dd05      	ble.n	8006fa4 <_dtoa_r+0x83c>
 8006f98:	4621      	mov	r1, r4
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	4658      	mov	r0, fp
 8006f9e:	f000 fbff 	bl	80077a0 <__lshift>
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d059      	beq.n	800705e <_dtoa_r+0x8f6>
 8006faa:	4621      	mov	r1, r4
 8006fac:	4648      	mov	r0, r9
 8006fae:	f000 fc63 	bl	8007878 <__mcmp>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	da53      	bge.n	800705e <_dtoa_r+0x8f6>
 8006fb6:	1e7b      	subs	r3, r7, #1
 8006fb8:	9304      	str	r3, [sp, #16]
 8006fba:	4649      	mov	r1, r9
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	220a      	movs	r2, #10
 8006fc0:	4658      	mov	r0, fp
 8006fc2:	f000 fa41 	bl	8007448 <__multadd>
 8006fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fc8:	4681      	mov	r9, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 8172 	beq.w	80072b4 <_dtoa_r+0xb4c>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	220a      	movs	r2, #10
 8006fd6:	4658      	mov	r0, fp
 8006fd8:	f000 fa36 	bl	8007448 <__multadd>
 8006fdc:	9b00      	ldr	r3, [sp, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	dc67      	bgt.n	80070b4 <_dtoa_r+0x94c>
 8006fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	dc41      	bgt.n	800706e <_dtoa_r+0x906>
 8006fea:	e063      	b.n	80070b4 <_dtoa_r+0x94c>
 8006fec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006fee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006ff2:	e746      	b.n	8006e82 <_dtoa_r+0x71a>
 8006ff4:	9b07      	ldr	r3, [sp, #28]
 8006ff6:	1e5c      	subs	r4, r3, #1
 8006ff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ffa:	42a3      	cmp	r3, r4
 8006ffc:	bfbf      	itttt	lt
 8006ffe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007000:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007002:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007004:	1ae3      	sublt	r3, r4, r3
 8007006:	bfb4      	ite	lt
 8007008:	18d2      	addlt	r2, r2, r3
 800700a:	1b1c      	subge	r4, r3, r4
 800700c:	9b07      	ldr	r3, [sp, #28]
 800700e:	bfbc      	itt	lt
 8007010:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007012:	2400      	movlt	r4, #0
 8007014:	2b00      	cmp	r3, #0
 8007016:	bfb5      	itete	lt
 8007018:	eba8 0603 	sublt.w	r6, r8, r3
 800701c:	9b07      	ldrge	r3, [sp, #28]
 800701e:	2300      	movlt	r3, #0
 8007020:	4646      	movge	r6, r8
 8007022:	e730      	b.n	8006e86 <_dtoa_r+0x71e>
 8007024:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007026:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007028:	4646      	mov	r6, r8
 800702a:	e735      	b.n	8006e98 <_dtoa_r+0x730>
 800702c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800702e:	e75c      	b.n	8006eea <_dtoa_r+0x782>
 8007030:	2300      	movs	r3, #0
 8007032:	e788      	b.n	8006f46 <_dtoa_r+0x7de>
 8007034:	3fe00000 	.word	0x3fe00000
 8007038:	40240000 	.word	0x40240000
 800703c:	40140000 	.word	0x40140000
 8007040:	9b02      	ldr	r3, [sp, #8]
 8007042:	e780      	b.n	8006f46 <_dtoa_r+0x7de>
 8007044:	2300      	movs	r3, #0
 8007046:	930a      	str	r3, [sp, #40]	@ 0x28
 8007048:	e782      	b.n	8006f50 <_dtoa_r+0x7e8>
 800704a:	d099      	beq.n	8006f80 <_dtoa_r+0x818>
 800704c:	9a08      	ldr	r2, [sp, #32]
 800704e:	331c      	adds	r3, #28
 8007050:	441a      	add	r2, r3
 8007052:	4498      	add	r8, r3
 8007054:	441e      	add	r6, r3
 8007056:	9208      	str	r2, [sp, #32]
 8007058:	e792      	b.n	8006f80 <_dtoa_r+0x818>
 800705a:	4603      	mov	r3, r0
 800705c:	e7f6      	b.n	800704c <_dtoa_r+0x8e4>
 800705e:	9b07      	ldr	r3, [sp, #28]
 8007060:	9704      	str	r7, [sp, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	dc20      	bgt.n	80070a8 <_dtoa_r+0x940>
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800706a:	2b02      	cmp	r3, #2
 800706c:	dd1e      	ble.n	80070ac <_dtoa_r+0x944>
 800706e:	9b00      	ldr	r3, [sp, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f47f aec0 	bne.w	8006df6 <_dtoa_r+0x68e>
 8007076:	4621      	mov	r1, r4
 8007078:	2205      	movs	r2, #5
 800707a:	4658      	mov	r0, fp
 800707c:	f000 f9e4 	bl	8007448 <__multadd>
 8007080:	4601      	mov	r1, r0
 8007082:	4604      	mov	r4, r0
 8007084:	4648      	mov	r0, r9
 8007086:	f000 fbf7 	bl	8007878 <__mcmp>
 800708a:	2800      	cmp	r0, #0
 800708c:	f77f aeb3 	ble.w	8006df6 <_dtoa_r+0x68e>
 8007090:	4656      	mov	r6, sl
 8007092:	2331      	movs	r3, #49	@ 0x31
 8007094:	f806 3b01 	strb.w	r3, [r6], #1
 8007098:	9b04      	ldr	r3, [sp, #16]
 800709a:	3301      	adds	r3, #1
 800709c:	9304      	str	r3, [sp, #16]
 800709e:	e6ae      	b.n	8006dfe <_dtoa_r+0x696>
 80070a0:	9c07      	ldr	r4, [sp, #28]
 80070a2:	9704      	str	r7, [sp, #16]
 80070a4:	4625      	mov	r5, r4
 80070a6:	e7f3      	b.n	8007090 <_dtoa_r+0x928>
 80070a8:	9b07      	ldr	r3, [sp, #28]
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 8104 	beq.w	80072bc <_dtoa_r+0xb54>
 80070b4:	2e00      	cmp	r6, #0
 80070b6:	dd05      	ble.n	80070c4 <_dtoa_r+0x95c>
 80070b8:	4629      	mov	r1, r5
 80070ba:	4632      	mov	r2, r6
 80070bc:	4658      	mov	r0, fp
 80070be:	f000 fb6f 	bl	80077a0 <__lshift>
 80070c2:	4605      	mov	r5, r0
 80070c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d05a      	beq.n	8007180 <_dtoa_r+0xa18>
 80070ca:	6869      	ldr	r1, [r5, #4]
 80070cc:	4658      	mov	r0, fp
 80070ce:	f000 f959 	bl	8007384 <_Balloc>
 80070d2:	4606      	mov	r6, r0
 80070d4:	b928      	cbnz	r0, 80070e2 <_dtoa_r+0x97a>
 80070d6:	4b84      	ldr	r3, [pc, #528]	@ (80072e8 <_dtoa_r+0xb80>)
 80070d8:	4602      	mov	r2, r0
 80070da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80070de:	f7ff bb5a 	b.w	8006796 <_dtoa_r+0x2e>
 80070e2:	692a      	ldr	r2, [r5, #16]
 80070e4:	3202      	adds	r2, #2
 80070e6:	0092      	lsls	r2, r2, #2
 80070e8:	f105 010c 	add.w	r1, r5, #12
 80070ec:	300c      	adds	r0, #12
 80070ee:	f000 ff4d 	bl	8007f8c <memcpy>
 80070f2:	2201      	movs	r2, #1
 80070f4:	4631      	mov	r1, r6
 80070f6:	4658      	mov	r0, fp
 80070f8:	f000 fb52 	bl	80077a0 <__lshift>
 80070fc:	f10a 0301 	add.w	r3, sl, #1
 8007100:	9307      	str	r3, [sp, #28]
 8007102:	9b00      	ldr	r3, [sp, #0]
 8007104:	4453      	add	r3, sl
 8007106:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007108:	9b02      	ldr	r3, [sp, #8]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	462f      	mov	r7, r5
 8007110:	930a      	str	r3, [sp, #40]	@ 0x28
 8007112:	4605      	mov	r5, r0
 8007114:	9b07      	ldr	r3, [sp, #28]
 8007116:	4621      	mov	r1, r4
 8007118:	3b01      	subs	r3, #1
 800711a:	4648      	mov	r0, r9
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	f7ff fa9a 	bl	8006656 <quorem>
 8007122:	4639      	mov	r1, r7
 8007124:	9002      	str	r0, [sp, #8]
 8007126:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800712a:	4648      	mov	r0, r9
 800712c:	f000 fba4 	bl	8007878 <__mcmp>
 8007130:	462a      	mov	r2, r5
 8007132:	9008      	str	r0, [sp, #32]
 8007134:	4621      	mov	r1, r4
 8007136:	4658      	mov	r0, fp
 8007138:	f000 fbba 	bl	80078b0 <__mdiff>
 800713c:	68c2      	ldr	r2, [r0, #12]
 800713e:	4606      	mov	r6, r0
 8007140:	bb02      	cbnz	r2, 8007184 <_dtoa_r+0xa1c>
 8007142:	4601      	mov	r1, r0
 8007144:	4648      	mov	r0, r9
 8007146:	f000 fb97 	bl	8007878 <__mcmp>
 800714a:	4602      	mov	r2, r0
 800714c:	4631      	mov	r1, r6
 800714e:	4658      	mov	r0, fp
 8007150:	920e      	str	r2, [sp, #56]	@ 0x38
 8007152:	f000 f957 	bl	8007404 <_Bfree>
 8007156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007158:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800715a:	9e07      	ldr	r6, [sp, #28]
 800715c:	ea43 0102 	orr.w	r1, r3, r2
 8007160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007162:	4319      	orrs	r1, r3
 8007164:	d110      	bne.n	8007188 <_dtoa_r+0xa20>
 8007166:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800716a:	d029      	beq.n	80071c0 <_dtoa_r+0xa58>
 800716c:	9b08      	ldr	r3, [sp, #32]
 800716e:	2b00      	cmp	r3, #0
 8007170:	dd02      	ble.n	8007178 <_dtoa_r+0xa10>
 8007172:	9b02      	ldr	r3, [sp, #8]
 8007174:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007178:	9b00      	ldr	r3, [sp, #0]
 800717a:	f883 8000 	strb.w	r8, [r3]
 800717e:	e63f      	b.n	8006e00 <_dtoa_r+0x698>
 8007180:	4628      	mov	r0, r5
 8007182:	e7bb      	b.n	80070fc <_dtoa_r+0x994>
 8007184:	2201      	movs	r2, #1
 8007186:	e7e1      	b.n	800714c <_dtoa_r+0x9e4>
 8007188:	9b08      	ldr	r3, [sp, #32]
 800718a:	2b00      	cmp	r3, #0
 800718c:	db04      	blt.n	8007198 <_dtoa_r+0xa30>
 800718e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007190:	430b      	orrs	r3, r1
 8007192:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007194:	430b      	orrs	r3, r1
 8007196:	d120      	bne.n	80071da <_dtoa_r+0xa72>
 8007198:	2a00      	cmp	r2, #0
 800719a:	dded      	ble.n	8007178 <_dtoa_r+0xa10>
 800719c:	4649      	mov	r1, r9
 800719e:	2201      	movs	r2, #1
 80071a0:	4658      	mov	r0, fp
 80071a2:	f000 fafd 	bl	80077a0 <__lshift>
 80071a6:	4621      	mov	r1, r4
 80071a8:	4681      	mov	r9, r0
 80071aa:	f000 fb65 	bl	8007878 <__mcmp>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	dc03      	bgt.n	80071ba <_dtoa_r+0xa52>
 80071b2:	d1e1      	bne.n	8007178 <_dtoa_r+0xa10>
 80071b4:	f018 0f01 	tst.w	r8, #1
 80071b8:	d0de      	beq.n	8007178 <_dtoa_r+0xa10>
 80071ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071be:	d1d8      	bne.n	8007172 <_dtoa_r+0xa0a>
 80071c0:	9a00      	ldr	r2, [sp, #0]
 80071c2:	2339      	movs	r3, #57	@ 0x39
 80071c4:	7013      	strb	r3, [r2, #0]
 80071c6:	4633      	mov	r3, r6
 80071c8:	461e      	mov	r6, r3
 80071ca:	3b01      	subs	r3, #1
 80071cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80071d0:	2a39      	cmp	r2, #57	@ 0x39
 80071d2:	d052      	beq.n	800727a <_dtoa_r+0xb12>
 80071d4:	3201      	adds	r2, #1
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	e612      	b.n	8006e00 <_dtoa_r+0x698>
 80071da:	2a00      	cmp	r2, #0
 80071dc:	dd07      	ble.n	80071ee <_dtoa_r+0xa86>
 80071de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071e2:	d0ed      	beq.n	80071c0 <_dtoa_r+0xa58>
 80071e4:	9a00      	ldr	r2, [sp, #0]
 80071e6:	f108 0301 	add.w	r3, r8, #1
 80071ea:	7013      	strb	r3, [r2, #0]
 80071ec:	e608      	b.n	8006e00 <_dtoa_r+0x698>
 80071ee:	9b07      	ldr	r3, [sp, #28]
 80071f0:	9a07      	ldr	r2, [sp, #28]
 80071f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80071f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d028      	beq.n	800724e <_dtoa_r+0xae6>
 80071fc:	4649      	mov	r1, r9
 80071fe:	2300      	movs	r3, #0
 8007200:	220a      	movs	r2, #10
 8007202:	4658      	mov	r0, fp
 8007204:	f000 f920 	bl	8007448 <__multadd>
 8007208:	42af      	cmp	r7, r5
 800720a:	4681      	mov	r9, r0
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	f04f 020a 	mov.w	r2, #10
 8007214:	4639      	mov	r1, r7
 8007216:	4658      	mov	r0, fp
 8007218:	d107      	bne.n	800722a <_dtoa_r+0xac2>
 800721a:	f000 f915 	bl	8007448 <__multadd>
 800721e:	4607      	mov	r7, r0
 8007220:	4605      	mov	r5, r0
 8007222:	9b07      	ldr	r3, [sp, #28]
 8007224:	3301      	adds	r3, #1
 8007226:	9307      	str	r3, [sp, #28]
 8007228:	e774      	b.n	8007114 <_dtoa_r+0x9ac>
 800722a:	f000 f90d 	bl	8007448 <__multadd>
 800722e:	4629      	mov	r1, r5
 8007230:	4607      	mov	r7, r0
 8007232:	2300      	movs	r3, #0
 8007234:	220a      	movs	r2, #10
 8007236:	4658      	mov	r0, fp
 8007238:	f000 f906 	bl	8007448 <__multadd>
 800723c:	4605      	mov	r5, r0
 800723e:	e7f0      	b.n	8007222 <_dtoa_r+0xaba>
 8007240:	9b00      	ldr	r3, [sp, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	bfcc      	ite	gt
 8007246:	461e      	movgt	r6, r3
 8007248:	2601      	movle	r6, #1
 800724a:	4456      	add	r6, sl
 800724c:	2700      	movs	r7, #0
 800724e:	4649      	mov	r1, r9
 8007250:	2201      	movs	r2, #1
 8007252:	4658      	mov	r0, fp
 8007254:	f000 faa4 	bl	80077a0 <__lshift>
 8007258:	4621      	mov	r1, r4
 800725a:	4681      	mov	r9, r0
 800725c:	f000 fb0c 	bl	8007878 <__mcmp>
 8007260:	2800      	cmp	r0, #0
 8007262:	dcb0      	bgt.n	80071c6 <_dtoa_r+0xa5e>
 8007264:	d102      	bne.n	800726c <_dtoa_r+0xb04>
 8007266:	f018 0f01 	tst.w	r8, #1
 800726a:	d1ac      	bne.n	80071c6 <_dtoa_r+0xa5e>
 800726c:	4633      	mov	r3, r6
 800726e:	461e      	mov	r6, r3
 8007270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007274:	2a30      	cmp	r2, #48	@ 0x30
 8007276:	d0fa      	beq.n	800726e <_dtoa_r+0xb06>
 8007278:	e5c2      	b.n	8006e00 <_dtoa_r+0x698>
 800727a:	459a      	cmp	sl, r3
 800727c:	d1a4      	bne.n	80071c8 <_dtoa_r+0xa60>
 800727e:	9b04      	ldr	r3, [sp, #16]
 8007280:	3301      	adds	r3, #1
 8007282:	9304      	str	r3, [sp, #16]
 8007284:	2331      	movs	r3, #49	@ 0x31
 8007286:	f88a 3000 	strb.w	r3, [sl]
 800728a:	e5b9      	b.n	8006e00 <_dtoa_r+0x698>
 800728c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800728e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80072ec <_dtoa_r+0xb84>
 8007292:	b11b      	cbz	r3, 800729c <_dtoa_r+0xb34>
 8007294:	f10a 0308 	add.w	r3, sl, #8
 8007298:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	4650      	mov	r0, sl
 800729e:	b019      	add	sp, #100	@ 0x64
 80072a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	f77f ae37 	ble.w	8006f1a <_dtoa_r+0x7b2>
 80072ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80072b0:	2001      	movs	r0, #1
 80072b2:	e655      	b.n	8006f60 <_dtoa_r+0x7f8>
 80072b4:	9b00      	ldr	r3, [sp, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f77f aed6 	ble.w	8007068 <_dtoa_r+0x900>
 80072bc:	4656      	mov	r6, sl
 80072be:	4621      	mov	r1, r4
 80072c0:	4648      	mov	r0, r9
 80072c2:	f7ff f9c8 	bl	8006656 <quorem>
 80072c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072ca:	f806 8b01 	strb.w	r8, [r6], #1
 80072ce:	9b00      	ldr	r3, [sp, #0]
 80072d0:	eba6 020a 	sub.w	r2, r6, sl
 80072d4:	4293      	cmp	r3, r2
 80072d6:	ddb3      	ble.n	8007240 <_dtoa_r+0xad8>
 80072d8:	4649      	mov	r1, r9
 80072da:	2300      	movs	r3, #0
 80072dc:	220a      	movs	r2, #10
 80072de:	4658      	mov	r0, fp
 80072e0:	f000 f8b2 	bl	8007448 <__multadd>
 80072e4:	4681      	mov	r9, r0
 80072e6:	e7ea      	b.n	80072be <_dtoa_r+0xb56>
 80072e8:	08008688 	.word	0x08008688
 80072ec:	0800860c 	.word	0x0800860c

080072f0 <_free_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4605      	mov	r5, r0
 80072f4:	2900      	cmp	r1, #0
 80072f6:	d041      	beq.n	800737c <_free_r+0x8c>
 80072f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072fc:	1f0c      	subs	r4, r1, #4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bfb8      	it	lt
 8007302:	18e4      	addlt	r4, r4, r3
 8007304:	f7fe fb82 	bl	8005a0c <__malloc_lock>
 8007308:	4a1d      	ldr	r2, [pc, #116]	@ (8007380 <_free_r+0x90>)
 800730a:	6813      	ldr	r3, [r2, #0]
 800730c:	b933      	cbnz	r3, 800731c <_free_r+0x2c>
 800730e:	6063      	str	r3, [r4, #4]
 8007310:	6014      	str	r4, [r2, #0]
 8007312:	4628      	mov	r0, r5
 8007314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007318:	f7fe bb7e 	b.w	8005a18 <__malloc_unlock>
 800731c:	42a3      	cmp	r3, r4
 800731e:	d908      	bls.n	8007332 <_free_r+0x42>
 8007320:	6820      	ldr	r0, [r4, #0]
 8007322:	1821      	adds	r1, r4, r0
 8007324:	428b      	cmp	r3, r1
 8007326:	bf01      	itttt	eq
 8007328:	6819      	ldreq	r1, [r3, #0]
 800732a:	685b      	ldreq	r3, [r3, #4]
 800732c:	1809      	addeq	r1, r1, r0
 800732e:	6021      	streq	r1, [r4, #0]
 8007330:	e7ed      	b.n	800730e <_free_r+0x1e>
 8007332:	461a      	mov	r2, r3
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	b10b      	cbz	r3, 800733c <_free_r+0x4c>
 8007338:	42a3      	cmp	r3, r4
 800733a:	d9fa      	bls.n	8007332 <_free_r+0x42>
 800733c:	6811      	ldr	r1, [r2, #0]
 800733e:	1850      	adds	r0, r2, r1
 8007340:	42a0      	cmp	r0, r4
 8007342:	d10b      	bne.n	800735c <_free_r+0x6c>
 8007344:	6820      	ldr	r0, [r4, #0]
 8007346:	4401      	add	r1, r0
 8007348:	1850      	adds	r0, r2, r1
 800734a:	4283      	cmp	r3, r0
 800734c:	6011      	str	r1, [r2, #0]
 800734e:	d1e0      	bne.n	8007312 <_free_r+0x22>
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	6053      	str	r3, [r2, #4]
 8007356:	4408      	add	r0, r1
 8007358:	6010      	str	r0, [r2, #0]
 800735a:	e7da      	b.n	8007312 <_free_r+0x22>
 800735c:	d902      	bls.n	8007364 <_free_r+0x74>
 800735e:	230c      	movs	r3, #12
 8007360:	602b      	str	r3, [r5, #0]
 8007362:	e7d6      	b.n	8007312 <_free_r+0x22>
 8007364:	6820      	ldr	r0, [r4, #0]
 8007366:	1821      	adds	r1, r4, r0
 8007368:	428b      	cmp	r3, r1
 800736a:	bf04      	itt	eq
 800736c:	6819      	ldreq	r1, [r3, #0]
 800736e:	685b      	ldreq	r3, [r3, #4]
 8007370:	6063      	str	r3, [r4, #4]
 8007372:	bf04      	itt	eq
 8007374:	1809      	addeq	r1, r1, r0
 8007376:	6021      	streq	r1, [r4, #0]
 8007378:	6054      	str	r4, [r2, #4]
 800737a:	e7ca      	b.n	8007312 <_free_r+0x22>
 800737c:	bd38      	pop	{r3, r4, r5, pc}
 800737e:	bf00      	nop
 8007380:	2000055c 	.word	0x2000055c

08007384 <_Balloc>:
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	69c6      	ldr	r6, [r0, #28]
 8007388:	4604      	mov	r4, r0
 800738a:	460d      	mov	r5, r1
 800738c:	b976      	cbnz	r6, 80073ac <_Balloc+0x28>
 800738e:	2010      	movs	r0, #16
 8007390:	f7fe fa92 	bl	80058b8 <malloc>
 8007394:	4602      	mov	r2, r0
 8007396:	61e0      	str	r0, [r4, #28]
 8007398:	b920      	cbnz	r0, 80073a4 <_Balloc+0x20>
 800739a:	4b18      	ldr	r3, [pc, #96]	@ (80073fc <_Balloc+0x78>)
 800739c:	4818      	ldr	r0, [pc, #96]	@ (8007400 <_Balloc+0x7c>)
 800739e:	216b      	movs	r1, #107	@ 0x6b
 80073a0:	f000 fe02 	bl	8007fa8 <__assert_func>
 80073a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073a8:	6006      	str	r6, [r0, #0]
 80073aa:	60c6      	str	r6, [r0, #12]
 80073ac:	69e6      	ldr	r6, [r4, #28]
 80073ae:	68f3      	ldr	r3, [r6, #12]
 80073b0:	b183      	cbz	r3, 80073d4 <_Balloc+0x50>
 80073b2:	69e3      	ldr	r3, [r4, #28]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073ba:	b9b8      	cbnz	r0, 80073ec <_Balloc+0x68>
 80073bc:	2101      	movs	r1, #1
 80073be:	fa01 f605 	lsl.w	r6, r1, r5
 80073c2:	1d72      	adds	r2, r6, #5
 80073c4:	0092      	lsls	r2, r2, #2
 80073c6:	4620      	mov	r0, r4
 80073c8:	f7fe fa62 	bl	8005890 <_calloc_r>
 80073cc:	b160      	cbz	r0, 80073e8 <_Balloc+0x64>
 80073ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073d2:	e00e      	b.n	80073f2 <_Balloc+0x6e>
 80073d4:	2221      	movs	r2, #33	@ 0x21
 80073d6:	2104      	movs	r1, #4
 80073d8:	4620      	mov	r0, r4
 80073da:	f7fe fa59 	bl	8005890 <_calloc_r>
 80073de:	69e3      	ldr	r3, [r4, #28]
 80073e0:	60f0      	str	r0, [r6, #12]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e4      	bne.n	80073b2 <_Balloc+0x2e>
 80073e8:	2000      	movs	r0, #0
 80073ea:	bd70      	pop	{r4, r5, r6, pc}
 80073ec:	6802      	ldr	r2, [r0, #0]
 80073ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073f2:	2300      	movs	r3, #0
 80073f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073f8:	e7f7      	b.n	80073ea <_Balloc+0x66>
 80073fa:	bf00      	nop
 80073fc:	08008619 	.word	0x08008619
 8007400:	08008699 	.word	0x08008699

08007404 <_Bfree>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	69c6      	ldr	r6, [r0, #28]
 8007408:	4605      	mov	r5, r0
 800740a:	460c      	mov	r4, r1
 800740c:	b976      	cbnz	r6, 800742c <_Bfree+0x28>
 800740e:	2010      	movs	r0, #16
 8007410:	f7fe fa52 	bl	80058b8 <malloc>
 8007414:	4602      	mov	r2, r0
 8007416:	61e8      	str	r0, [r5, #28]
 8007418:	b920      	cbnz	r0, 8007424 <_Bfree+0x20>
 800741a:	4b09      	ldr	r3, [pc, #36]	@ (8007440 <_Bfree+0x3c>)
 800741c:	4809      	ldr	r0, [pc, #36]	@ (8007444 <_Bfree+0x40>)
 800741e:	218f      	movs	r1, #143	@ 0x8f
 8007420:	f000 fdc2 	bl	8007fa8 <__assert_func>
 8007424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007428:	6006      	str	r6, [r0, #0]
 800742a:	60c6      	str	r6, [r0, #12]
 800742c:	b13c      	cbz	r4, 800743e <_Bfree+0x3a>
 800742e:	69eb      	ldr	r3, [r5, #28]
 8007430:	6862      	ldr	r2, [r4, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007438:	6021      	str	r1, [r4, #0]
 800743a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800743e:	bd70      	pop	{r4, r5, r6, pc}
 8007440:	08008619 	.word	0x08008619
 8007444:	08008699 	.word	0x08008699

08007448 <__multadd>:
 8007448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800744c:	690d      	ldr	r5, [r1, #16]
 800744e:	4607      	mov	r7, r0
 8007450:	460c      	mov	r4, r1
 8007452:	461e      	mov	r6, r3
 8007454:	f101 0c14 	add.w	ip, r1, #20
 8007458:	2000      	movs	r0, #0
 800745a:	f8dc 3000 	ldr.w	r3, [ip]
 800745e:	b299      	uxth	r1, r3
 8007460:	fb02 6101 	mla	r1, r2, r1, r6
 8007464:	0c1e      	lsrs	r6, r3, #16
 8007466:	0c0b      	lsrs	r3, r1, #16
 8007468:	fb02 3306 	mla	r3, r2, r6, r3
 800746c:	b289      	uxth	r1, r1
 800746e:	3001      	adds	r0, #1
 8007470:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007474:	4285      	cmp	r5, r0
 8007476:	f84c 1b04 	str.w	r1, [ip], #4
 800747a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800747e:	dcec      	bgt.n	800745a <__multadd+0x12>
 8007480:	b30e      	cbz	r6, 80074c6 <__multadd+0x7e>
 8007482:	68a3      	ldr	r3, [r4, #8]
 8007484:	42ab      	cmp	r3, r5
 8007486:	dc19      	bgt.n	80074bc <__multadd+0x74>
 8007488:	6861      	ldr	r1, [r4, #4]
 800748a:	4638      	mov	r0, r7
 800748c:	3101      	adds	r1, #1
 800748e:	f7ff ff79 	bl	8007384 <_Balloc>
 8007492:	4680      	mov	r8, r0
 8007494:	b928      	cbnz	r0, 80074a2 <__multadd+0x5a>
 8007496:	4602      	mov	r2, r0
 8007498:	4b0c      	ldr	r3, [pc, #48]	@ (80074cc <__multadd+0x84>)
 800749a:	480d      	ldr	r0, [pc, #52]	@ (80074d0 <__multadd+0x88>)
 800749c:	21ba      	movs	r1, #186	@ 0xba
 800749e:	f000 fd83 	bl	8007fa8 <__assert_func>
 80074a2:	6922      	ldr	r2, [r4, #16]
 80074a4:	3202      	adds	r2, #2
 80074a6:	f104 010c 	add.w	r1, r4, #12
 80074aa:	0092      	lsls	r2, r2, #2
 80074ac:	300c      	adds	r0, #12
 80074ae:	f000 fd6d 	bl	8007f8c <memcpy>
 80074b2:	4621      	mov	r1, r4
 80074b4:	4638      	mov	r0, r7
 80074b6:	f7ff ffa5 	bl	8007404 <_Bfree>
 80074ba:	4644      	mov	r4, r8
 80074bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074c0:	3501      	adds	r5, #1
 80074c2:	615e      	str	r6, [r3, #20]
 80074c4:	6125      	str	r5, [r4, #16]
 80074c6:	4620      	mov	r0, r4
 80074c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074cc:	08008688 	.word	0x08008688
 80074d0:	08008699 	.word	0x08008699

080074d4 <__hi0bits>:
 80074d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80074d8:	4603      	mov	r3, r0
 80074da:	bf36      	itet	cc
 80074dc:	0403      	lslcc	r3, r0, #16
 80074de:	2000      	movcs	r0, #0
 80074e0:	2010      	movcc	r0, #16
 80074e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074e6:	bf3c      	itt	cc
 80074e8:	021b      	lslcc	r3, r3, #8
 80074ea:	3008      	addcc	r0, #8
 80074ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074f0:	bf3c      	itt	cc
 80074f2:	011b      	lslcc	r3, r3, #4
 80074f4:	3004      	addcc	r0, #4
 80074f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074fa:	bf3c      	itt	cc
 80074fc:	009b      	lslcc	r3, r3, #2
 80074fe:	3002      	addcc	r0, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	db05      	blt.n	8007510 <__hi0bits+0x3c>
 8007504:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007508:	f100 0001 	add.w	r0, r0, #1
 800750c:	bf08      	it	eq
 800750e:	2020      	moveq	r0, #32
 8007510:	4770      	bx	lr

08007512 <__lo0bits>:
 8007512:	6803      	ldr	r3, [r0, #0]
 8007514:	4602      	mov	r2, r0
 8007516:	f013 0007 	ands.w	r0, r3, #7
 800751a:	d00b      	beq.n	8007534 <__lo0bits+0x22>
 800751c:	07d9      	lsls	r1, r3, #31
 800751e:	d421      	bmi.n	8007564 <__lo0bits+0x52>
 8007520:	0798      	lsls	r0, r3, #30
 8007522:	bf49      	itett	mi
 8007524:	085b      	lsrmi	r3, r3, #1
 8007526:	089b      	lsrpl	r3, r3, #2
 8007528:	2001      	movmi	r0, #1
 800752a:	6013      	strmi	r3, [r2, #0]
 800752c:	bf5c      	itt	pl
 800752e:	6013      	strpl	r3, [r2, #0]
 8007530:	2002      	movpl	r0, #2
 8007532:	4770      	bx	lr
 8007534:	b299      	uxth	r1, r3
 8007536:	b909      	cbnz	r1, 800753c <__lo0bits+0x2a>
 8007538:	0c1b      	lsrs	r3, r3, #16
 800753a:	2010      	movs	r0, #16
 800753c:	b2d9      	uxtb	r1, r3
 800753e:	b909      	cbnz	r1, 8007544 <__lo0bits+0x32>
 8007540:	3008      	adds	r0, #8
 8007542:	0a1b      	lsrs	r3, r3, #8
 8007544:	0719      	lsls	r1, r3, #28
 8007546:	bf04      	itt	eq
 8007548:	091b      	lsreq	r3, r3, #4
 800754a:	3004      	addeq	r0, #4
 800754c:	0799      	lsls	r1, r3, #30
 800754e:	bf04      	itt	eq
 8007550:	089b      	lsreq	r3, r3, #2
 8007552:	3002      	addeq	r0, #2
 8007554:	07d9      	lsls	r1, r3, #31
 8007556:	d403      	bmi.n	8007560 <__lo0bits+0x4e>
 8007558:	085b      	lsrs	r3, r3, #1
 800755a:	f100 0001 	add.w	r0, r0, #1
 800755e:	d003      	beq.n	8007568 <__lo0bits+0x56>
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	4770      	bx	lr
 8007564:	2000      	movs	r0, #0
 8007566:	4770      	bx	lr
 8007568:	2020      	movs	r0, #32
 800756a:	4770      	bx	lr

0800756c <__i2b>:
 800756c:	b510      	push	{r4, lr}
 800756e:	460c      	mov	r4, r1
 8007570:	2101      	movs	r1, #1
 8007572:	f7ff ff07 	bl	8007384 <_Balloc>
 8007576:	4602      	mov	r2, r0
 8007578:	b928      	cbnz	r0, 8007586 <__i2b+0x1a>
 800757a:	4b05      	ldr	r3, [pc, #20]	@ (8007590 <__i2b+0x24>)
 800757c:	4805      	ldr	r0, [pc, #20]	@ (8007594 <__i2b+0x28>)
 800757e:	f240 1145 	movw	r1, #325	@ 0x145
 8007582:	f000 fd11 	bl	8007fa8 <__assert_func>
 8007586:	2301      	movs	r3, #1
 8007588:	6144      	str	r4, [r0, #20]
 800758a:	6103      	str	r3, [r0, #16]
 800758c:	bd10      	pop	{r4, pc}
 800758e:	bf00      	nop
 8007590:	08008688 	.word	0x08008688
 8007594:	08008699 	.word	0x08008699

08007598 <__multiply>:
 8007598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759c:	4614      	mov	r4, r2
 800759e:	690a      	ldr	r2, [r1, #16]
 80075a0:	6923      	ldr	r3, [r4, #16]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	bfa8      	it	ge
 80075a6:	4623      	movge	r3, r4
 80075a8:	460f      	mov	r7, r1
 80075aa:	bfa4      	itt	ge
 80075ac:	460c      	movge	r4, r1
 80075ae:	461f      	movge	r7, r3
 80075b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80075b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80075b8:	68a3      	ldr	r3, [r4, #8]
 80075ba:	6861      	ldr	r1, [r4, #4]
 80075bc:	eb0a 0609 	add.w	r6, sl, r9
 80075c0:	42b3      	cmp	r3, r6
 80075c2:	b085      	sub	sp, #20
 80075c4:	bfb8      	it	lt
 80075c6:	3101      	addlt	r1, #1
 80075c8:	f7ff fedc 	bl	8007384 <_Balloc>
 80075cc:	b930      	cbnz	r0, 80075dc <__multiply+0x44>
 80075ce:	4602      	mov	r2, r0
 80075d0:	4b44      	ldr	r3, [pc, #272]	@ (80076e4 <__multiply+0x14c>)
 80075d2:	4845      	ldr	r0, [pc, #276]	@ (80076e8 <__multiply+0x150>)
 80075d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80075d8:	f000 fce6 	bl	8007fa8 <__assert_func>
 80075dc:	f100 0514 	add.w	r5, r0, #20
 80075e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075e4:	462b      	mov	r3, r5
 80075e6:	2200      	movs	r2, #0
 80075e8:	4543      	cmp	r3, r8
 80075ea:	d321      	bcc.n	8007630 <__multiply+0x98>
 80075ec:	f107 0114 	add.w	r1, r7, #20
 80075f0:	f104 0214 	add.w	r2, r4, #20
 80075f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80075f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80075fc:	9302      	str	r3, [sp, #8]
 80075fe:	1b13      	subs	r3, r2, r4
 8007600:	3b15      	subs	r3, #21
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	3304      	adds	r3, #4
 8007608:	f104 0715 	add.w	r7, r4, #21
 800760c:	42ba      	cmp	r2, r7
 800760e:	bf38      	it	cc
 8007610:	2304      	movcc	r3, #4
 8007612:	9301      	str	r3, [sp, #4]
 8007614:	9b02      	ldr	r3, [sp, #8]
 8007616:	9103      	str	r1, [sp, #12]
 8007618:	428b      	cmp	r3, r1
 800761a:	d80c      	bhi.n	8007636 <__multiply+0x9e>
 800761c:	2e00      	cmp	r6, #0
 800761e:	dd03      	ble.n	8007628 <__multiply+0x90>
 8007620:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007624:	2b00      	cmp	r3, #0
 8007626:	d05b      	beq.n	80076e0 <__multiply+0x148>
 8007628:	6106      	str	r6, [r0, #16]
 800762a:	b005      	add	sp, #20
 800762c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007630:	f843 2b04 	str.w	r2, [r3], #4
 8007634:	e7d8      	b.n	80075e8 <__multiply+0x50>
 8007636:	f8b1 a000 	ldrh.w	sl, [r1]
 800763a:	f1ba 0f00 	cmp.w	sl, #0
 800763e:	d024      	beq.n	800768a <__multiply+0xf2>
 8007640:	f104 0e14 	add.w	lr, r4, #20
 8007644:	46a9      	mov	r9, r5
 8007646:	f04f 0c00 	mov.w	ip, #0
 800764a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800764e:	f8d9 3000 	ldr.w	r3, [r9]
 8007652:	fa1f fb87 	uxth.w	fp, r7
 8007656:	b29b      	uxth	r3, r3
 8007658:	fb0a 330b 	mla	r3, sl, fp, r3
 800765c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007660:	f8d9 7000 	ldr.w	r7, [r9]
 8007664:	4463      	add	r3, ip
 8007666:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800766a:	fb0a c70b 	mla	r7, sl, fp, ip
 800766e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007672:	b29b      	uxth	r3, r3
 8007674:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007678:	4572      	cmp	r2, lr
 800767a:	f849 3b04 	str.w	r3, [r9], #4
 800767e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007682:	d8e2      	bhi.n	800764a <__multiply+0xb2>
 8007684:	9b01      	ldr	r3, [sp, #4]
 8007686:	f845 c003 	str.w	ip, [r5, r3]
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007690:	3104      	adds	r1, #4
 8007692:	f1b9 0f00 	cmp.w	r9, #0
 8007696:	d021      	beq.n	80076dc <__multiply+0x144>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	f104 0c14 	add.w	ip, r4, #20
 800769e:	46ae      	mov	lr, r5
 80076a0:	f04f 0a00 	mov.w	sl, #0
 80076a4:	f8bc b000 	ldrh.w	fp, [ip]
 80076a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80076ac:	fb09 770b 	mla	r7, r9, fp, r7
 80076b0:	4457      	add	r7, sl
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80076b8:	f84e 3b04 	str.w	r3, [lr], #4
 80076bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076c4:	f8be 3000 	ldrh.w	r3, [lr]
 80076c8:	fb09 330a 	mla	r3, r9, sl, r3
 80076cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80076d0:	4562      	cmp	r2, ip
 80076d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076d6:	d8e5      	bhi.n	80076a4 <__multiply+0x10c>
 80076d8:	9f01      	ldr	r7, [sp, #4]
 80076da:	51eb      	str	r3, [r5, r7]
 80076dc:	3504      	adds	r5, #4
 80076de:	e799      	b.n	8007614 <__multiply+0x7c>
 80076e0:	3e01      	subs	r6, #1
 80076e2:	e79b      	b.n	800761c <__multiply+0x84>
 80076e4:	08008688 	.word	0x08008688
 80076e8:	08008699 	.word	0x08008699

080076ec <__pow5mult>:
 80076ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076f0:	4615      	mov	r5, r2
 80076f2:	f012 0203 	ands.w	r2, r2, #3
 80076f6:	4607      	mov	r7, r0
 80076f8:	460e      	mov	r6, r1
 80076fa:	d007      	beq.n	800770c <__pow5mult+0x20>
 80076fc:	4c25      	ldr	r4, [pc, #148]	@ (8007794 <__pow5mult+0xa8>)
 80076fe:	3a01      	subs	r2, #1
 8007700:	2300      	movs	r3, #0
 8007702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007706:	f7ff fe9f 	bl	8007448 <__multadd>
 800770a:	4606      	mov	r6, r0
 800770c:	10ad      	asrs	r5, r5, #2
 800770e:	d03d      	beq.n	800778c <__pow5mult+0xa0>
 8007710:	69fc      	ldr	r4, [r7, #28]
 8007712:	b97c      	cbnz	r4, 8007734 <__pow5mult+0x48>
 8007714:	2010      	movs	r0, #16
 8007716:	f7fe f8cf 	bl	80058b8 <malloc>
 800771a:	4602      	mov	r2, r0
 800771c:	61f8      	str	r0, [r7, #28]
 800771e:	b928      	cbnz	r0, 800772c <__pow5mult+0x40>
 8007720:	4b1d      	ldr	r3, [pc, #116]	@ (8007798 <__pow5mult+0xac>)
 8007722:	481e      	ldr	r0, [pc, #120]	@ (800779c <__pow5mult+0xb0>)
 8007724:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007728:	f000 fc3e 	bl	8007fa8 <__assert_func>
 800772c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007730:	6004      	str	r4, [r0, #0]
 8007732:	60c4      	str	r4, [r0, #12]
 8007734:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007738:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800773c:	b94c      	cbnz	r4, 8007752 <__pow5mult+0x66>
 800773e:	f240 2171 	movw	r1, #625	@ 0x271
 8007742:	4638      	mov	r0, r7
 8007744:	f7ff ff12 	bl	800756c <__i2b>
 8007748:	2300      	movs	r3, #0
 800774a:	f8c8 0008 	str.w	r0, [r8, #8]
 800774e:	4604      	mov	r4, r0
 8007750:	6003      	str	r3, [r0, #0]
 8007752:	f04f 0900 	mov.w	r9, #0
 8007756:	07eb      	lsls	r3, r5, #31
 8007758:	d50a      	bpl.n	8007770 <__pow5mult+0x84>
 800775a:	4631      	mov	r1, r6
 800775c:	4622      	mov	r2, r4
 800775e:	4638      	mov	r0, r7
 8007760:	f7ff ff1a 	bl	8007598 <__multiply>
 8007764:	4631      	mov	r1, r6
 8007766:	4680      	mov	r8, r0
 8007768:	4638      	mov	r0, r7
 800776a:	f7ff fe4b 	bl	8007404 <_Bfree>
 800776e:	4646      	mov	r6, r8
 8007770:	106d      	asrs	r5, r5, #1
 8007772:	d00b      	beq.n	800778c <__pow5mult+0xa0>
 8007774:	6820      	ldr	r0, [r4, #0]
 8007776:	b938      	cbnz	r0, 8007788 <__pow5mult+0x9c>
 8007778:	4622      	mov	r2, r4
 800777a:	4621      	mov	r1, r4
 800777c:	4638      	mov	r0, r7
 800777e:	f7ff ff0b 	bl	8007598 <__multiply>
 8007782:	6020      	str	r0, [r4, #0]
 8007784:	f8c0 9000 	str.w	r9, [r0]
 8007788:	4604      	mov	r4, r0
 800778a:	e7e4      	b.n	8007756 <__pow5mult+0x6a>
 800778c:	4630      	mov	r0, r6
 800778e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007792:	bf00      	nop
 8007794:	080086f4 	.word	0x080086f4
 8007798:	08008619 	.word	0x08008619
 800779c:	08008699 	.word	0x08008699

080077a0 <__lshift>:
 80077a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a4:	460c      	mov	r4, r1
 80077a6:	6849      	ldr	r1, [r1, #4]
 80077a8:	6923      	ldr	r3, [r4, #16]
 80077aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077ae:	68a3      	ldr	r3, [r4, #8]
 80077b0:	4607      	mov	r7, r0
 80077b2:	4691      	mov	r9, r2
 80077b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077b8:	f108 0601 	add.w	r6, r8, #1
 80077bc:	42b3      	cmp	r3, r6
 80077be:	db0b      	blt.n	80077d8 <__lshift+0x38>
 80077c0:	4638      	mov	r0, r7
 80077c2:	f7ff fddf 	bl	8007384 <_Balloc>
 80077c6:	4605      	mov	r5, r0
 80077c8:	b948      	cbnz	r0, 80077de <__lshift+0x3e>
 80077ca:	4602      	mov	r2, r0
 80077cc:	4b28      	ldr	r3, [pc, #160]	@ (8007870 <__lshift+0xd0>)
 80077ce:	4829      	ldr	r0, [pc, #164]	@ (8007874 <__lshift+0xd4>)
 80077d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80077d4:	f000 fbe8 	bl	8007fa8 <__assert_func>
 80077d8:	3101      	adds	r1, #1
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	e7ee      	b.n	80077bc <__lshift+0x1c>
 80077de:	2300      	movs	r3, #0
 80077e0:	f100 0114 	add.w	r1, r0, #20
 80077e4:	f100 0210 	add.w	r2, r0, #16
 80077e8:	4618      	mov	r0, r3
 80077ea:	4553      	cmp	r3, sl
 80077ec:	db33      	blt.n	8007856 <__lshift+0xb6>
 80077ee:	6920      	ldr	r0, [r4, #16]
 80077f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077f4:	f104 0314 	add.w	r3, r4, #20
 80077f8:	f019 091f 	ands.w	r9, r9, #31
 80077fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007800:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007804:	d02b      	beq.n	800785e <__lshift+0xbe>
 8007806:	f1c9 0e20 	rsb	lr, r9, #32
 800780a:	468a      	mov	sl, r1
 800780c:	2200      	movs	r2, #0
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	fa00 f009 	lsl.w	r0, r0, r9
 8007814:	4310      	orrs	r0, r2
 8007816:	f84a 0b04 	str.w	r0, [sl], #4
 800781a:	f853 2b04 	ldr.w	r2, [r3], #4
 800781e:	459c      	cmp	ip, r3
 8007820:	fa22 f20e 	lsr.w	r2, r2, lr
 8007824:	d8f3      	bhi.n	800780e <__lshift+0x6e>
 8007826:	ebac 0304 	sub.w	r3, ip, r4
 800782a:	3b15      	subs	r3, #21
 800782c:	f023 0303 	bic.w	r3, r3, #3
 8007830:	3304      	adds	r3, #4
 8007832:	f104 0015 	add.w	r0, r4, #21
 8007836:	4584      	cmp	ip, r0
 8007838:	bf38      	it	cc
 800783a:	2304      	movcc	r3, #4
 800783c:	50ca      	str	r2, [r1, r3]
 800783e:	b10a      	cbz	r2, 8007844 <__lshift+0xa4>
 8007840:	f108 0602 	add.w	r6, r8, #2
 8007844:	3e01      	subs	r6, #1
 8007846:	4638      	mov	r0, r7
 8007848:	612e      	str	r6, [r5, #16]
 800784a:	4621      	mov	r1, r4
 800784c:	f7ff fdda 	bl	8007404 <_Bfree>
 8007850:	4628      	mov	r0, r5
 8007852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007856:	f842 0f04 	str.w	r0, [r2, #4]!
 800785a:	3301      	adds	r3, #1
 800785c:	e7c5      	b.n	80077ea <__lshift+0x4a>
 800785e:	3904      	subs	r1, #4
 8007860:	f853 2b04 	ldr.w	r2, [r3], #4
 8007864:	f841 2f04 	str.w	r2, [r1, #4]!
 8007868:	459c      	cmp	ip, r3
 800786a:	d8f9      	bhi.n	8007860 <__lshift+0xc0>
 800786c:	e7ea      	b.n	8007844 <__lshift+0xa4>
 800786e:	bf00      	nop
 8007870:	08008688 	.word	0x08008688
 8007874:	08008699 	.word	0x08008699

08007878 <__mcmp>:
 8007878:	690a      	ldr	r2, [r1, #16]
 800787a:	4603      	mov	r3, r0
 800787c:	6900      	ldr	r0, [r0, #16]
 800787e:	1a80      	subs	r0, r0, r2
 8007880:	b530      	push	{r4, r5, lr}
 8007882:	d10e      	bne.n	80078a2 <__mcmp+0x2a>
 8007884:	3314      	adds	r3, #20
 8007886:	3114      	adds	r1, #20
 8007888:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800788c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007890:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007894:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007898:	4295      	cmp	r5, r2
 800789a:	d003      	beq.n	80078a4 <__mcmp+0x2c>
 800789c:	d205      	bcs.n	80078aa <__mcmp+0x32>
 800789e:	f04f 30ff 	mov.w	r0, #4294967295
 80078a2:	bd30      	pop	{r4, r5, pc}
 80078a4:	42a3      	cmp	r3, r4
 80078a6:	d3f3      	bcc.n	8007890 <__mcmp+0x18>
 80078a8:	e7fb      	b.n	80078a2 <__mcmp+0x2a>
 80078aa:	2001      	movs	r0, #1
 80078ac:	e7f9      	b.n	80078a2 <__mcmp+0x2a>
	...

080078b0 <__mdiff>:
 80078b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	4689      	mov	r9, r1
 80078b6:	4606      	mov	r6, r0
 80078b8:	4611      	mov	r1, r2
 80078ba:	4648      	mov	r0, r9
 80078bc:	4614      	mov	r4, r2
 80078be:	f7ff ffdb 	bl	8007878 <__mcmp>
 80078c2:	1e05      	subs	r5, r0, #0
 80078c4:	d112      	bne.n	80078ec <__mdiff+0x3c>
 80078c6:	4629      	mov	r1, r5
 80078c8:	4630      	mov	r0, r6
 80078ca:	f7ff fd5b 	bl	8007384 <_Balloc>
 80078ce:	4602      	mov	r2, r0
 80078d0:	b928      	cbnz	r0, 80078de <__mdiff+0x2e>
 80078d2:	4b3f      	ldr	r3, [pc, #252]	@ (80079d0 <__mdiff+0x120>)
 80078d4:	f240 2137 	movw	r1, #567	@ 0x237
 80078d8:	483e      	ldr	r0, [pc, #248]	@ (80079d4 <__mdiff+0x124>)
 80078da:	f000 fb65 	bl	8007fa8 <__assert_func>
 80078de:	2301      	movs	r3, #1
 80078e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078e4:	4610      	mov	r0, r2
 80078e6:	b003      	add	sp, #12
 80078e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ec:	bfbc      	itt	lt
 80078ee:	464b      	movlt	r3, r9
 80078f0:	46a1      	movlt	r9, r4
 80078f2:	4630      	mov	r0, r6
 80078f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80078f8:	bfba      	itte	lt
 80078fa:	461c      	movlt	r4, r3
 80078fc:	2501      	movlt	r5, #1
 80078fe:	2500      	movge	r5, #0
 8007900:	f7ff fd40 	bl	8007384 <_Balloc>
 8007904:	4602      	mov	r2, r0
 8007906:	b918      	cbnz	r0, 8007910 <__mdiff+0x60>
 8007908:	4b31      	ldr	r3, [pc, #196]	@ (80079d0 <__mdiff+0x120>)
 800790a:	f240 2145 	movw	r1, #581	@ 0x245
 800790e:	e7e3      	b.n	80078d8 <__mdiff+0x28>
 8007910:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007914:	6926      	ldr	r6, [r4, #16]
 8007916:	60c5      	str	r5, [r0, #12]
 8007918:	f109 0310 	add.w	r3, r9, #16
 800791c:	f109 0514 	add.w	r5, r9, #20
 8007920:	f104 0e14 	add.w	lr, r4, #20
 8007924:	f100 0b14 	add.w	fp, r0, #20
 8007928:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800792c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	46d9      	mov	r9, fp
 8007934:	f04f 0c00 	mov.w	ip, #0
 8007938:	9b01      	ldr	r3, [sp, #4]
 800793a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800793e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007942:	9301      	str	r3, [sp, #4]
 8007944:	fa1f f38a 	uxth.w	r3, sl
 8007948:	4619      	mov	r1, r3
 800794a:	b283      	uxth	r3, r0
 800794c:	1acb      	subs	r3, r1, r3
 800794e:	0c00      	lsrs	r0, r0, #16
 8007950:	4463      	add	r3, ip
 8007952:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007956:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800795a:	b29b      	uxth	r3, r3
 800795c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007960:	4576      	cmp	r6, lr
 8007962:	f849 3b04 	str.w	r3, [r9], #4
 8007966:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800796a:	d8e5      	bhi.n	8007938 <__mdiff+0x88>
 800796c:	1b33      	subs	r3, r6, r4
 800796e:	3b15      	subs	r3, #21
 8007970:	f023 0303 	bic.w	r3, r3, #3
 8007974:	3415      	adds	r4, #21
 8007976:	3304      	adds	r3, #4
 8007978:	42a6      	cmp	r6, r4
 800797a:	bf38      	it	cc
 800797c:	2304      	movcc	r3, #4
 800797e:	441d      	add	r5, r3
 8007980:	445b      	add	r3, fp
 8007982:	461e      	mov	r6, r3
 8007984:	462c      	mov	r4, r5
 8007986:	4544      	cmp	r4, r8
 8007988:	d30e      	bcc.n	80079a8 <__mdiff+0xf8>
 800798a:	f108 0103 	add.w	r1, r8, #3
 800798e:	1b49      	subs	r1, r1, r5
 8007990:	f021 0103 	bic.w	r1, r1, #3
 8007994:	3d03      	subs	r5, #3
 8007996:	45a8      	cmp	r8, r5
 8007998:	bf38      	it	cc
 800799a:	2100      	movcc	r1, #0
 800799c:	440b      	add	r3, r1
 800799e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079a2:	b191      	cbz	r1, 80079ca <__mdiff+0x11a>
 80079a4:	6117      	str	r7, [r2, #16]
 80079a6:	e79d      	b.n	80078e4 <__mdiff+0x34>
 80079a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80079ac:	46e6      	mov	lr, ip
 80079ae:	0c08      	lsrs	r0, r1, #16
 80079b0:	fa1c fc81 	uxtah	ip, ip, r1
 80079b4:	4471      	add	r1, lr
 80079b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80079ba:	b289      	uxth	r1, r1
 80079bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80079c0:	f846 1b04 	str.w	r1, [r6], #4
 80079c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079c8:	e7dd      	b.n	8007986 <__mdiff+0xd6>
 80079ca:	3f01      	subs	r7, #1
 80079cc:	e7e7      	b.n	800799e <__mdiff+0xee>
 80079ce:	bf00      	nop
 80079d0:	08008688 	.word	0x08008688
 80079d4:	08008699 	.word	0x08008699

080079d8 <__d2b>:
 80079d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079dc:	460f      	mov	r7, r1
 80079de:	2101      	movs	r1, #1
 80079e0:	ec59 8b10 	vmov	r8, r9, d0
 80079e4:	4616      	mov	r6, r2
 80079e6:	f7ff fccd 	bl	8007384 <_Balloc>
 80079ea:	4604      	mov	r4, r0
 80079ec:	b930      	cbnz	r0, 80079fc <__d2b+0x24>
 80079ee:	4602      	mov	r2, r0
 80079f0:	4b23      	ldr	r3, [pc, #140]	@ (8007a80 <__d2b+0xa8>)
 80079f2:	4824      	ldr	r0, [pc, #144]	@ (8007a84 <__d2b+0xac>)
 80079f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80079f8:	f000 fad6 	bl	8007fa8 <__assert_func>
 80079fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a04:	b10d      	cbz	r5, 8007a0a <__d2b+0x32>
 8007a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a0a:	9301      	str	r3, [sp, #4]
 8007a0c:	f1b8 0300 	subs.w	r3, r8, #0
 8007a10:	d023      	beq.n	8007a5a <__d2b+0x82>
 8007a12:	4668      	mov	r0, sp
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	f7ff fd7c 	bl	8007512 <__lo0bits>
 8007a1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a1e:	b1d0      	cbz	r0, 8007a56 <__d2b+0x7e>
 8007a20:	f1c0 0320 	rsb	r3, r0, #32
 8007a24:	fa02 f303 	lsl.w	r3, r2, r3
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	40c2      	lsrs	r2, r0
 8007a2c:	6163      	str	r3, [r4, #20]
 8007a2e:	9201      	str	r2, [sp, #4]
 8007a30:	9b01      	ldr	r3, [sp, #4]
 8007a32:	61a3      	str	r3, [r4, #24]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	bf0c      	ite	eq
 8007a38:	2201      	moveq	r2, #1
 8007a3a:	2202      	movne	r2, #2
 8007a3c:	6122      	str	r2, [r4, #16]
 8007a3e:	b1a5      	cbz	r5, 8007a6a <__d2b+0x92>
 8007a40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a44:	4405      	add	r5, r0
 8007a46:	603d      	str	r5, [r7, #0]
 8007a48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a4c:	6030      	str	r0, [r6, #0]
 8007a4e:	4620      	mov	r0, r4
 8007a50:	b003      	add	sp, #12
 8007a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a56:	6161      	str	r1, [r4, #20]
 8007a58:	e7ea      	b.n	8007a30 <__d2b+0x58>
 8007a5a:	a801      	add	r0, sp, #4
 8007a5c:	f7ff fd59 	bl	8007512 <__lo0bits>
 8007a60:	9b01      	ldr	r3, [sp, #4]
 8007a62:	6163      	str	r3, [r4, #20]
 8007a64:	3020      	adds	r0, #32
 8007a66:	2201      	movs	r2, #1
 8007a68:	e7e8      	b.n	8007a3c <__d2b+0x64>
 8007a6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007a72:	6038      	str	r0, [r7, #0]
 8007a74:	6918      	ldr	r0, [r3, #16]
 8007a76:	f7ff fd2d 	bl	80074d4 <__hi0bits>
 8007a7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a7e:	e7e5      	b.n	8007a4c <__d2b+0x74>
 8007a80:	08008688 	.word	0x08008688
 8007a84:	08008699 	.word	0x08008699

08007a88 <__sfputc_r>:
 8007a88:	6893      	ldr	r3, [r2, #8]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	b410      	push	{r4}
 8007a90:	6093      	str	r3, [r2, #8]
 8007a92:	da08      	bge.n	8007aa6 <__sfputc_r+0x1e>
 8007a94:	6994      	ldr	r4, [r2, #24]
 8007a96:	42a3      	cmp	r3, r4
 8007a98:	db01      	blt.n	8007a9e <__sfputc_r+0x16>
 8007a9a:	290a      	cmp	r1, #10
 8007a9c:	d103      	bne.n	8007aa6 <__sfputc_r+0x1e>
 8007a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aa2:	f000 b9df 	b.w	8007e64 <__swbuf_r>
 8007aa6:	6813      	ldr	r3, [r2, #0]
 8007aa8:	1c58      	adds	r0, r3, #1
 8007aaa:	6010      	str	r0, [r2, #0]
 8007aac:	7019      	strb	r1, [r3, #0]
 8007aae:	4608      	mov	r0, r1
 8007ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <__sfputs_r>:
 8007ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab8:	4606      	mov	r6, r0
 8007aba:	460f      	mov	r7, r1
 8007abc:	4614      	mov	r4, r2
 8007abe:	18d5      	adds	r5, r2, r3
 8007ac0:	42ac      	cmp	r4, r5
 8007ac2:	d101      	bne.n	8007ac8 <__sfputs_r+0x12>
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	e007      	b.n	8007ad8 <__sfputs_r+0x22>
 8007ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007acc:	463a      	mov	r2, r7
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f7ff ffda 	bl	8007a88 <__sfputc_r>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d1f3      	bne.n	8007ac0 <__sfputs_r+0xa>
 8007ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007adc <_vfiprintf_r>:
 8007adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae0:	460d      	mov	r5, r1
 8007ae2:	b09d      	sub	sp, #116	@ 0x74
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	4698      	mov	r8, r3
 8007ae8:	4606      	mov	r6, r0
 8007aea:	b118      	cbz	r0, 8007af4 <_vfiprintf_r+0x18>
 8007aec:	6a03      	ldr	r3, [r0, #32]
 8007aee:	b90b      	cbnz	r3, 8007af4 <_vfiprintf_r+0x18>
 8007af0:	f7fe fc7c 	bl	80063ec <__sinit>
 8007af4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007af6:	07d9      	lsls	r1, r3, #31
 8007af8:	d405      	bmi.n	8007b06 <_vfiprintf_r+0x2a>
 8007afa:	89ab      	ldrh	r3, [r5, #12]
 8007afc:	059a      	lsls	r2, r3, #22
 8007afe:	d402      	bmi.n	8007b06 <_vfiprintf_r+0x2a>
 8007b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b02:	f7fe fda6 	bl	8006652 <__retarget_lock_acquire_recursive>
 8007b06:	89ab      	ldrh	r3, [r5, #12]
 8007b08:	071b      	lsls	r3, r3, #28
 8007b0a:	d501      	bpl.n	8007b10 <_vfiprintf_r+0x34>
 8007b0c:	692b      	ldr	r3, [r5, #16]
 8007b0e:	b99b      	cbnz	r3, 8007b38 <_vfiprintf_r+0x5c>
 8007b10:	4629      	mov	r1, r5
 8007b12:	4630      	mov	r0, r6
 8007b14:	f000 f9e4 	bl	8007ee0 <__swsetup_r>
 8007b18:	b170      	cbz	r0, 8007b38 <_vfiprintf_r+0x5c>
 8007b1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b1c:	07dc      	lsls	r4, r3, #31
 8007b1e:	d504      	bpl.n	8007b2a <_vfiprintf_r+0x4e>
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295
 8007b24:	b01d      	add	sp, #116	@ 0x74
 8007b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2a:	89ab      	ldrh	r3, [r5, #12]
 8007b2c:	0598      	lsls	r0, r3, #22
 8007b2e:	d4f7      	bmi.n	8007b20 <_vfiprintf_r+0x44>
 8007b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b32:	f7fe fd8f 	bl	8006654 <__retarget_lock_release_recursive>
 8007b36:	e7f3      	b.n	8007b20 <_vfiprintf_r+0x44>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b3c:	2320      	movs	r3, #32
 8007b3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b42:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b46:	2330      	movs	r3, #48	@ 0x30
 8007b48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007cf8 <_vfiprintf_r+0x21c>
 8007b4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b50:	f04f 0901 	mov.w	r9, #1
 8007b54:	4623      	mov	r3, r4
 8007b56:	469a      	mov	sl, r3
 8007b58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b5c:	b10a      	cbz	r2, 8007b62 <_vfiprintf_r+0x86>
 8007b5e:	2a25      	cmp	r2, #37	@ 0x25
 8007b60:	d1f9      	bne.n	8007b56 <_vfiprintf_r+0x7a>
 8007b62:	ebba 0b04 	subs.w	fp, sl, r4
 8007b66:	d00b      	beq.n	8007b80 <_vfiprintf_r+0xa4>
 8007b68:	465b      	mov	r3, fp
 8007b6a:	4622      	mov	r2, r4
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f7ff ffa1 	bl	8007ab6 <__sfputs_r>
 8007b74:	3001      	adds	r0, #1
 8007b76:	f000 80a7 	beq.w	8007cc8 <_vfiprintf_r+0x1ec>
 8007b7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b7c:	445a      	add	r2, fp
 8007b7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b80:	f89a 3000 	ldrb.w	r3, [sl]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 809f 	beq.w	8007cc8 <_vfiprintf_r+0x1ec>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b94:	f10a 0a01 	add.w	sl, sl, #1
 8007b98:	9304      	str	r3, [sp, #16]
 8007b9a:	9307      	str	r3, [sp, #28]
 8007b9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ba0:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ba2:	4654      	mov	r4, sl
 8007ba4:	2205      	movs	r2, #5
 8007ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007baa:	4853      	ldr	r0, [pc, #332]	@ (8007cf8 <_vfiprintf_r+0x21c>)
 8007bac:	f7f8 fb18 	bl	80001e0 <memchr>
 8007bb0:	9a04      	ldr	r2, [sp, #16]
 8007bb2:	b9d8      	cbnz	r0, 8007bec <_vfiprintf_r+0x110>
 8007bb4:	06d1      	lsls	r1, r2, #27
 8007bb6:	bf44      	itt	mi
 8007bb8:	2320      	movmi	r3, #32
 8007bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bbe:	0713      	lsls	r3, r2, #28
 8007bc0:	bf44      	itt	mi
 8007bc2:	232b      	movmi	r3, #43	@ 0x2b
 8007bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8007bcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bce:	d015      	beq.n	8007bfc <_vfiprintf_r+0x120>
 8007bd0:	9a07      	ldr	r2, [sp, #28]
 8007bd2:	4654      	mov	r4, sl
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	f04f 0c0a 	mov.w	ip, #10
 8007bda:	4621      	mov	r1, r4
 8007bdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007be0:	3b30      	subs	r3, #48	@ 0x30
 8007be2:	2b09      	cmp	r3, #9
 8007be4:	d94b      	bls.n	8007c7e <_vfiprintf_r+0x1a2>
 8007be6:	b1b0      	cbz	r0, 8007c16 <_vfiprintf_r+0x13a>
 8007be8:	9207      	str	r2, [sp, #28]
 8007bea:	e014      	b.n	8007c16 <_vfiprintf_r+0x13a>
 8007bec:	eba0 0308 	sub.w	r3, r0, r8
 8007bf0:	fa09 f303 	lsl.w	r3, r9, r3
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	9304      	str	r3, [sp, #16]
 8007bf8:	46a2      	mov	sl, r4
 8007bfa:	e7d2      	b.n	8007ba2 <_vfiprintf_r+0xc6>
 8007bfc:	9b03      	ldr	r3, [sp, #12]
 8007bfe:	1d19      	adds	r1, r3, #4
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	9103      	str	r1, [sp, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	bfbb      	ittet	lt
 8007c08:	425b      	neglt	r3, r3
 8007c0a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c0e:	9307      	strge	r3, [sp, #28]
 8007c10:	9307      	strlt	r3, [sp, #28]
 8007c12:	bfb8      	it	lt
 8007c14:	9204      	strlt	r2, [sp, #16]
 8007c16:	7823      	ldrb	r3, [r4, #0]
 8007c18:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c1a:	d10a      	bne.n	8007c32 <_vfiprintf_r+0x156>
 8007c1c:	7863      	ldrb	r3, [r4, #1]
 8007c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c20:	d132      	bne.n	8007c88 <_vfiprintf_r+0x1ac>
 8007c22:	9b03      	ldr	r3, [sp, #12]
 8007c24:	1d1a      	adds	r2, r3, #4
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	9203      	str	r2, [sp, #12]
 8007c2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c2e:	3402      	adds	r4, #2
 8007c30:	9305      	str	r3, [sp, #20]
 8007c32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007d08 <_vfiprintf_r+0x22c>
 8007c36:	7821      	ldrb	r1, [r4, #0]
 8007c38:	2203      	movs	r2, #3
 8007c3a:	4650      	mov	r0, sl
 8007c3c:	f7f8 fad0 	bl	80001e0 <memchr>
 8007c40:	b138      	cbz	r0, 8007c52 <_vfiprintf_r+0x176>
 8007c42:	9b04      	ldr	r3, [sp, #16]
 8007c44:	eba0 000a 	sub.w	r0, r0, sl
 8007c48:	2240      	movs	r2, #64	@ 0x40
 8007c4a:	4082      	lsls	r2, r0
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	3401      	adds	r4, #1
 8007c50:	9304      	str	r3, [sp, #16]
 8007c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c56:	4829      	ldr	r0, [pc, #164]	@ (8007cfc <_vfiprintf_r+0x220>)
 8007c58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c5c:	2206      	movs	r2, #6
 8007c5e:	f7f8 fabf 	bl	80001e0 <memchr>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d03f      	beq.n	8007ce6 <_vfiprintf_r+0x20a>
 8007c66:	4b26      	ldr	r3, [pc, #152]	@ (8007d00 <_vfiprintf_r+0x224>)
 8007c68:	bb1b      	cbnz	r3, 8007cb2 <_vfiprintf_r+0x1d6>
 8007c6a:	9b03      	ldr	r3, [sp, #12]
 8007c6c:	3307      	adds	r3, #7
 8007c6e:	f023 0307 	bic.w	r3, r3, #7
 8007c72:	3308      	adds	r3, #8
 8007c74:	9303      	str	r3, [sp, #12]
 8007c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c78:	443b      	add	r3, r7
 8007c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c7c:	e76a      	b.n	8007b54 <_vfiprintf_r+0x78>
 8007c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c82:	460c      	mov	r4, r1
 8007c84:	2001      	movs	r0, #1
 8007c86:	e7a8      	b.n	8007bda <_vfiprintf_r+0xfe>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	3401      	adds	r4, #1
 8007c8c:	9305      	str	r3, [sp, #20]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	f04f 0c0a 	mov.w	ip, #10
 8007c94:	4620      	mov	r0, r4
 8007c96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c9a:	3a30      	subs	r2, #48	@ 0x30
 8007c9c:	2a09      	cmp	r2, #9
 8007c9e:	d903      	bls.n	8007ca8 <_vfiprintf_r+0x1cc>
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d0c6      	beq.n	8007c32 <_vfiprintf_r+0x156>
 8007ca4:	9105      	str	r1, [sp, #20]
 8007ca6:	e7c4      	b.n	8007c32 <_vfiprintf_r+0x156>
 8007ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cac:	4604      	mov	r4, r0
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e7f0      	b.n	8007c94 <_vfiprintf_r+0x1b8>
 8007cb2:	ab03      	add	r3, sp, #12
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	462a      	mov	r2, r5
 8007cb8:	4b12      	ldr	r3, [pc, #72]	@ (8007d04 <_vfiprintf_r+0x228>)
 8007cba:	a904      	add	r1, sp, #16
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7fd ff51 	bl	8005b64 <_printf_float>
 8007cc2:	4607      	mov	r7, r0
 8007cc4:	1c78      	adds	r0, r7, #1
 8007cc6:	d1d6      	bne.n	8007c76 <_vfiprintf_r+0x19a>
 8007cc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cca:	07d9      	lsls	r1, r3, #31
 8007ccc:	d405      	bmi.n	8007cda <_vfiprintf_r+0x1fe>
 8007cce:	89ab      	ldrh	r3, [r5, #12]
 8007cd0:	059a      	lsls	r2, r3, #22
 8007cd2:	d402      	bmi.n	8007cda <_vfiprintf_r+0x1fe>
 8007cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cd6:	f7fe fcbd 	bl	8006654 <__retarget_lock_release_recursive>
 8007cda:	89ab      	ldrh	r3, [r5, #12]
 8007cdc:	065b      	lsls	r3, r3, #25
 8007cde:	f53f af1f 	bmi.w	8007b20 <_vfiprintf_r+0x44>
 8007ce2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ce4:	e71e      	b.n	8007b24 <_vfiprintf_r+0x48>
 8007ce6:	ab03      	add	r3, sp, #12
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	462a      	mov	r2, r5
 8007cec:	4b05      	ldr	r3, [pc, #20]	@ (8007d04 <_vfiprintf_r+0x228>)
 8007cee:	a904      	add	r1, sp, #16
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f7fe f9cf 	bl	8006094 <_printf_i>
 8007cf6:	e7e4      	b.n	8007cc2 <_vfiprintf_r+0x1e6>
 8007cf8:	080087f0 	.word	0x080087f0
 8007cfc:	080087fa 	.word	0x080087fa
 8007d00:	08005b65 	.word	0x08005b65
 8007d04:	08007ab7 	.word	0x08007ab7
 8007d08:	080087f6 	.word	0x080087f6

08007d0c <__sflush_r>:
 8007d0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d14:	0716      	lsls	r6, r2, #28
 8007d16:	4605      	mov	r5, r0
 8007d18:	460c      	mov	r4, r1
 8007d1a:	d454      	bmi.n	8007dc6 <__sflush_r+0xba>
 8007d1c:	684b      	ldr	r3, [r1, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	dc02      	bgt.n	8007d28 <__sflush_r+0x1c>
 8007d22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	dd48      	ble.n	8007dba <__sflush_r+0xae>
 8007d28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d2a:	2e00      	cmp	r6, #0
 8007d2c:	d045      	beq.n	8007dba <__sflush_r+0xae>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d34:	682f      	ldr	r7, [r5, #0]
 8007d36:	6a21      	ldr	r1, [r4, #32]
 8007d38:	602b      	str	r3, [r5, #0]
 8007d3a:	d030      	beq.n	8007d9e <__sflush_r+0x92>
 8007d3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	0759      	lsls	r1, r3, #29
 8007d42:	d505      	bpl.n	8007d50 <__sflush_r+0x44>
 8007d44:	6863      	ldr	r3, [r4, #4]
 8007d46:	1ad2      	subs	r2, r2, r3
 8007d48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d4a:	b10b      	cbz	r3, 8007d50 <__sflush_r+0x44>
 8007d4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d4e:	1ad2      	subs	r2, r2, r3
 8007d50:	2300      	movs	r3, #0
 8007d52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d54:	6a21      	ldr	r1, [r4, #32]
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b0      	blx	r6
 8007d5a:	1c43      	adds	r3, r0, #1
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	d106      	bne.n	8007d6e <__sflush_r+0x62>
 8007d60:	6829      	ldr	r1, [r5, #0]
 8007d62:	291d      	cmp	r1, #29
 8007d64:	d82b      	bhi.n	8007dbe <__sflush_r+0xb2>
 8007d66:	4a2a      	ldr	r2, [pc, #168]	@ (8007e10 <__sflush_r+0x104>)
 8007d68:	410a      	asrs	r2, r1
 8007d6a:	07d6      	lsls	r6, r2, #31
 8007d6c:	d427      	bmi.n	8007dbe <__sflush_r+0xb2>
 8007d6e:	2200      	movs	r2, #0
 8007d70:	6062      	str	r2, [r4, #4]
 8007d72:	04d9      	lsls	r1, r3, #19
 8007d74:	6922      	ldr	r2, [r4, #16]
 8007d76:	6022      	str	r2, [r4, #0]
 8007d78:	d504      	bpl.n	8007d84 <__sflush_r+0x78>
 8007d7a:	1c42      	adds	r2, r0, #1
 8007d7c:	d101      	bne.n	8007d82 <__sflush_r+0x76>
 8007d7e:	682b      	ldr	r3, [r5, #0]
 8007d80:	b903      	cbnz	r3, 8007d84 <__sflush_r+0x78>
 8007d82:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d86:	602f      	str	r7, [r5, #0]
 8007d88:	b1b9      	cbz	r1, 8007dba <__sflush_r+0xae>
 8007d8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d8e:	4299      	cmp	r1, r3
 8007d90:	d002      	beq.n	8007d98 <__sflush_r+0x8c>
 8007d92:	4628      	mov	r0, r5
 8007d94:	f7ff faac 	bl	80072f0 <_free_r>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d9c:	e00d      	b.n	8007dba <__sflush_r+0xae>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	4628      	mov	r0, r5
 8007da2:	47b0      	blx	r6
 8007da4:	4602      	mov	r2, r0
 8007da6:	1c50      	adds	r0, r2, #1
 8007da8:	d1c9      	bne.n	8007d3e <__sflush_r+0x32>
 8007daa:	682b      	ldr	r3, [r5, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d0c6      	beq.n	8007d3e <__sflush_r+0x32>
 8007db0:	2b1d      	cmp	r3, #29
 8007db2:	d001      	beq.n	8007db8 <__sflush_r+0xac>
 8007db4:	2b16      	cmp	r3, #22
 8007db6:	d11e      	bne.n	8007df6 <__sflush_r+0xea>
 8007db8:	602f      	str	r7, [r5, #0]
 8007dba:	2000      	movs	r0, #0
 8007dbc:	e022      	b.n	8007e04 <__sflush_r+0xf8>
 8007dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dc2:	b21b      	sxth	r3, r3
 8007dc4:	e01b      	b.n	8007dfe <__sflush_r+0xf2>
 8007dc6:	690f      	ldr	r7, [r1, #16]
 8007dc8:	2f00      	cmp	r7, #0
 8007dca:	d0f6      	beq.n	8007dba <__sflush_r+0xae>
 8007dcc:	0793      	lsls	r3, r2, #30
 8007dce:	680e      	ldr	r6, [r1, #0]
 8007dd0:	bf08      	it	eq
 8007dd2:	694b      	ldreq	r3, [r1, #20]
 8007dd4:	600f      	str	r7, [r1, #0]
 8007dd6:	bf18      	it	ne
 8007dd8:	2300      	movne	r3, #0
 8007dda:	eba6 0807 	sub.w	r8, r6, r7
 8007dde:	608b      	str	r3, [r1, #8]
 8007de0:	f1b8 0f00 	cmp.w	r8, #0
 8007de4:	dde9      	ble.n	8007dba <__sflush_r+0xae>
 8007de6:	6a21      	ldr	r1, [r4, #32]
 8007de8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007dea:	4643      	mov	r3, r8
 8007dec:	463a      	mov	r2, r7
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b0      	blx	r6
 8007df2:	2800      	cmp	r0, #0
 8007df4:	dc08      	bgt.n	8007e08 <__sflush_r+0xfc>
 8007df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dfe:	81a3      	strh	r3, [r4, #12]
 8007e00:	f04f 30ff 	mov.w	r0, #4294967295
 8007e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e08:	4407      	add	r7, r0
 8007e0a:	eba8 0800 	sub.w	r8, r8, r0
 8007e0e:	e7e7      	b.n	8007de0 <__sflush_r+0xd4>
 8007e10:	dfbffffe 	.word	0xdfbffffe

08007e14 <_fflush_r>:
 8007e14:	b538      	push	{r3, r4, r5, lr}
 8007e16:	690b      	ldr	r3, [r1, #16]
 8007e18:	4605      	mov	r5, r0
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	b913      	cbnz	r3, 8007e24 <_fflush_r+0x10>
 8007e1e:	2500      	movs	r5, #0
 8007e20:	4628      	mov	r0, r5
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	b118      	cbz	r0, 8007e2e <_fflush_r+0x1a>
 8007e26:	6a03      	ldr	r3, [r0, #32]
 8007e28:	b90b      	cbnz	r3, 8007e2e <_fflush_r+0x1a>
 8007e2a:	f7fe fadf 	bl	80063ec <__sinit>
 8007e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0f3      	beq.n	8007e1e <_fflush_r+0xa>
 8007e36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e38:	07d0      	lsls	r0, r2, #31
 8007e3a:	d404      	bmi.n	8007e46 <_fflush_r+0x32>
 8007e3c:	0599      	lsls	r1, r3, #22
 8007e3e:	d402      	bmi.n	8007e46 <_fflush_r+0x32>
 8007e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e42:	f7fe fc06 	bl	8006652 <__retarget_lock_acquire_recursive>
 8007e46:	4628      	mov	r0, r5
 8007e48:	4621      	mov	r1, r4
 8007e4a:	f7ff ff5f 	bl	8007d0c <__sflush_r>
 8007e4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e50:	07da      	lsls	r2, r3, #31
 8007e52:	4605      	mov	r5, r0
 8007e54:	d4e4      	bmi.n	8007e20 <_fflush_r+0xc>
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	059b      	lsls	r3, r3, #22
 8007e5a:	d4e1      	bmi.n	8007e20 <_fflush_r+0xc>
 8007e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e5e:	f7fe fbf9 	bl	8006654 <__retarget_lock_release_recursive>
 8007e62:	e7dd      	b.n	8007e20 <_fflush_r+0xc>

08007e64 <__swbuf_r>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	460e      	mov	r6, r1
 8007e68:	4614      	mov	r4, r2
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	b118      	cbz	r0, 8007e76 <__swbuf_r+0x12>
 8007e6e:	6a03      	ldr	r3, [r0, #32]
 8007e70:	b90b      	cbnz	r3, 8007e76 <__swbuf_r+0x12>
 8007e72:	f7fe fabb 	bl	80063ec <__sinit>
 8007e76:	69a3      	ldr	r3, [r4, #24]
 8007e78:	60a3      	str	r3, [r4, #8]
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	071a      	lsls	r2, r3, #28
 8007e7e:	d501      	bpl.n	8007e84 <__swbuf_r+0x20>
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	b943      	cbnz	r3, 8007e96 <__swbuf_r+0x32>
 8007e84:	4621      	mov	r1, r4
 8007e86:	4628      	mov	r0, r5
 8007e88:	f000 f82a 	bl	8007ee0 <__swsetup_r>
 8007e8c:	b118      	cbz	r0, 8007e96 <__swbuf_r+0x32>
 8007e8e:	f04f 37ff 	mov.w	r7, #4294967295
 8007e92:	4638      	mov	r0, r7
 8007e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	6922      	ldr	r2, [r4, #16]
 8007e9a:	1a98      	subs	r0, r3, r2
 8007e9c:	6963      	ldr	r3, [r4, #20]
 8007e9e:	b2f6      	uxtb	r6, r6
 8007ea0:	4283      	cmp	r3, r0
 8007ea2:	4637      	mov	r7, r6
 8007ea4:	dc05      	bgt.n	8007eb2 <__swbuf_r+0x4e>
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f7ff ffb3 	bl	8007e14 <_fflush_r>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d1ed      	bne.n	8007e8e <__swbuf_r+0x2a>
 8007eb2:	68a3      	ldr	r3, [r4, #8]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	60a3      	str	r3, [r4, #8]
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	6022      	str	r2, [r4, #0]
 8007ebe:	701e      	strb	r6, [r3, #0]
 8007ec0:	6962      	ldr	r2, [r4, #20]
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d004      	beq.n	8007ed2 <__swbuf_r+0x6e>
 8007ec8:	89a3      	ldrh	r3, [r4, #12]
 8007eca:	07db      	lsls	r3, r3, #31
 8007ecc:	d5e1      	bpl.n	8007e92 <__swbuf_r+0x2e>
 8007ece:	2e0a      	cmp	r6, #10
 8007ed0:	d1df      	bne.n	8007e92 <__swbuf_r+0x2e>
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	f7ff ff9d 	bl	8007e14 <_fflush_r>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d0d9      	beq.n	8007e92 <__swbuf_r+0x2e>
 8007ede:	e7d6      	b.n	8007e8e <__swbuf_r+0x2a>

08007ee0 <__swsetup_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4b29      	ldr	r3, [pc, #164]	@ (8007f88 <__swsetup_r+0xa8>)
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	6818      	ldr	r0, [r3, #0]
 8007ee8:	460c      	mov	r4, r1
 8007eea:	b118      	cbz	r0, 8007ef4 <__swsetup_r+0x14>
 8007eec:	6a03      	ldr	r3, [r0, #32]
 8007eee:	b90b      	cbnz	r3, 8007ef4 <__swsetup_r+0x14>
 8007ef0:	f7fe fa7c 	bl	80063ec <__sinit>
 8007ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ef8:	0719      	lsls	r1, r3, #28
 8007efa:	d422      	bmi.n	8007f42 <__swsetup_r+0x62>
 8007efc:	06da      	lsls	r2, r3, #27
 8007efe:	d407      	bmi.n	8007f10 <__swsetup_r+0x30>
 8007f00:	2209      	movs	r2, #9
 8007f02:	602a      	str	r2, [r5, #0]
 8007f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f08:	81a3      	strh	r3, [r4, #12]
 8007f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0e:	e033      	b.n	8007f78 <__swsetup_r+0x98>
 8007f10:	0758      	lsls	r0, r3, #29
 8007f12:	d512      	bpl.n	8007f3a <__swsetup_r+0x5a>
 8007f14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f16:	b141      	cbz	r1, 8007f2a <__swsetup_r+0x4a>
 8007f18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f1c:	4299      	cmp	r1, r3
 8007f1e:	d002      	beq.n	8007f26 <__swsetup_r+0x46>
 8007f20:	4628      	mov	r0, r5
 8007f22:	f7ff f9e5 	bl	80072f0 <_free_r>
 8007f26:	2300      	movs	r3, #0
 8007f28:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f30:	81a3      	strh	r3, [r4, #12]
 8007f32:	2300      	movs	r3, #0
 8007f34:	6063      	str	r3, [r4, #4]
 8007f36:	6923      	ldr	r3, [r4, #16]
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	f043 0308 	orr.w	r3, r3, #8
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	6923      	ldr	r3, [r4, #16]
 8007f44:	b94b      	cbnz	r3, 8007f5a <__swsetup_r+0x7a>
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f50:	d003      	beq.n	8007f5a <__swsetup_r+0x7a>
 8007f52:	4621      	mov	r1, r4
 8007f54:	4628      	mov	r0, r5
 8007f56:	f000 f89d 	bl	8008094 <__smakebuf_r>
 8007f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f5e:	f013 0201 	ands.w	r2, r3, #1
 8007f62:	d00a      	beq.n	8007f7a <__swsetup_r+0x9a>
 8007f64:	2200      	movs	r2, #0
 8007f66:	60a2      	str	r2, [r4, #8]
 8007f68:	6962      	ldr	r2, [r4, #20]
 8007f6a:	4252      	negs	r2, r2
 8007f6c:	61a2      	str	r2, [r4, #24]
 8007f6e:	6922      	ldr	r2, [r4, #16]
 8007f70:	b942      	cbnz	r2, 8007f84 <__swsetup_r+0xa4>
 8007f72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f76:	d1c5      	bne.n	8007f04 <__swsetup_r+0x24>
 8007f78:	bd38      	pop	{r3, r4, r5, pc}
 8007f7a:	0799      	lsls	r1, r3, #30
 8007f7c:	bf58      	it	pl
 8007f7e:	6962      	ldrpl	r2, [r4, #20]
 8007f80:	60a2      	str	r2, [r4, #8]
 8007f82:	e7f4      	b.n	8007f6e <__swsetup_r+0x8e>
 8007f84:	2000      	movs	r0, #0
 8007f86:	e7f7      	b.n	8007f78 <__swsetup_r+0x98>
 8007f88:	20000180 	.word	0x20000180

08007f8c <memcpy>:
 8007f8c:	440a      	add	r2, r1
 8007f8e:	4291      	cmp	r1, r2
 8007f90:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f94:	d100      	bne.n	8007f98 <memcpy+0xc>
 8007f96:	4770      	bx	lr
 8007f98:	b510      	push	{r4, lr}
 8007f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fa2:	4291      	cmp	r1, r2
 8007fa4:	d1f9      	bne.n	8007f9a <memcpy+0xe>
 8007fa6:	bd10      	pop	{r4, pc}

08007fa8 <__assert_func>:
 8007fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007faa:	4614      	mov	r4, r2
 8007fac:	461a      	mov	r2, r3
 8007fae:	4b09      	ldr	r3, [pc, #36]	@ (8007fd4 <__assert_func+0x2c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	68d8      	ldr	r0, [r3, #12]
 8007fb6:	b954      	cbnz	r4, 8007fce <__assert_func+0x26>
 8007fb8:	4b07      	ldr	r3, [pc, #28]	@ (8007fd8 <__assert_func+0x30>)
 8007fba:	461c      	mov	r4, r3
 8007fbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007fc0:	9100      	str	r1, [sp, #0]
 8007fc2:	462b      	mov	r3, r5
 8007fc4:	4905      	ldr	r1, [pc, #20]	@ (8007fdc <__assert_func+0x34>)
 8007fc6:	f000 f82d 	bl	8008024 <fiprintf>
 8007fca:	f000 f8c1 	bl	8008150 <abort>
 8007fce:	4b04      	ldr	r3, [pc, #16]	@ (8007fe0 <__assert_func+0x38>)
 8007fd0:	e7f4      	b.n	8007fbc <__assert_func+0x14>
 8007fd2:	bf00      	nop
 8007fd4:	20000180 	.word	0x20000180
 8007fd8:	08008846 	.word	0x08008846
 8007fdc:	08008818 	.word	0x08008818
 8007fe0:	0800880b 	.word	0x0800880b

08007fe4 <__ascii_mbtowc>:
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	b901      	cbnz	r1, 8007fea <__ascii_mbtowc+0x6>
 8007fe8:	a901      	add	r1, sp, #4
 8007fea:	b142      	cbz	r2, 8007ffe <__ascii_mbtowc+0x1a>
 8007fec:	b14b      	cbz	r3, 8008002 <__ascii_mbtowc+0x1e>
 8007fee:	7813      	ldrb	r3, [r2, #0]
 8007ff0:	600b      	str	r3, [r1, #0]
 8007ff2:	7812      	ldrb	r2, [r2, #0]
 8007ff4:	1e10      	subs	r0, r2, #0
 8007ff6:	bf18      	it	ne
 8007ff8:	2001      	movne	r0, #1
 8007ffa:	b002      	add	sp, #8
 8007ffc:	4770      	bx	lr
 8007ffe:	4610      	mov	r0, r2
 8008000:	e7fb      	b.n	8007ffa <__ascii_mbtowc+0x16>
 8008002:	f06f 0001 	mvn.w	r0, #1
 8008006:	e7f8      	b.n	8007ffa <__ascii_mbtowc+0x16>

08008008 <__ascii_wctomb>:
 8008008:	4603      	mov	r3, r0
 800800a:	4608      	mov	r0, r1
 800800c:	b141      	cbz	r1, 8008020 <__ascii_wctomb+0x18>
 800800e:	2aff      	cmp	r2, #255	@ 0xff
 8008010:	d904      	bls.n	800801c <__ascii_wctomb+0x14>
 8008012:	228a      	movs	r2, #138	@ 0x8a
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	f04f 30ff 	mov.w	r0, #4294967295
 800801a:	4770      	bx	lr
 800801c:	700a      	strb	r2, [r1, #0]
 800801e:	2001      	movs	r0, #1
 8008020:	4770      	bx	lr
	...

08008024 <fiprintf>:
 8008024:	b40e      	push	{r1, r2, r3}
 8008026:	b503      	push	{r0, r1, lr}
 8008028:	4601      	mov	r1, r0
 800802a:	ab03      	add	r3, sp, #12
 800802c:	4805      	ldr	r0, [pc, #20]	@ (8008044 <fiprintf+0x20>)
 800802e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008032:	6800      	ldr	r0, [r0, #0]
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	f7ff fd51 	bl	8007adc <_vfiprintf_r>
 800803a:	b002      	add	sp, #8
 800803c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008040:	b003      	add	sp, #12
 8008042:	4770      	bx	lr
 8008044:	20000180 	.word	0x20000180

08008048 <__swhatbuf_r>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	460c      	mov	r4, r1
 800804c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008050:	2900      	cmp	r1, #0
 8008052:	b096      	sub	sp, #88	@ 0x58
 8008054:	4615      	mov	r5, r2
 8008056:	461e      	mov	r6, r3
 8008058:	da0d      	bge.n	8008076 <__swhatbuf_r+0x2e>
 800805a:	89a3      	ldrh	r3, [r4, #12]
 800805c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008060:	f04f 0100 	mov.w	r1, #0
 8008064:	bf14      	ite	ne
 8008066:	2340      	movne	r3, #64	@ 0x40
 8008068:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800806c:	2000      	movs	r0, #0
 800806e:	6031      	str	r1, [r6, #0]
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	b016      	add	sp, #88	@ 0x58
 8008074:	bd70      	pop	{r4, r5, r6, pc}
 8008076:	466a      	mov	r2, sp
 8008078:	f000 f848 	bl	800810c <_fstat_r>
 800807c:	2800      	cmp	r0, #0
 800807e:	dbec      	blt.n	800805a <__swhatbuf_r+0x12>
 8008080:	9901      	ldr	r1, [sp, #4]
 8008082:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008086:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800808a:	4259      	negs	r1, r3
 800808c:	4159      	adcs	r1, r3
 800808e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008092:	e7eb      	b.n	800806c <__swhatbuf_r+0x24>

08008094 <__smakebuf_r>:
 8008094:	898b      	ldrh	r3, [r1, #12]
 8008096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008098:	079d      	lsls	r5, r3, #30
 800809a:	4606      	mov	r6, r0
 800809c:	460c      	mov	r4, r1
 800809e:	d507      	bpl.n	80080b0 <__smakebuf_r+0x1c>
 80080a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	6123      	str	r3, [r4, #16]
 80080a8:	2301      	movs	r3, #1
 80080aa:	6163      	str	r3, [r4, #20]
 80080ac:	b003      	add	sp, #12
 80080ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b0:	ab01      	add	r3, sp, #4
 80080b2:	466a      	mov	r2, sp
 80080b4:	f7ff ffc8 	bl	8008048 <__swhatbuf_r>
 80080b8:	9f00      	ldr	r7, [sp, #0]
 80080ba:	4605      	mov	r5, r0
 80080bc:	4639      	mov	r1, r7
 80080be:	4630      	mov	r0, r6
 80080c0:	f7fd fc24 	bl	800590c <_malloc_r>
 80080c4:	b948      	cbnz	r0, 80080da <__smakebuf_r+0x46>
 80080c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ca:	059a      	lsls	r2, r3, #22
 80080cc:	d4ee      	bmi.n	80080ac <__smakebuf_r+0x18>
 80080ce:	f023 0303 	bic.w	r3, r3, #3
 80080d2:	f043 0302 	orr.w	r3, r3, #2
 80080d6:	81a3      	strh	r3, [r4, #12]
 80080d8:	e7e2      	b.n	80080a0 <__smakebuf_r+0xc>
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	6020      	str	r0, [r4, #0]
 80080de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080e2:	81a3      	strh	r3, [r4, #12]
 80080e4:	9b01      	ldr	r3, [sp, #4]
 80080e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80080ea:	b15b      	cbz	r3, 8008104 <__smakebuf_r+0x70>
 80080ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080f0:	4630      	mov	r0, r6
 80080f2:	f000 f81d 	bl	8008130 <_isatty_r>
 80080f6:	b128      	cbz	r0, 8008104 <__smakebuf_r+0x70>
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	f023 0303 	bic.w	r3, r3, #3
 80080fe:	f043 0301 	orr.w	r3, r3, #1
 8008102:	81a3      	strh	r3, [r4, #12]
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	431d      	orrs	r5, r3
 8008108:	81a5      	strh	r5, [r4, #12]
 800810a:	e7cf      	b.n	80080ac <__smakebuf_r+0x18>

0800810c <_fstat_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4d07      	ldr	r5, [pc, #28]	@ (800812c <_fstat_r+0x20>)
 8008110:	2300      	movs	r3, #0
 8008112:	4604      	mov	r4, r0
 8008114:	4608      	mov	r0, r1
 8008116:	4611      	mov	r1, r2
 8008118:	602b      	str	r3, [r5, #0]
 800811a:	f7fa fb07 	bl	800272c <_fstat>
 800811e:	1c43      	adds	r3, r0, #1
 8008120:	d102      	bne.n	8008128 <_fstat_r+0x1c>
 8008122:	682b      	ldr	r3, [r5, #0]
 8008124:	b103      	cbz	r3, 8008128 <_fstat_r+0x1c>
 8008126:	6023      	str	r3, [r4, #0]
 8008128:	bd38      	pop	{r3, r4, r5, pc}
 800812a:	bf00      	nop
 800812c:	2000069c 	.word	0x2000069c

08008130 <_isatty_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d06      	ldr	r5, [pc, #24]	@ (800814c <_isatty_r+0x1c>)
 8008134:	2300      	movs	r3, #0
 8008136:	4604      	mov	r4, r0
 8008138:	4608      	mov	r0, r1
 800813a:	602b      	str	r3, [r5, #0]
 800813c:	f7fa fb06 	bl	800274c <_isatty>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_isatty_r+0x1a>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	b103      	cbz	r3, 800814a <_isatty_r+0x1a>
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	2000069c 	.word	0x2000069c

08008150 <abort>:
 8008150:	b508      	push	{r3, lr}
 8008152:	2006      	movs	r0, #6
 8008154:	f000 f82c 	bl	80081b0 <raise>
 8008158:	2001      	movs	r0, #1
 800815a:	f7fa fab3 	bl	80026c4 <_exit>

0800815e <_raise_r>:
 800815e:	291f      	cmp	r1, #31
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4605      	mov	r5, r0
 8008164:	460c      	mov	r4, r1
 8008166:	d904      	bls.n	8008172 <_raise_r+0x14>
 8008168:	2316      	movs	r3, #22
 800816a:	6003      	str	r3, [r0, #0]
 800816c:	f04f 30ff 	mov.w	r0, #4294967295
 8008170:	bd38      	pop	{r3, r4, r5, pc}
 8008172:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008174:	b112      	cbz	r2, 800817c <_raise_r+0x1e>
 8008176:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800817a:	b94b      	cbnz	r3, 8008190 <_raise_r+0x32>
 800817c:	4628      	mov	r0, r5
 800817e:	f000 f831 	bl	80081e4 <_getpid_r>
 8008182:	4622      	mov	r2, r4
 8008184:	4601      	mov	r1, r0
 8008186:	4628      	mov	r0, r5
 8008188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800818c:	f000 b818 	b.w	80081c0 <_kill_r>
 8008190:	2b01      	cmp	r3, #1
 8008192:	d00a      	beq.n	80081aa <_raise_r+0x4c>
 8008194:	1c59      	adds	r1, r3, #1
 8008196:	d103      	bne.n	80081a0 <_raise_r+0x42>
 8008198:	2316      	movs	r3, #22
 800819a:	6003      	str	r3, [r0, #0]
 800819c:	2001      	movs	r0, #1
 800819e:	e7e7      	b.n	8008170 <_raise_r+0x12>
 80081a0:	2100      	movs	r1, #0
 80081a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80081a6:	4620      	mov	r0, r4
 80081a8:	4798      	blx	r3
 80081aa:	2000      	movs	r0, #0
 80081ac:	e7e0      	b.n	8008170 <_raise_r+0x12>
	...

080081b0 <raise>:
 80081b0:	4b02      	ldr	r3, [pc, #8]	@ (80081bc <raise+0xc>)
 80081b2:	4601      	mov	r1, r0
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	f7ff bfd2 	b.w	800815e <_raise_r>
 80081ba:	bf00      	nop
 80081bc:	20000180 	.word	0x20000180

080081c0 <_kill_r>:
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	4d07      	ldr	r5, [pc, #28]	@ (80081e0 <_kill_r+0x20>)
 80081c4:	2300      	movs	r3, #0
 80081c6:	4604      	mov	r4, r0
 80081c8:	4608      	mov	r0, r1
 80081ca:	4611      	mov	r1, r2
 80081cc:	602b      	str	r3, [r5, #0]
 80081ce:	f7fa fa69 	bl	80026a4 <_kill>
 80081d2:	1c43      	adds	r3, r0, #1
 80081d4:	d102      	bne.n	80081dc <_kill_r+0x1c>
 80081d6:	682b      	ldr	r3, [r5, #0]
 80081d8:	b103      	cbz	r3, 80081dc <_kill_r+0x1c>
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	bd38      	pop	{r3, r4, r5, pc}
 80081de:	bf00      	nop
 80081e0:	2000069c 	.word	0x2000069c

080081e4 <_getpid_r>:
 80081e4:	f7fa ba56 	b.w	8002694 <_getpid>

080081e8 <fmod>:
 80081e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ea:	ed2d 8b02 	vpush	{d8}
 80081ee:	ec57 6b10 	vmov	r6, r7, d0
 80081f2:	ec55 4b11 	vmov	r4, r5, d1
 80081f6:	f000 f8a3 	bl	8008340 <__ieee754_fmod>
 80081fa:	4622      	mov	r2, r4
 80081fc:	462b      	mov	r3, r5
 80081fe:	4630      	mov	r0, r6
 8008200:	4639      	mov	r1, r7
 8008202:	eeb0 8a40 	vmov.f32	s16, s0
 8008206:	eef0 8a60 	vmov.f32	s17, s1
 800820a:	f7f8 fc97 	bl	8000b3c <__aeabi_dcmpun>
 800820e:	b990      	cbnz	r0, 8008236 <fmod+0x4e>
 8008210:	2200      	movs	r2, #0
 8008212:	2300      	movs	r3, #0
 8008214:	4620      	mov	r0, r4
 8008216:	4629      	mov	r1, r5
 8008218:	f7f8 fc5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800821c:	b158      	cbz	r0, 8008236 <fmod+0x4e>
 800821e:	f7fe f9ed 	bl	80065fc <__errno>
 8008222:	2321      	movs	r3, #33	@ 0x21
 8008224:	6003      	str	r3, [r0, #0]
 8008226:	2200      	movs	r2, #0
 8008228:	2300      	movs	r3, #0
 800822a:	4610      	mov	r0, r2
 800822c:	4619      	mov	r1, r3
 800822e:	f7f8 fb15 	bl	800085c <__aeabi_ddiv>
 8008232:	ec41 0b18 	vmov	d8, r0, r1
 8008236:	eeb0 0a48 	vmov.f32	s0, s16
 800823a:	eef0 0a68 	vmov.f32	s1, s17
 800823e:	ecbd 8b02 	vpop	{d8}
 8008242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008244:	0000      	movs	r0, r0
	...

08008248 <ceil>:
 8008248:	ec51 0b10 	vmov	r0, r1, d0
 800824c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008254:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008258:	2e13      	cmp	r6, #19
 800825a:	460c      	mov	r4, r1
 800825c:	4605      	mov	r5, r0
 800825e:	4680      	mov	r8, r0
 8008260:	dc2e      	bgt.n	80082c0 <ceil+0x78>
 8008262:	2e00      	cmp	r6, #0
 8008264:	da11      	bge.n	800828a <ceil+0x42>
 8008266:	a332      	add	r3, pc, #200	@ (adr r3, 8008330 <ceil+0xe8>)
 8008268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826c:	f7f8 f816 	bl	800029c <__adddf3>
 8008270:	2200      	movs	r2, #0
 8008272:	2300      	movs	r3, #0
 8008274:	f7f8 fc58 	bl	8000b28 <__aeabi_dcmpgt>
 8008278:	b120      	cbz	r0, 8008284 <ceil+0x3c>
 800827a:	2c00      	cmp	r4, #0
 800827c:	db4f      	blt.n	800831e <ceil+0xd6>
 800827e:	4325      	orrs	r5, r4
 8008280:	d151      	bne.n	8008326 <ceil+0xde>
 8008282:	462c      	mov	r4, r5
 8008284:	4621      	mov	r1, r4
 8008286:	4628      	mov	r0, r5
 8008288:	e023      	b.n	80082d2 <ceil+0x8a>
 800828a:	4f2b      	ldr	r7, [pc, #172]	@ (8008338 <ceil+0xf0>)
 800828c:	4137      	asrs	r7, r6
 800828e:	ea01 0307 	and.w	r3, r1, r7
 8008292:	4303      	orrs	r3, r0
 8008294:	d01d      	beq.n	80082d2 <ceil+0x8a>
 8008296:	a326      	add	r3, pc, #152	@ (adr r3, 8008330 <ceil+0xe8>)
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	f7f7 fffe 	bl	800029c <__adddf3>
 80082a0:	2200      	movs	r2, #0
 80082a2:	2300      	movs	r3, #0
 80082a4:	f7f8 fc40 	bl	8000b28 <__aeabi_dcmpgt>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d0eb      	beq.n	8008284 <ceil+0x3c>
 80082ac:	2c00      	cmp	r4, #0
 80082ae:	bfc2      	ittt	gt
 80082b0:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80082b4:	4133      	asrgt	r3, r6
 80082b6:	18e4      	addgt	r4, r4, r3
 80082b8:	ea24 0407 	bic.w	r4, r4, r7
 80082bc:	2500      	movs	r5, #0
 80082be:	e7e1      	b.n	8008284 <ceil+0x3c>
 80082c0:	2e33      	cmp	r6, #51	@ 0x33
 80082c2:	dd0a      	ble.n	80082da <ceil+0x92>
 80082c4:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80082c8:	d103      	bne.n	80082d2 <ceil+0x8a>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	f7f7 ffe5 	bl	800029c <__adddf3>
 80082d2:	ec41 0b10 	vmov	d0, r0, r1
 80082d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082da:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80082de:	f04f 37ff 	mov.w	r7, #4294967295
 80082e2:	40df      	lsrs	r7, r3
 80082e4:	4238      	tst	r0, r7
 80082e6:	d0f4      	beq.n	80082d2 <ceil+0x8a>
 80082e8:	a311      	add	r3, pc, #68	@ (adr r3, 8008330 <ceil+0xe8>)
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f7f7 ffd5 	bl	800029c <__adddf3>
 80082f2:	2200      	movs	r2, #0
 80082f4:	2300      	movs	r3, #0
 80082f6:	f7f8 fc17 	bl	8000b28 <__aeabi_dcmpgt>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d0c2      	beq.n	8008284 <ceil+0x3c>
 80082fe:	2c00      	cmp	r4, #0
 8008300:	dd0a      	ble.n	8008318 <ceil+0xd0>
 8008302:	2e14      	cmp	r6, #20
 8008304:	d101      	bne.n	800830a <ceil+0xc2>
 8008306:	3401      	adds	r4, #1
 8008308:	e006      	b.n	8008318 <ceil+0xd0>
 800830a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800830e:	2301      	movs	r3, #1
 8008310:	40b3      	lsls	r3, r6
 8008312:	441d      	add	r5, r3
 8008314:	45a8      	cmp	r8, r5
 8008316:	d8f6      	bhi.n	8008306 <ceil+0xbe>
 8008318:	ea25 0507 	bic.w	r5, r5, r7
 800831c:	e7b2      	b.n	8008284 <ceil+0x3c>
 800831e:	2500      	movs	r5, #0
 8008320:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8008324:	e7ae      	b.n	8008284 <ceil+0x3c>
 8008326:	4c05      	ldr	r4, [pc, #20]	@ (800833c <ceil+0xf4>)
 8008328:	2500      	movs	r5, #0
 800832a:	e7ab      	b.n	8008284 <ceil+0x3c>
 800832c:	f3af 8000 	nop.w
 8008330:	8800759c 	.word	0x8800759c
 8008334:	7e37e43c 	.word	0x7e37e43c
 8008338:	000fffff 	.word	0x000fffff
 800833c:	3ff00000 	.word	0x3ff00000

08008340 <__ieee754_fmod>:
 8008340:	ec53 2b11 	vmov	r2, r3, d1
 8008344:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8008348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800834c:	ea52 040c 	orrs.w	r4, r2, ip
 8008350:	ec51 0b10 	vmov	r0, r1, d0
 8008354:	461e      	mov	r6, r3
 8008356:	4617      	mov	r7, r2
 8008358:	4696      	mov	lr, r2
 800835a:	d00c      	beq.n	8008376 <__ieee754_fmod+0x36>
 800835c:	4c77      	ldr	r4, [pc, #476]	@ (800853c <__ieee754_fmod+0x1fc>)
 800835e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8008362:	45a0      	cmp	r8, r4
 8008364:	4689      	mov	r9, r1
 8008366:	d806      	bhi.n	8008376 <__ieee754_fmod+0x36>
 8008368:	4254      	negs	r4, r2
 800836a:	4d75      	ldr	r5, [pc, #468]	@ (8008540 <__ieee754_fmod+0x200>)
 800836c:	4314      	orrs	r4, r2
 800836e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8008372:	42ac      	cmp	r4, r5
 8008374:	d909      	bls.n	800838a <__ieee754_fmod+0x4a>
 8008376:	f7f8 f947 	bl	8000608 <__aeabi_dmul>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	f7f8 fa6d 	bl	800085c <__aeabi_ddiv>
 8008382:	ec41 0b10 	vmov	d0, r0, r1
 8008386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838a:	45e0      	cmp	r8, ip
 800838c:	4682      	mov	sl, r0
 800838e:	4604      	mov	r4, r0
 8008390:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8008394:	dc09      	bgt.n	80083aa <__ieee754_fmod+0x6a>
 8008396:	dbf4      	blt.n	8008382 <__ieee754_fmod+0x42>
 8008398:	4282      	cmp	r2, r0
 800839a:	d8f2      	bhi.n	8008382 <__ieee754_fmod+0x42>
 800839c:	d105      	bne.n	80083aa <__ieee754_fmod+0x6a>
 800839e:	4b69      	ldr	r3, [pc, #420]	@ (8008544 <__ieee754_fmod+0x204>)
 80083a0:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80083a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083a8:	e7eb      	b.n	8008382 <__ieee754_fmod+0x42>
 80083aa:	4a65      	ldr	r2, [pc, #404]	@ (8008540 <__ieee754_fmod+0x200>)
 80083ac:	ea19 0f02 	tst.w	r9, r2
 80083b0:	d148      	bne.n	8008444 <__ieee754_fmod+0x104>
 80083b2:	f1b8 0f00 	cmp.w	r8, #0
 80083b6:	d13d      	bne.n	8008434 <__ieee754_fmod+0xf4>
 80083b8:	4963      	ldr	r1, [pc, #396]	@ (8008548 <__ieee754_fmod+0x208>)
 80083ba:	4653      	mov	r3, sl
 80083bc:	2b00      	cmp	r3, #0
 80083be:	dc36      	bgt.n	800842e <__ieee754_fmod+0xee>
 80083c0:	4216      	tst	r6, r2
 80083c2:	d14f      	bne.n	8008464 <__ieee754_fmod+0x124>
 80083c4:	f1bc 0f00 	cmp.w	ip, #0
 80083c8:	d144      	bne.n	8008454 <__ieee754_fmod+0x114>
 80083ca:	4a5f      	ldr	r2, [pc, #380]	@ (8008548 <__ieee754_fmod+0x208>)
 80083cc:	463b      	mov	r3, r7
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	dc3d      	bgt.n	800844e <__ieee754_fmod+0x10e>
 80083d2:	485e      	ldr	r0, [pc, #376]	@ (800854c <__ieee754_fmod+0x20c>)
 80083d4:	4281      	cmp	r1, r0
 80083d6:	db4a      	blt.n	800846e <__ieee754_fmod+0x12e>
 80083d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083e0:	485a      	ldr	r0, [pc, #360]	@ (800854c <__ieee754_fmod+0x20c>)
 80083e2:	4282      	cmp	r2, r0
 80083e4:	db57      	blt.n	8008496 <__ieee754_fmod+0x156>
 80083e6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80083ea:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 80083ee:	1a89      	subs	r1, r1, r2
 80083f0:	1b98      	subs	r0, r3, r6
 80083f2:	eba4 070e 	sub.w	r7, r4, lr
 80083f6:	2900      	cmp	r1, #0
 80083f8:	d162      	bne.n	80084c0 <__ieee754_fmod+0x180>
 80083fa:	4574      	cmp	r4, lr
 80083fc:	bf38      	it	cc
 80083fe:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8008402:	2800      	cmp	r0, #0
 8008404:	bfa4      	itt	ge
 8008406:	463c      	movge	r4, r7
 8008408:	4603      	movge	r3, r0
 800840a:	ea53 0104 	orrs.w	r1, r3, r4
 800840e:	d0c6      	beq.n	800839e <__ieee754_fmod+0x5e>
 8008410:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008414:	db69      	blt.n	80084ea <__ieee754_fmod+0x1aa>
 8008416:	494d      	ldr	r1, [pc, #308]	@ (800854c <__ieee754_fmod+0x20c>)
 8008418:	428a      	cmp	r2, r1
 800841a:	db6c      	blt.n	80084f6 <__ieee754_fmod+0x1b6>
 800841c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008420:	432b      	orrs	r3, r5
 8008422:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8008426:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800842a:	4620      	mov	r0, r4
 800842c:	e7a9      	b.n	8008382 <__ieee754_fmod+0x42>
 800842e:	3901      	subs	r1, #1
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	e7c3      	b.n	80083bc <__ieee754_fmod+0x7c>
 8008434:	4945      	ldr	r1, [pc, #276]	@ (800854c <__ieee754_fmod+0x20c>)
 8008436:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800843a:	2b00      	cmp	r3, #0
 800843c:	ddc0      	ble.n	80083c0 <__ieee754_fmod+0x80>
 800843e:	3901      	subs	r1, #1
 8008440:	005b      	lsls	r3, r3, #1
 8008442:	e7fa      	b.n	800843a <__ieee754_fmod+0xfa>
 8008444:	ea4f 5128 	mov.w	r1, r8, asr #20
 8008448:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800844c:	e7b8      	b.n	80083c0 <__ieee754_fmod+0x80>
 800844e:	3a01      	subs	r2, #1
 8008450:	005b      	lsls	r3, r3, #1
 8008452:	e7bc      	b.n	80083ce <__ieee754_fmod+0x8e>
 8008454:	4a3d      	ldr	r2, [pc, #244]	@ (800854c <__ieee754_fmod+0x20c>)
 8008456:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800845a:	2b00      	cmp	r3, #0
 800845c:	ddb9      	ble.n	80083d2 <__ieee754_fmod+0x92>
 800845e:	3a01      	subs	r2, #1
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	e7fa      	b.n	800845a <__ieee754_fmod+0x11a>
 8008464:	ea4f 522c 	mov.w	r2, ip, asr #20
 8008468:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800846c:	e7b1      	b.n	80083d2 <__ieee754_fmod+0x92>
 800846e:	1a40      	subs	r0, r0, r1
 8008470:	281f      	cmp	r0, #31
 8008472:	dc0a      	bgt.n	800848a <__ieee754_fmod+0x14a>
 8008474:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8008478:	fa08 f800 	lsl.w	r8, r8, r0
 800847c:	fa2a f303 	lsr.w	r3, sl, r3
 8008480:	ea43 0308 	orr.w	r3, r3, r8
 8008484:	fa0a f400 	lsl.w	r4, sl, r0
 8008488:	e7aa      	b.n	80083e0 <__ieee754_fmod+0xa0>
 800848a:	4b31      	ldr	r3, [pc, #196]	@ (8008550 <__ieee754_fmod+0x210>)
 800848c:	1a5b      	subs	r3, r3, r1
 800848e:	fa0a f303 	lsl.w	r3, sl, r3
 8008492:	2400      	movs	r4, #0
 8008494:	e7a4      	b.n	80083e0 <__ieee754_fmod+0xa0>
 8008496:	1a80      	subs	r0, r0, r2
 8008498:	281f      	cmp	r0, #31
 800849a:	dc0a      	bgt.n	80084b2 <__ieee754_fmod+0x172>
 800849c:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 80084a0:	fa0c fc00 	lsl.w	ip, ip, r0
 80084a4:	fa27 f606 	lsr.w	r6, r7, r6
 80084a8:	ea46 060c 	orr.w	r6, r6, ip
 80084ac:	fa07 fe00 	lsl.w	lr, r7, r0
 80084b0:	e79d      	b.n	80083ee <__ieee754_fmod+0xae>
 80084b2:	4e27      	ldr	r6, [pc, #156]	@ (8008550 <__ieee754_fmod+0x210>)
 80084b4:	1ab6      	subs	r6, r6, r2
 80084b6:	fa07 f606 	lsl.w	r6, r7, r6
 80084ba:	f04f 0e00 	mov.w	lr, #0
 80084be:	e796      	b.n	80083ee <__ieee754_fmod+0xae>
 80084c0:	4574      	cmp	r4, lr
 80084c2:	bf38      	it	cc
 80084c4:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80084c8:	2800      	cmp	r0, #0
 80084ca:	da05      	bge.n	80084d8 <__ieee754_fmod+0x198>
 80084cc:	0fe0      	lsrs	r0, r4, #31
 80084ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80084d2:	0064      	lsls	r4, r4, #1
 80084d4:	3901      	subs	r1, #1
 80084d6:	e78b      	b.n	80083f0 <__ieee754_fmod+0xb0>
 80084d8:	ea50 0307 	orrs.w	r3, r0, r7
 80084dc:	f43f af5f 	beq.w	800839e <__ieee754_fmod+0x5e>
 80084e0:	0ffb      	lsrs	r3, r7, #31
 80084e2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80084e6:	007c      	lsls	r4, r7, #1
 80084e8:	e7f4      	b.n	80084d4 <__ieee754_fmod+0x194>
 80084ea:	0fe1      	lsrs	r1, r4, #31
 80084ec:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80084f0:	0064      	lsls	r4, r4, #1
 80084f2:	3a01      	subs	r2, #1
 80084f4:	e78c      	b.n	8008410 <__ieee754_fmod+0xd0>
 80084f6:	1a89      	subs	r1, r1, r2
 80084f8:	2914      	cmp	r1, #20
 80084fa:	dc0a      	bgt.n	8008512 <__ieee754_fmod+0x1d2>
 80084fc:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8008500:	fa03 f202 	lsl.w	r2, r3, r2
 8008504:	40cc      	lsrs	r4, r1
 8008506:	4322      	orrs	r2, r4
 8008508:	410b      	asrs	r3, r1
 800850a:	ea43 0105 	orr.w	r1, r3, r5
 800850e:	4610      	mov	r0, r2
 8008510:	e737      	b.n	8008382 <__ieee754_fmod+0x42>
 8008512:	291f      	cmp	r1, #31
 8008514:	dc07      	bgt.n	8008526 <__ieee754_fmod+0x1e6>
 8008516:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800851a:	40cc      	lsrs	r4, r1
 800851c:	fa03 f202 	lsl.w	r2, r3, r2
 8008520:	4322      	orrs	r2, r4
 8008522:	462b      	mov	r3, r5
 8008524:	e7f1      	b.n	800850a <__ieee754_fmod+0x1ca>
 8008526:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800852a:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800852e:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8008532:	32e2      	adds	r2, #226	@ 0xe2
 8008534:	fa43 f202 	asr.w	r2, r3, r2
 8008538:	e7f3      	b.n	8008522 <__ieee754_fmod+0x1e2>
 800853a:	bf00      	nop
 800853c:	7fefffff 	.word	0x7fefffff
 8008540:	7ff00000 	.word	0x7ff00000
 8008544:	08008948 	.word	0x08008948
 8008548:	fffffbed 	.word	0xfffffbed
 800854c:	fffffc02 	.word	0xfffffc02
 8008550:	fffffbe2 	.word	0xfffffbe2

08008554 <_init>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	bf00      	nop
 8008558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855a:	bc08      	pop	{r3}
 800855c:	469e      	mov	lr, r3
 800855e:	4770      	bx	lr

08008560 <_fini>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	bf00      	nop
 8008564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008566:	bc08      	pop	{r3}
 8008568:	469e      	mov	lr, r3
 800856a:	4770      	bx	lr
