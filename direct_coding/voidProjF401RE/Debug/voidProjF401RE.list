
voidProjF401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a0c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08007bb0  08007bb0  00008bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f98  08007f98  0000933c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f98  08007f98  00008f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fa0  08007fa0  0000933c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fa0  08007fa0  00008fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fa4  08007fa4  00008fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08007fa8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000340  080082e4  00009340  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  080082e4  00009654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000933c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d354  00000000  00000000  0000936c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ceb  00000000  00000000  000166c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  000183b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ef  00000000  00000000  00019060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017738  00000000  00000000  00019a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1d9  00000000  00000000  00031187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009065b  00000000  00000000  0003f360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf9bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f4  00000000  00000000  000cfa00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000d40f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000340 	.word	0x20000340
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b94 	.word	0x08007b94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000344 	.word	0x20000344
 80001dc:	08007b94 	.word	0x08007b94

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <cb_init>:
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	68b8      	ldr	r0, [r7, #8]
 8000ef8:	f003 ffe0 	bl	8004ebc <calloc>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <cb_init+0x2a>
 8000f0c:	4811      	ldr	r0, [pc, #68]	@ (8000f54 <cb_init+0x6c>)
 8000f0e:	f004 fdc1 	bl	8005a94 <iprintf>
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	fb01 f303 	mul.w	r3, r1, r3
 8000f1e:	441a      	add	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	611a      	str	r2, [r3, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	615a      	str	r2, [r3, #20]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	619a      	str	r2, [r3, #24]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	771a      	strb	r2, [r3, #28]
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	08007bb0 	.word	0x08007bb0

08000f58 <cb_push_back>:
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d102      	bne.n	8000f74 <cb_push_back+0x1c>
 8000f6e:	4815      	ldr	r0, [pc, #84]	@ (8000fc4 <cb_push_back+0x6c>)
 8000f70:	f004 fd90 	bl	8005a94 <iprintf>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	771a      	strb	r2, [r3, #28]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6958      	ldr	r0, [r3, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	461a      	mov	r2, r3
 8000f84:	6839      	ldr	r1, [r7, #0]
 8000f86:	f004 fdda 	bl	8005b3e <memmove>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695a      	ldr	r2, [r3, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	441a      	add	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	615a      	str	r2, [r3, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	695a      	ldr	r2, [r3, #20]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d103      	bne.n	8000fac <cb_push_back+0x54>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	771a      	strb	r2, [r3, #28]
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	08007bc4 	.word	0x08007bc4

08000fc8 <cb_pop_front>:
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <cb_pop_front+0x18>
 8000fda:	4815      	ldr	r0, [pc, #84]	@ (8001030 <cb_pop_front+0x68>)
 8000fdc:	f004 fd5a 	bl	8005a94 <iprintf>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6999      	ldr	r1, [r3, #24]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	6838      	ldr	r0, [r7, #0]
 8000fec:	f004 fda7 	bl	8005b3e <memmove>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	441a      	add	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699a      	ldr	r2, [r3, #24]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	d103      	bne.n	8001012 <cb_pop_front+0x4a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	619a      	str	r2, [r3, #24]
 8001012:	bf00      	nop
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7f1b      	ldrb	r3, [r3, #28]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1fb      	bne.n	8001014 <cb_pop_front+0x4c>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	08007bc4 	.word	0x08007bc4

08001034 <_write>:
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d00a      	beq.n	800105c <_write+0x28>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d007      	beq.n	800105c <_write+0x28>
 800104c:	f004 fdf4 	bl	8005c38 <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	2209      	movs	r2, #9
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e00f      	b.n	800107c <_write+0x48>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	4807      	ldr	r0, [pc, #28]	@ (8001084 <_write+0x50>)
 8001068:	f003 fbb3 	bl	80047d2 <HAL_UART_Transmit>
 800106c:	4603      	mov	r3, r0
 800106e:	75fb      	strb	r3, [r7, #23]
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <_write+0x46>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	e000      	b.n	800107c <_write+0x48>
 800107a:	2300      	movs	r3, #0
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000434 	.word	0x20000434

08001088 <setPulseFromDutyValue>:
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	ed87 0b00 	vstr	d0, [r7]
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001098:	4877      	ldr	r0, [pc, #476]	@ (8001278 <setPulseFromDutyValue+0x1f0>)
 800109a:	f001 fe17 	bl	8002ccc <HAL_GPIO_WritePin>
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd3d 	bl	8000b28 <__aeabi_dcmpgt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <setPulseFromDutyValue+0x36>
 80010b4:	2300      	movs	r3, #0
 80010b6:	81fb      	strh	r3, [r7, #14]
 80010b8:	2304      	movs	r3, #4
 80010ba:	81bb      	strh	r3, [r7, #12]
 80010bc:	e003      	b.n	80010c6 <setPulseFromDutyValue+0x3e>
 80010be:	2304      	movs	r3, #4
 80010c0:	81fb      	strh	r3, [r7, #14]
 80010c2:	2300      	movs	r3, #0
 80010c4:	81bb      	strh	r3, [r7, #12]
 80010c6:	89bb      	ldrh	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d104      	bne.n	80010d6 <setPulseFromDutyValue+0x4e>
 80010cc:	4b6b      	ldr	r3, [pc, #428]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80010d4:	e013      	b.n	80010fe <setPulseFromDutyValue+0x76>
 80010d6:	89bb      	ldrh	r3, [r7, #12]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d104      	bne.n	80010e6 <setPulseFromDutyValue+0x5e>
 80010dc:	4b67      	ldr	r3, [pc, #412]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	6393      	str	r3, [r2, #56]	@ 0x38
 80010e4:	e00b      	b.n	80010fe <setPulseFromDutyValue+0x76>
 80010e6:	89bb      	ldrh	r3, [r7, #12]
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d104      	bne.n	80010f6 <setPulseFromDutyValue+0x6e>
 80010ec:	4b63      	ldr	r3, [pc, #396]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2300      	movs	r3, #0
 80010f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80010f4:	e003      	b.n	80010fe <setPulseFromDutyValue+0x76>
 80010f6:	4b61      	ldr	r3, [pc, #388]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	2300      	movs	r3, #0
 80010fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d12b      	bne.n	800115c <setPulseFromDutyValue+0xd4>
 8001104:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001108:	f7ff fd2e 	bl	8000b68 <__aeabi_d2iz>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	bfb8      	it	lt
 8001112:	425b      	neglt	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa0d 	bl	8000534 <__aeabi_i2d>
 800111a:	4604      	mov	r4, r0
 800111c:	460d      	mov	r5, r1
 800111e:	4b57      	ldr	r3, [pc, #348]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f9f6 	bl	8000514 <__aeabi_ui2d>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4620      	mov	r0, r4
 800112e:	4629      	mov	r1, r5
 8001130:	f7ff fa6a 	bl	8000608 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b4f      	ldr	r3, [pc, #316]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 8001142:	f7ff fb8b 	bl	800085c <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	494c      	ldr	r1, [pc, #304]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 800114c:	680c      	ldr	r4, [r1, #0]
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fd31 	bl	8000bb8 <__aeabi_d2uiz>
 8001156:	4603      	mov	r3, r0
 8001158:	6363      	str	r3, [r4, #52]	@ 0x34
 800115a:	e088      	b.n	800126e <setPulseFromDutyValue+0x1e6>
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	2b04      	cmp	r3, #4
 8001160:	d12b      	bne.n	80011ba <setPulseFromDutyValue+0x132>
 8001162:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001166:	f7ff fcff 	bl	8000b68 <__aeabi_d2iz>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	bfb8      	it	lt
 8001170:	425b      	neglt	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9de 	bl	8000534 <__aeabi_i2d>
 8001178:	4604      	mov	r4, r0
 800117a:	460d      	mov	r5, r1
 800117c:	4b3f      	ldr	r3, [pc, #252]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9c7 	bl	8000514 <__aeabi_ui2d>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff fa3b 	bl	8000608 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 80011a0:	f7ff fb5c 	bl	800085c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4934      	ldr	r1, [pc, #208]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80011aa:	680c      	ldr	r4, [r1, #0]
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fd02 	bl	8000bb8 <__aeabi_d2uiz>
 80011b4:	4603      	mov	r3, r0
 80011b6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80011b8:	e059      	b.n	800126e <setPulseFromDutyValue+0x1e6>
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d12b      	bne.n	8001218 <setPulseFromDutyValue+0x190>
 80011c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011c4:	f7ff fcd0 	bl	8000b68 <__aeabi_d2iz>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bfb8      	it	lt
 80011ce:	425b      	neglt	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9af 	bl	8000534 <__aeabi_i2d>
 80011d6:	4604      	mov	r4, r0
 80011d8:	460d      	mov	r5, r1
 80011da:	4b28      	ldr	r3, [pc, #160]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f998 	bl	8000514 <__aeabi_ui2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7ff fa0c 	bl	8000608 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 80011fe:	f7ff fb2d 	bl	800085c <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	491d      	ldr	r1, [pc, #116]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001208:	680c      	ldr	r4, [r1, #0]
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fcd3 	bl	8000bb8 <__aeabi_d2uiz>
 8001212:	4603      	mov	r3, r0
 8001214:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001216:	e02a      	b.n	800126e <setPulseFromDutyValue+0x1e6>
 8001218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800121c:	f7ff fca4 	bl	8000b68 <__aeabi_d2iz>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	bfb8      	it	lt
 8001226:	425b      	neglt	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f983 	bl	8000534 <__aeabi_i2d>
 800122e:	4604      	mov	r4, r0
 8001230:	460d      	mov	r5, r1
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f96c 	bl	8000514 <__aeabi_ui2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff f9e0 	bl	8000608 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 8001256:	f7ff fb01 	bl	800085c <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4907      	ldr	r1, [pc, #28]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001260:	680c      	ldr	r4, [r1, #0]
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fca7 	bl	8000bb8 <__aeabi_d2uiz>
 800126a:	4603      	mov	r3, r0
 800126c:	6423      	str	r3, [r4, #64]	@ 0x40
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bdb0      	pop	{r4, r5, r7, pc}
 8001276:	bf00      	nop
 8001278:	40020000 	.word	0x40020000
 800127c:	200003a4 	.word	0x200003a4
 8001280:	40590000 	.word	0x40590000

08001284 <getTicksDelta>:
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	ed87 0b02 	vstr	d0, [r7, #8]
 800128e:	ed87 1b00 	vstr	d1, [r7]
 8001292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001296:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800129a:	f7fe fffd 	bl	8000298 <__aeabi_dsub>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fc5f 	bl	8000b68 <__aeabi_d2iz>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f113 0f3f 	cmn.w	r3, #63	@ 0x3f
 80012b0:	db19      	blt.n	80012e6 <getTicksDelta+0x62>
 80012b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ba:	f7fe ffed 	bl	8000298 <__aeabi_dsub>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fc4f 	bl	8000b68 <__aeabi_d2iz>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80012ce:	dc0a      	bgt.n	80012e6 <getTicksDelta+0x62>
 80012d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012d8:	f7fe ffde 	bl	8000298 <__aeabi_dsub>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80012e4:	e041      	b.n	800136a <getTicksDelta+0xe6>
 80012e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ee:	f7ff fc1b 	bl	8000b28 <__aeabi_dcmpgt>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01c      	beq.n	8001332 <getTicksDelta+0xae>
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <getTicksDelta+0xfc>)
 80012fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001302:	f7fe ffcb 	bl	800029c <__adddf3>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <getTicksDelta+0x100>)
 8001314:	f7fe ffc0 	bl	8000298 <__aeabi_dsub>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001324:	f7fe ffb8 	bl	8000298 <__aeabi_dsub>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001330:	e01b      	b.n	800136a <getTicksDelta+0xe6>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <getTicksDelta+0xfc>)
 8001338:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800133c:	f7fe ffac 	bl	8000298 <__aeabi_dsub>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <getTicksDelta+0x100>)
 800134e:	f7fe ffa5 	bl	800029c <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800135e:	f7fe ff9b 	bl	8000298 <__aeabi_dsub>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800136a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800136e:	ec43 2b17 	vmov	d7, r2, r3
 8001372:	eeb0 0a47 	vmov.f32	s0, s14
 8001376:	eef0 0a67 	vmov.f32	s1, s15
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40f00000 	.word	0x40f00000
 8001384:	3ff00000 	.word	0x3ff00000

08001388 <sign>:
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	ed87 0b00 	vstr	d0, [r7]
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800139e:	f7ff fbb9 	bl	8000b14 <__aeabi_dcmpge>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <sign+0x28>
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <sign+0x40>)
 80013ae:	e002      	b.n	80013b6 <sign+0x2e>
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <sign+0x44>)
 80013b6:	ec43 2b17 	vmov	d7, r2, r3
 80013ba:	eeb0 0a47 	vmov.f32	s0, s14
 80013be:	eef0 0a67 	vmov.f32	s1, s15
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	3ff00000 	.word	0x3ff00000
 80013cc:	bff00000 	.word	0xbff00000

080013d0 <getPositionByDelta>:
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	ed87 0b00 	vstr	d0, [r7]
 80013da:	4b25      	ldr	r3, [pc, #148]	@ (8001470 <getPositionByDelta+0xa0>)
 80013dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013e4:	f7fe ff5a 	bl	800029c <__adddf3>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4920      	ldr	r1, [pc, #128]	@ (8001470 <getPositionByDelta+0xa0>)
 80013ee:	e9c1 2300 	strd	r2, r3, [r1]
 80013f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <getPositionByDelta+0xa0>)
 80013f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f8:	a319      	add	r3, pc, #100	@ (adr r3, 8001460 <getPositionByDelta+0x90>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff fa2d 	bl	800085c <__aeabi_ddiv>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	a317      	add	r3, pc, #92	@ (adr r3, 8001468 <getPositionByDelta+0x98>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	f7ff f8fa 	bl	8000608 <__aeabi_dmul>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800141c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001420:	f7ff ffb2 	bl	8001388 <sign>
 8001424:	ec55 4b10 	vmov	r4, r5, d0
 8001428:	ed9f 1b0f 	vldr	d1, [pc, #60]	@ 8001468 <getPositionByDelta+0x98>
 800142c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001430:	f006 f9fa 	bl	8007828 <fmod>
 8001434:	ec53 2b10 	vmov	r2, r3, d0
 8001438:	4620      	mov	r0, r4
 800143a:	4629      	mov	r1, r5
 800143c:	f7ff f8e4 	bl	8000608 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800144c:	ec43 2b17 	vmov	d7, r2, r3
 8001450:	eeb0 0a47 	vmov.f32	s0, s14
 8001454:	eef0 0a67 	vmov.f32	s1, s15
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bdb0      	pop	{r4, r5, r7, pc}
 800145e:	bf00      	nop
 8001460:	00000000 	.word	0x00000000
 8001464:	40c06800 	.word	0x40c06800
 8001468:	54442eea 	.word	0x54442eea
 800146c:	401921fb 	.word	0x401921fb
 8001470:	200004e0 	.word	0x200004e0

08001474 <main>:
 8001474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001478:	b09f      	sub	sp, #124	@ 0x7c
 800147a:	af0a      	add	r7, sp, #40	@ 0x28
 800147c:	f001 f8fa 	bl	8002674 <HAL_Init>
 8001480:	4b4d      	ldr	r3, [pc, #308]	@ (80015b8 <main+0x144>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f855 	bl	8000534 <__aeabi_i2d>
 800148a:	4b4c      	ldr	r3, [pc, #304]	@ (80015bc <main+0x148>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f8ba 	bl	8000608 <__aeabi_dmul>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	f04f 0000 	mov.w	r0, #0
 800149c:	4948      	ldr	r1, [pc, #288]	@ (80015c0 <main+0x14c>)
 800149e:	f7ff f9dd 	bl	800085c <__aeabi_ddiv>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	ec43 2b17 	vmov	d7, r2, r3
 80014aa:	eeb0 0a47 	vmov.f32	s0, s14
 80014ae:	eef0 0a67 	vmov.f32	s1, s15
 80014b2:	f006 f9e9 	bl	8007888 <ceil>
 80014b6:	ec53 2b10 	vmov	r2, r3, d0
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff fb7b 	bl	8000bb8 <__aeabi_d2uiz>
 80014c2:	4603      	mov	r3, r0
 80014c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80014c6:	2238      	movs	r2, #56	@ 0x38
 80014c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80014ca:	483e      	ldr	r0, [pc, #248]	@ (80015c4 <main+0x150>)
 80014cc:	f7ff fd0c 	bl	8000ee8 <cb_init>
 80014d0:	f000 f888 	bl	80015e4 <SystemClock_Config>
 80014d4:	f000 fa44 	bl	8001960 <MX_GPIO_Init>
 80014d8:	f000 fa18 	bl	800190c <MX_USART2_UART_Init>
 80014dc:	f000 f946 	bl	800176c <MX_TIM3_Init>
 80014e0:	f000 f8ec 	bl	80016bc <MX_TIM1_Init>
 80014e4:	f000 f9c4 	bl	8001870 <MX_TIM4_Init>
 80014e8:	2100      	movs	r1, #0
 80014ea:	4837      	ldr	r0, [pc, #220]	@ (80015c8 <main+0x154>)
 80014ec:	f002 f9c6 	bl	800387c <HAL_TIM_PWM_Start>
 80014f0:	2104      	movs	r1, #4
 80014f2:	4835      	ldr	r0, [pc, #212]	@ (80015c8 <main+0x154>)
 80014f4:	f002 f9c2 	bl	800387c <HAL_TIM_PWM_Start>
 80014f8:	2300      	movs	r3, #0
 80014fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014fc:	4a33      	ldr	r2, [pc, #204]	@ (80015cc <main+0x158>)
 80014fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	4931      	ldr	r1, [pc, #196]	@ (80015d0 <main+0x15c>)
 800150a:	e9c1 2300 	strd	r2, r3, [r1]
 800150e:	4831      	ldr	r0, [pc, #196]	@ (80015d4 <main+0x160>)
 8001510:	f004 fac0 	bl	8005a94 <iprintf>
 8001514:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001518:	f001 f91e 	bl	8002758 <HAL_Delay>
 800151c:	482d      	ldr	r0, [pc, #180]	@ (80015d4 <main+0x160>)
 800151e:	f004 fab9 	bl	8005a94 <iprintf>
 8001522:	482d      	ldr	r0, [pc, #180]	@ (80015d8 <main+0x164>)
 8001524:	f002 f894 	bl	8003650 <HAL_TIM_Base_Start>
 8001528:	482c      	ldr	r0, [pc, #176]	@ (80015dc <main+0x168>)
 800152a:	f002 f8eb 	bl	8003704 <HAL_TIM_Base_Start_IT>
 800152e:	4b25      	ldr	r3, [pc, #148]	@ (80015c4 <main+0x150>)
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	643b      	str	r3, [r7, #64]	@ 0x40
 8001534:	2300      	movs	r3, #0
 8001536:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001538:	e024      	b.n	8001584 <main+0x110>
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	4619      	mov	r1, r3
 8001540:	4820      	ldr	r0, [pc, #128]	@ (80015c4 <main+0x150>)
 8001542:	f7ff fd41 	bl	8000fc8 <cb_pop_front>
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800154e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001552:	69be      	ldr	r6, [r7, #24]
 8001554:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001558:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800155c:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8001560:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001564:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001568:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800156c:	9602      	str	r6, [sp, #8]
 800156e:	e9cd 2300 	strd	r2, r3, [sp]
 8001572:	4652      	mov	r2, sl
 8001574:	465b      	mov	r3, fp
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4819      	ldr	r0, [pc, #100]	@ (80015e0 <main+0x16c>)
 800157a:	f004 fa8b 	bl	8005a94 <iprintf>
 800157e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001580:	3301      	adds	r3, #1
 8001582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001584:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001586:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001588:	429a      	cmp	r2, r3
 800158a:	d3d6      	bcc.n	800153a <main+0xc6>
 800158c:	4a0f      	ldr	r2, [pc, #60]	@ (80015cc <main+0x158>)
 800158e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	490d      	ldr	r1, [pc, #52]	@ (80015d0 <main+0x15c>)
 800159a:	e9c1 2300 	strd	r2, r3, [r1]
 800159e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015a0:	3301      	adds	r3, #1
 80015a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015a4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80015a8:	f001 f8d6 	bl	8002758 <HAL_Delay>
 80015ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015ae:	2b07      	cmp	r3, #7
 80015b0:	ddbd      	ble.n	800152e <main+0xba>
 80015b2:	2300      	movs	r3, #0
 80015b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015b6:	e7ba      	b.n	800152e <main+0xba>
 80015b8:	2000004c 	.word	0x2000004c
 80015bc:	20000000 	.word	0x20000000
 80015c0:	40240000 	.word	0x40240000
 80015c4:	20000478 	.word	0x20000478
 80015c8:	200003a4 	.word	0x200003a4
 80015cc:	20000008 	.word	0x20000008
 80015d0:	200004d0 	.word	0x200004d0
 80015d4:	08007bd8 	.word	0x08007bd8
 80015d8:	2000035c 	.word	0x2000035c
 80015dc:	200003ec 	.word	0x200003ec
 80015e0:	08007be0 	.word	0x08007be0

080015e4 <SystemClock_Config>:
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	@ 0x50
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	2230      	movs	r2, #48	@ 0x30
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 fabd 	bl	8005b72 <memset>
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	4b29      	ldr	r3, [pc, #164]	@ (80016b4 <SystemClock_Config+0xd0>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001610:	4a28      	ldr	r2, [pc, #160]	@ (80016b4 <SystemClock_Config+0xd0>)
 8001612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	@ 0x40
 8001618:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <SystemClock_Config+0xd0>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <SystemClock_Config+0xd4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001630:	4a21      	ldr	r2, [pc, #132]	@ (80016b8 <SystemClock_Config+0xd4>)
 8001632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b1f      	ldr	r3, [pc, #124]	@ (80016b8 <SystemClock_Config+0xd4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2302      	movs	r3, #2
 8001646:	623b      	str	r3, [r7, #32]
 8001648:	2301      	movs	r3, #1
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800164c:	2310      	movs	r3, #16
 800164e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001650:	2302      	movs	r3, #2
 8001652:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001654:	2300      	movs	r3, #0
 8001656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001658:	2310      	movs	r3, #16
 800165a:	643b      	str	r3, [r7, #64]	@ 0x40
 800165c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001660:	647b      	str	r3, [r7, #68]	@ 0x44
 8001662:	2304      	movs	r3, #4
 8001664:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001666:	2304      	movs	r3, #4
 8001668:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	4618      	mov	r0, r3
 8001670:	f001 fb46 	bl	8002d00 <HAL_RCC_OscConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x9a>
 800167a:	f000 fda5 	bl	80021c8 <Error_Handler>
 800167e:	230f      	movs	r3, #15
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	2302      	movs	r3, #2
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2102      	movs	r1, #2
 800169a:	4618      	mov	r0, r3
 800169c:	f001 fda8 	bl	80031f0 <HAL_RCC_ClockConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0xc6>
 80016a6:	f000 fd8f 	bl	80021c8 <Error_Handler>
 80016aa:	bf00      	nop
 80016ac:	3750      	adds	r7, #80	@ 0x50
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000

080016bc <MX_TIM1_Init>:
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08c      	sub	sp, #48	@ 0x30
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	2224      	movs	r2, #36	@ 0x24
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f004 fa51 	bl	8005b72 <memset>
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <MX_TIM1_Init+0xa8>)
 80016da:	4a23      	ldr	r2, [pc, #140]	@ (8001768 <MX_TIM1_Init+0xac>)
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <MX_TIM1_Init+0xa8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <MX_TIM1_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <MX_TIM1_Init+0xa8>)
 80016ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <MX_TIM1_Init+0xa8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <MX_TIM1_Init+0xa8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <MX_TIM1_Init+0xa8>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
 8001704:	2303      	movs	r3, #3
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	2301      	movs	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
 800171c:	2301      	movs	r3, #1
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4619      	mov	r1, r3
 800172e:	480d      	ldr	r0, [pc, #52]	@ (8001764 <MX_TIM1_Init+0xa8>)
 8001730:	f002 f954 	bl	80039dc <HAL_TIM_Encoder_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM1_Init+0x82>
 800173a:	f000 fd45 	bl	80021c8 <Error_Handler>
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	@ (8001764 <MX_TIM1_Init+0xa8>)
 800174c:	f002 ff72 	bl	8004634 <HAL_TIMEx_MasterConfigSynchronization>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM1_Init+0x9e>
 8001756:	f000 fd37 	bl	80021c8 <Error_Handler>
 800175a:	bf00      	nop
 800175c:	3730      	adds	r7, #48	@ 0x30
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000035c 	.word	0x2000035c
 8001768:	40010000 	.word	0x40010000

0800176c <MX_TIM3_Init>:
 800176c:	b580      	push	{r7, lr}
 800176e:	b08e      	sub	sp, #56	@ 0x38
 8001770:	af00      	add	r7, sp, #0
 8001772:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	615a      	str	r2, [r3, #20]
 800179a:	619a      	str	r2, [r3, #24]
 800179c:	4b32      	ldr	r3, [pc, #200]	@ (8001868 <MX_TIM3_Init+0xfc>)
 800179e:	4a33      	ldr	r2, [pc, #204]	@ (800186c <MX_TIM3_Init+0x100>)
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	4b31      	ldr	r3, [pc, #196]	@ (8001868 <MX_TIM3_Init+0xfc>)
 80017a4:	2253      	movs	r2, #83	@ 0x53
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <MX_TIM3_Init+0xfc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001868 <MX_TIM3_Init+0xfc>)
 80017b0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001868 <MX_TIM3_Init+0xfc>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001868 <MX_TIM3_Init+0xfc>)
 80017be:	2280      	movs	r2, #128	@ 0x80
 80017c0:	619a      	str	r2, [r3, #24]
 80017c2:	4829      	ldr	r0, [pc, #164]	@ (8001868 <MX_TIM3_Init+0xfc>)
 80017c4:	f001 fef4 	bl	80035b0 <HAL_TIM_Base_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM3_Init+0x66>
 80017ce:	f000 fcfb 	bl	80021c8 <Error_Handler>
 80017d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017dc:	4619      	mov	r1, r3
 80017de:	4822      	ldr	r0, [pc, #136]	@ (8001868 <MX_TIM3_Init+0xfc>)
 80017e0:	f002 fb6c 	bl	8003ebc <HAL_TIM_ConfigClockSource>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM3_Init+0x82>
 80017ea:	f000 fced 	bl	80021c8 <Error_Handler>
 80017ee:	481e      	ldr	r0, [pc, #120]	@ (8001868 <MX_TIM3_Init+0xfc>)
 80017f0:	f001 ffea 	bl	80037c8 <HAL_TIM_PWM_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM3_Init+0x92>
 80017fa:	f000 fce5 	bl	80021c8 <Error_Handler>
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
 8001806:	f107 0320 	add.w	r3, r7, #32
 800180a:	4619      	mov	r1, r3
 800180c:	4816      	ldr	r0, [pc, #88]	@ (8001868 <MX_TIM3_Init+0xfc>)
 800180e:	f002 ff11 	bl	8004634 <HAL_TIMEx_MasterConfigSynchronization>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0xb0>
 8001818:	f000 fcd6 	bl	80021c8 <Error_Handler>
 800181c:	2360      	movs	r3, #96	@ 0x60
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	480d      	ldr	r0, [pc, #52]	@ (8001868 <MX_TIM3_Init+0xfc>)
 8001834:	f002 fa80 	bl	8003d38 <HAL_TIM_PWM_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM3_Init+0xd6>
 800183e:	f000 fcc3 	bl	80021c8 <Error_Handler>
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	2204      	movs	r2, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4807      	ldr	r0, [pc, #28]	@ (8001868 <MX_TIM3_Init+0xfc>)
 800184a:	f002 fa75 	bl	8003d38 <HAL_TIM_PWM_ConfigChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0xec>
 8001854:	f000 fcb8 	bl	80021c8 <Error_Handler>
 8001858:	4803      	ldr	r0, [pc, #12]	@ (8001868 <MX_TIM3_Init+0xfc>)
 800185a:	f000 fd69 	bl	8002330 <HAL_TIM_MspPostInit>
 800185e:	bf00      	nop
 8001860:	3738      	adds	r7, #56	@ 0x38
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200003a4 	.word	0x200003a4
 800186c:	40000400 	.word	0x40000400

08001870 <MX_TIM4_Init>:
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	463b      	mov	r3, r7
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <MX_TIM4_Init+0x94>)
 800188e:	4a1e      	ldr	r2, [pc, #120]	@ (8001908 <MX_TIM4_Init+0x98>)
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	4b1c      	ldr	r3, [pc, #112]	@ (8001904 <MX_TIM4_Init+0x94>)
 8001894:	2253      	movs	r2, #83	@ 0x53
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <MX_TIM4_Init+0x94>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <MX_TIM4_Init+0x94>)
 80018a0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	4b17      	ldr	r3, [pc, #92]	@ (8001904 <MX_TIM4_Init+0x94>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
 80018ac:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <MX_TIM4_Init+0x94>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
 80018b2:	4814      	ldr	r0, [pc, #80]	@ (8001904 <MX_TIM4_Init+0x94>)
 80018b4:	f001 fe7c 	bl	80035b0 <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM4_Init+0x52>
 80018be:	f000 fc83 	bl	80021c8 <Error_Handler>
 80018c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	4619      	mov	r1, r3
 80018ce:	480d      	ldr	r0, [pc, #52]	@ (8001904 <MX_TIM4_Init+0x94>)
 80018d0:	f002 faf4 	bl	8003ebc <HAL_TIM_ConfigClockSource>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM4_Init+0x6e>
 80018da:	f000 fc75 	bl	80021c8 <Error_Handler>
 80018de:	2300      	movs	r3, #0
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	463b      	mov	r3, r7
 80018e8:	4619      	mov	r1, r3
 80018ea:	4806      	ldr	r0, [pc, #24]	@ (8001904 <MX_TIM4_Init+0x94>)
 80018ec:	f002 fea2 	bl	8004634 <HAL_TIMEx_MasterConfigSynchronization>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM4_Init+0x8a>
 80018f6:	f000 fc67 	bl	80021c8 <Error_Handler>
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200003ec 	.word	0x200003ec
 8001908:	40000800 	.word	0x40000800

0800190c <MX_USART2_UART_Init>:
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001912:	4a12      	ldr	r2, [pc, #72]	@ (800195c <MX_USART2_UART_Init+0x50>)
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001918:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001932:	220c      	movs	r2, #12
 8001934:	615a      	str	r2, [r3, #20]
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
 8001942:	4805      	ldr	r0, [pc, #20]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001944:	f002 fef8 	bl	8004738 <HAL_UART_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_USART2_UART_Init+0x46>
 800194e:	f000 fc3b 	bl	80021c8 <Error_Handler>
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000434 	.word	0x20000434
 800195c:	40004400 	.word	0x40004400

08001960 <MX_GPIO_Init>:
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <MX_GPIO_Init+0x80>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a18      	ldr	r2, [pc, #96]	@ (80019e0 <MX_GPIO_Init+0x80>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <MX_GPIO_Init+0x80>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <MX_GPIO_Init+0x80>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a11      	ldr	r2, [pc, #68]	@ (80019e0 <MX_GPIO_Init+0x80>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <MX_GPIO_Init+0x80>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019b4:	480b      	ldr	r0, [pc, #44]	@ (80019e4 <MX_GPIO_Init+0x84>)
 80019b6:	f001 f989 	bl	8002ccc <HAL_GPIO_WritePin>
 80019ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	2301      	movs	r3, #1
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	4619      	mov	r1, r3
 80019d2:	4804      	ldr	r0, [pc, #16]	@ (80019e4 <MX_GPIO_Init+0x84>)
 80019d4:	f000 fff6 	bl	80029c4 <HAL_GPIO_Init>
 80019d8:	bf00      	nop
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000

080019e8 <get_x_hat>:
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b0a6      	sub	sp, #152	@ 0x98
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0b08 	vstr	d0, [r7, #32]
 80019f2:	ed87 1b06 	vstr	d1, [r7, #24]
 80019f6:	4bb7      	ldr	r3, [pc, #732]	@ (8001cd4 <get_x_hat+0x2ec>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 8001a00:	4bb4      	ldr	r3, [pc, #720]	@ (8001cd4 <get_x_hat+0x2ec>)
 8001a02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a06:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 8001a0a:	4bb2      	ldr	r3, [pc, #712]	@ (8001cd4 <get_x_hat+0x2ec>)
 8001a0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a10:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
 8001a14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a18:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
 8001a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a20:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001a48:	4ba3      	ldr	r3, [pc, #652]	@ (8001cd8 <get_x_hat+0x2f0>)
 8001a4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a4e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001a52:	f7fe fdd9 	bl	8000608 <__aeabi_dmul>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4614      	mov	r4, r2
 8001a5c:	461d      	mov	r5, r3
 8001a5e:	4b9e      	ldr	r3, [pc, #632]	@ (8001cd8 <get_x_hat+0x2f0>)
 8001a60:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001a68:	f7fe fdce 	bl	8000608 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7fe fc12 	bl	800029c <__adddf3>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	461d      	mov	r5, r3
 8001a80:	4b95      	ldr	r3, [pc, #596]	@ (8001cd8 <get_x_hat+0x2f0>)
 8001a82:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001a86:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001a8a:	f7fe fdbd 	bl	8000608 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4620      	mov	r0, r4
 8001a94:	4629      	mov	r1, r5
 8001a96:	f7fe fc01 	bl	800029c <__adddf3>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	4b8e      	ldr	r3, [pc, #568]	@ (8001cdc <get_x_hat+0x2f4>)
 8001aa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001aac:	f7fe fdac 	bl	8000608 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	f7fe fbf0 	bl	800029c <__adddf3>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4614      	mov	r4, r2
 8001ac2:	461d      	mov	r5, r3
 8001ac4:	4b85      	ldr	r3, [pc, #532]	@ (8001cdc <get_x_hat+0x2f4>)
 8001ac6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001aca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001ace:	f7fe fd9b 	bl	8000608 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f7fe fbdf 	bl	800029c <__adddf3>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001ae6:	4b7c      	ldr	r3, [pc, #496]	@ (8001cd8 <get_x_hat+0x2f0>)
 8001ae8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001aec:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001af0:	f7fe fd8a 	bl	8000608 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4614      	mov	r4, r2
 8001afa:	461d      	mov	r5, r3
 8001afc:	4b76      	ldr	r3, [pc, #472]	@ (8001cd8 <get_x_hat+0x2f0>)
 8001afe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001b02:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001b06:	f7fe fd7f 	bl	8000608 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4620      	mov	r0, r4
 8001b10:	4629      	mov	r1, r5
 8001b12:	f7fe fbc3 	bl	800029c <__adddf3>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4614      	mov	r4, r2
 8001b1c:	461d      	mov	r5, r3
 8001b1e:	4b6e      	ldr	r3, [pc, #440]	@ (8001cd8 <get_x_hat+0x2f0>)
 8001b20:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001b24:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001b28:	f7fe fd6e 	bl	8000608 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4620      	mov	r0, r4
 8001b32:	4629      	mov	r1, r5
 8001b34:	f7fe fbb2 	bl	800029c <__adddf3>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4614      	mov	r4, r2
 8001b3e:	461d      	mov	r5, r3
 8001b40:	4b66      	ldr	r3, [pc, #408]	@ (8001cdc <get_x_hat+0x2f4>)
 8001b42:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001b46:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001b4a:	f7fe fd5d 	bl	8000608 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4620      	mov	r0, r4
 8001b54:	4629      	mov	r1, r5
 8001b56:	f7fe fba1 	bl	800029c <__adddf3>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4614      	mov	r4, r2
 8001b60:	461d      	mov	r5, r3
 8001b62:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <get_x_hat+0x2f4>)
 8001b64:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b68:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001b6c:	f7fe fd4c 	bl	8000608 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4620      	mov	r0, r4
 8001b76:	4629      	mov	r1, r5
 8001b78:	f7fe fb90 	bl	800029c <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8001b84:	4b54      	ldr	r3, [pc, #336]	@ (8001cd8 <get_x_hat+0x2f0>)
 8001b86:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001b8a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001b8e:	f7fe fd3b 	bl	8000608 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4614      	mov	r4, r2
 8001b98:	461d      	mov	r5, r3
 8001b9a:	4b4f      	ldr	r3, [pc, #316]	@ (8001cd8 <get_x_hat+0x2f0>)
 8001b9c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001ba0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001ba4:	f7fe fd30 	bl	8000608 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb74 	bl	800029c <__adddf3>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4614      	mov	r4, r2
 8001bba:	461d      	mov	r5, r3
 8001bbc:	4b46      	ldr	r3, [pc, #280]	@ (8001cd8 <get_x_hat+0x2f0>)
 8001bbe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001bc2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001bc6:	f7fe fd1f 	bl	8000608 <__aeabi_dmul>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4620      	mov	r0, r4
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	f7fe fb63 	bl	800029c <__adddf3>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4614      	mov	r4, r2
 8001bdc:	461d      	mov	r5, r3
 8001bde:	4b3f      	ldr	r3, [pc, #252]	@ (8001cdc <get_x_hat+0x2f4>)
 8001be0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001be4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001be8:	f7fe fd0e 	bl	8000608 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	f7fe fb52 	bl	800029c <__adddf3>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4614      	mov	r4, r2
 8001bfe:	461d      	mov	r5, r3
 8001c00:	4b36      	ldr	r3, [pc, #216]	@ (8001cdc <get_x_hat+0x2f4>)
 8001c02:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001c06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c0a:	f7fe fcfd 	bl	8000608 <__aeabi_dmul>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4620      	mov	r0, r4
 8001c14:	4629      	mov	r1, r5
 8001c16:	f7fe fb41 	bl	800029c <__adddf3>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001c22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce0 <get_x_hat+0x2f8>)
 8001c24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c28:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001c2c:	f7fe fcec 	bl	8000608 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4614      	mov	r4, r2
 8001c36:	461d      	mov	r5, r3
 8001c38:	4b29      	ldr	r3, [pc, #164]	@ (8001ce0 <get_x_hat+0x2f8>)
 8001c3a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c3e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001c42:	f7fe fce1 	bl	8000608 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7fe fb25 	bl	800029c <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ce0 <get_x_hat+0x2f8>)
 8001c5c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c60:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001c64:	f7fe fcd0 	bl	8000608 <__aeabi_dmul>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	4629      	mov	r1, r5
 8001c70:	f7fe fb14 	bl	800029c <__adddf3>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4614      	mov	r4, r2
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <get_x_hat+0x2fc>)
 8001c7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c82:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001c86:	f7fe fcbf 	bl	8000608 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4620      	mov	r0, r4
 8001c90:	4629      	mov	r1, r5
 8001c92:	f7fe fb03 	bl	800029c <__adddf3>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4614      	mov	r4, r2
 8001c9c:	461d      	mov	r5, r3
 8001c9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <get_x_hat+0x2fc>)
 8001ca0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ca4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001ca8:	f7fe fcae 	bl	8000608 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	f7fe faf2 	bl	800029c <__adddf3>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8001cc0:	4b07      	ldr	r3, [pc, #28]	@ (8001ce0 <get_x_hat+0x2f8>)
 8001cc2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001cc6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001cca:	f7fe fc9d 	bl	8000608 <__aeabi_dmul>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	e009      	b.n	8001ce8 <get_x_hat+0x300>
 8001cd4:	200004e8 	.word	0x200004e8
 8001cd8:	200000f0 	.word	0x200000f0
 8001cdc:	20000138 	.word	0x20000138
 8001ce0:	20000078 	.word	0x20000078
 8001ce4:	200000c0 	.word	0x200000c0
 8001ce8:	4614      	mov	r4, r2
 8001cea:	461d      	mov	r5, r3
 8001cec:	4b63      	ldr	r3, [pc, #396]	@ (8001e7c <get_x_hat+0x494>)
 8001cee:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001cf2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001cf6:	f7fe fc87 	bl	8000608 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4620      	mov	r0, r4
 8001d00:	4629      	mov	r1, r5
 8001d02:	f7fe facb 	bl	800029c <__adddf3>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4614      	mov	r4, r2
 8001d0c:	461d      	mov	r5, r3
 8001d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001e7c <get_x_hat+0x494>)
 8001d10:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001d14:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001d18:	f7fe fc76 	bl	8000608 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4620      	mov	r0, r4
 8001d22:	4629      	mov	r1, r5
 8001d24:	f7fe faba 	bl	800029c <__adddf3>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4614      	mov	r4, r2
 8001d2e:	461d      	mov	r5, r3
 8001d30:	4b53      	ldr	r3, [pc, #332]	@ (8001e80 <get_x_hat+0x498>)
 8001d32:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d36:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001d3a:	f7fe fc65 	bl	8000608 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4620      	mov	r0, r4
 8001d44:	4629      	mov	r1, r5
 8001d46:	f7fe faa9 	bl	800029c <__adddf3>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4614      	mov	r4, r2
 8001d50:	461d      	mov	r5, r3
 8001d52:	4b4b      	ldr	r3, [pc, #300]	@ (8001e80 <get_x_hat+0x498>)
 8001d54:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001d58:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001d5c:	f7fe fc54 	bl	8000608 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4620      	mov	r0, r4
 8001d66:	4629      	mov	r1, r5
 8001d68:	f7fe fa98 	bl	800029c <__adddf3>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8001d74:	4b41      	ldr	r3, [pc, #260]	@ (8001e7c <get_x_hat+0x494>)
 8001d76:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001d7a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001d7e:	f7fe fc43 	bl	8000608 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4614      	mov	r4, r2
 8001d88:	461d      	mov	r5, r3
 8001d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e7c <get_x_hat+0x494>)
 8001d8c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001d90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001d94:	f7fe fc38 	bl	8000608 <__aeabi_dmul>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	4629      	mov	r1, r5
 8001da0:	f7fe fa7c 	bl	800029c <__adddf3>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4614      	mov	r4, r2
 8001daa:	461d      	mov	r5, r3
 8001dac:	4b33      	ldr	r3, [pc, #204]	@ (8001e7c <get_x_hat+0x494>)
 8001dae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001db2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001db6:	f7fe fc27 	bl	8000608 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	4629      	mov	r1, r5
 8001dc2:	f7fe fa6b 	bl	800029c <__adddf3>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4614      	mov	r4, r2
 8001dcc:	461d      	mov	r5, r3
 8001dce:	4b2c      	ldr	r3, [pc, #176]	@ (8001e80 <get_x_hat+0x498>)
 8001dd0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001dd4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001dd8:	f7fe fc16 	bl	8000608 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4620      	mov	r0, r4
 8001de2:	4629      	mov	r1, r5
 8001de4:	f7fe fa5a 	bl	800029c <__adddf3>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4614      	mov	r4, r2
 8001dee:	461d      	mov	r5, r3
 8001df0:	4b23      	ldr	r3, [pc, #140]	@ (8001e80 <get_x_hat+0x498>)
 8001df2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001df6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001dfa:	f7fe fc05 	bl	8000608 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4620      	mov	r0, r4
 8001e04:	4629      	mov	r1, r5
 8001e06:	f7fe fa49 	bl	800029c <__adddf3>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8001e12:	491c      	ldr	r1, [pc, #112]	@ (8001e84 <get_x_hat+0x49c>)
 8001e14:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001e18:	e9c1 2300 	strd	r2, r3, [r1]
 8001e1c:	4919      	ldr	r1, [pc, #100]	@ (8001e84 <get_x_hat+0x49c>)
 8001e1e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001e22:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001e26:	4917      	ldr	r1, [pc, #92]	@ (8001e84 <get_x_hat+0x49c>)
 8001e28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001e30:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001e34:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8001e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e40:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e44:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001e48:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001e4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e50:	ec45 4b15 	vmov	d5, r4, r5
 8001e54:	ec41 0b16 	vmov	d6, r0, r1
 8001e58:	ec43 2b17 	vmov	d7, r2, r3
 8001e5c:	eeb0 0a45 	vmov.f32	s0, s10
 8001e60:	eef0 0a65 	vmov.f32	s1, s11
 8001e64:	eeb0 1a46 	vmov.f32	s2, s12
 8001e68:	eef0 1a66 	vmov.f32	s3, s13
 8001e6c:	eeb0 2a47 	vmov.f32	s4, s14
 8001e70:	eef0 2a67 	vmov.f32	s5, s15
 8001e74:	3798      	adds	r7, #152	@ 0x98
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000078 	.word	0x20000078
 8001e80:	200000c0 	.word	0x200000c0
 8001e84:	200004e8 	.word	0x200004e8

08001e88 <HAL_TIM_PeriodElapsedCallback>:
 8001e88:	b5b0      	push	{r4, r5, r7, lr}
 8001e8a:	b0a0      	sub	sp, #128	@ 0x80
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4ab3      	ldr	r2, [pc, #716]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	f040 8191 	bne.w	80021bc <HAL_TIM_PeriodElapsedCallback+0x334>
 8001e9a:	4bb2      	ldr	r3, [pc, #712]	@ (8002164 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	4ab0      	ldr	r2, [pc, #704]	@ (8002164 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4baf      	ldr	r3, [pc, #700]	@ (8002164 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d104      	bne.n	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8001eac:	f000 fc48 	bl	8002740 <HAL_GetTick>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4aad      	ldr	r2, [pc, #692]	@ (8002168 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	f000 fc43 	bl	8002740 <HAL_GetTick>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4aab      	ldr	r2, [pc, #684]	@ (800216c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4bab      	ldr	r3, [pc, #684]	@ (8002170 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fb24 	bl	8000514 <__aeabi_ui2d>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	49a8      	ldr	r1, [pc, #672]	@ (8002174 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001ed2:	e9c1 2300 	strd	r2, r3, [r1]
 8001ed6:	4ba7      	ldr	r3, [pc, #668]	@ (8002174 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001ed8:	ed93 7b00 	vldr	d7, [r3]
 8001edc:	4ba6      	ldr	r3, [pc, #664]	@ (8002178 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ede:	ed93 6b00 	vldr	d6, [r3]
 8001ee2:	eeb0 1a46 	vmov.f32	s2, s12
 8001ee6:	eef0 1a66 	vmov.f32	s3, s13
 8001eea:	eeb0 0a47 	vmov.f32	s0, s14
 8001eee:	eef0 0a67 	vmov.f32	s1, s15
 8001ef2:	f7ff f9c7 	bl	8001284 <getTicksDelta>
 8001ef6:	eeb0 7a40 	vmov.f32	s14, s0
 8001efa:	eef0 7a60 	vmov.f32	s15, s1
 8001efe:	eeb0 0a47 	vmov.f32	s0, s14
 8001f02:	eef0 0a67 	vmov.f32	s1, s15
 8001f06:	f7ff fa63 	bl	80013d0 <getPositionByDelta>
 8001f0a:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
 8001f0e:	4b9b      	ldr	r3, [pc, #620]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f14:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001f18:	f7fe f9be 	bl	8000298 <__aeabi_dsub>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001f24:	4b96      	ldr	r3, [pc, #600]	@ (8002180 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001f26:	ed93 7b00 	vldr	d7, [r3]
 8001f2a:	ed97 1b1e 	vldr	d1, [r7, #120]	@ 0x78
 8001f2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f32:	eef0 0a67 	vmov.f32	s1, s15
 8001f36:	f7ff fd57 	bl	80019e8 <get_x_hat>
 8001f3a:	eeb0 5a40 	vmov.f32	s10, s0
 8001f3e:	eef0 5a60 	vmov.f32	s11, s1
 8001f42:	eeb0 6a41 	vmov.f32	s12, s2
 8001f46:	eef0 6a61 	vmov.f32	s13, s3
 8001f4a:	eeb0 7a42 	vmov.f32	s14, s4
 8001f4e:	eef0 7a62 	vmov.f32	s15, s5
 8001f52:	ed87 5b10 	vstr	d5, [r7, #64]	@ 0x40
 8001f56:	ed87 6b12 	vstr	d6, [r7, #72]	@ 0x48
 8001f5a:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001f5e:	4b89      	ldr	r3, [pc, #548]	@ (8002184 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	4614      	mov	r4, r2
 8001f66:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001f6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f6e:	4620      	mov	r0, r4
 8001f70:	4629      	mov	r1, r5
 8001f72:	f7fe fb49 	bl	8000608 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4614      	mov	r4, r2
 8001f7c:	461d      	mov	r5, r3
 8001f7e:	4b81      	ldr	r3, [pc, #516]	@ (8002184 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001f80:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f88:	f7fe fb3e 	bl	8000608 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4620      	mov	r0, r4
 8001f92:	4629      	mov	r1, r5
 8001f94:	f7fe f980 	bl	8000298 <__aeabi_dsub>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4614      	mov	r4, r2
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	4b78      	ldr	r3, [pc, #480]	@ (8002184 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001fa2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001fa6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001faa:	f7fe fb2d 	bl	8000608 <__aeabi_dmul>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	f7fe f96f 	bl	8000298 <__aeabi_dsub>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4614      	mov	r4, r2
 8001fc0:	461d      	mov	r5, r3
 8001fc2:	4b70      	ldr	r3, [pc, #448]	@ (8002184 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001fc4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001fc8:	4b6c      	ldr	r3, [pc, #432]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	f7fe fb1b 	bl	8000608 <__aeabi_dmul>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	4629      	mov	r1, r5
 8001fda:	f7fe f95f 	bl	800029c <__adddf3>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8001fe6:	4b67      	ldr	r3, [pc, #412]	@ (8002184 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001fe8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001fec:	4b66      	ldr	r3, [pc, #408]	@ (8002188 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ff2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001ff6:	f7fe f951 	bl	800029c <__adddf3>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4620      	mov	r0, r4
 8002000:	4629      	mov	r1, r5
 8002002:	f7fe fb01 	bl	8000608 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	4b5f      	ldr	r3, [pc, #380]	@ (800218c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe f942 	bl	800029c <__adddf3>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002020:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002024:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002028:	f7fe f938 	bl	800029c <__adddf3>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	4b55      	ldr	r3, [pc, #340]	@ (8002190 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800203a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800203e:	f7fe fae3 	bl	8000608 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	4b51      	ldr	r3, [pc, #324]	@ (8002194 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002050:	f7fe fc04 	bl	800085c <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	ec43 2b17 	vmov	d7, r2, r3
 800205c:	eeb0 0a47 	vmov.f32	s0, s14
 8002060:	eef0 0a67 	vmov.f32	s1, s15
 8002064:	f7ff f810 	bl	8001088 <setPulseFromDutyValue>
 8002068:	4948      	ldr	r1, [pc, #288]	@ (800218c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800206a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800206e:	e9c1 2300 	strd	r2, r3, [r1]
 8002072:	4943      	ldr	r1, [pc, #268]	@ (8002180 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002074:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002078:	e9c1 2300 	strd	r2, r3, [r1]
 800207c:	4942      	ldr	r1, [pc, #264]	@ (8002188 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800207e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002082:	e9c1 2300 	strd	r2, r3, [r1]
 8002086:	f000 fb5b 	bl	8002740 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	4b37      	ldr	r3, [pc, #220]	@ (800216c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	4a41      	ldr	r2, [pc, #260]	@ (8002198 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b38      	ldr	r3, [pc, #224]	@ (8002178 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80020a0:	4b34      	ldr	r3, [pc, #208]	@ (8002174 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	4934      	ldr	r1, [pc, #208]	@ (8002178 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80020a8:	e9c1 2300 	strd	r2, r3, [r1]
 80020ac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80020b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80020b4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80020b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80020bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020c0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80020c4:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80020ce:	4b29      	ldr	r3, [pc, #164]	@ (8002174 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80020d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002198 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	4b23      	ldr	r3, [pc, #140]	@ (800216c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fa13 	bl	8000514 <__aeabi_ui2d>
 80020ee:	4604      	mov	r4, r0
 80020f0:	460d      	mov	r5, r1
 80020f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002164 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fa0c 	bl	8000514 <__aeabi_ui2d>
 80020fc:	4b27      	ldr	r3, [pc, #156]	@ (800219c <HAL_TIM_PeriodElapsedCallback+0x314>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	f7fe fa81 	bl	8000608 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	4b23      	ldr	r3, [pc, #140]	@ (80021a0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002114:	f7fe fa78 	bl	8000608 <__aeabi_dmul>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4620      	mov	r0, r4
 800211e:	4629      	mov	r1, r5
 8002120:	f7fe f8ba 	bl	8000298 <__aeabi_dsub>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	f7fe fd44 	bl	8000bb8 <__aeabi_d2uiz>
 8002130:	4603      	mov	r3, r0
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	f000 fb04 	bl	8002740 <HAL_GetTick>
 8002138:	4603      	mov	r3, r0
 800213a:	623b      	str	r3, [r7, #32]
 800213c:	4b19      	ldr	r3, [pc, #100]	@ (80021a4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1e5a      	subs	r2, r3, #1
 8002142:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d133      	bne.n	80021b2 <HAL_TIM_PeriodElapsedCallback+0x32a>
 800214a:	f107 0308 	add.w	r3, r7, #8
 800214e:	4619      	mov	r1, r3
 8002150:	4816      	ldr	r0, [pc, #88]	@ (80021ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002152:	f7fe ff01 	bl	8000f58 <cb_push_back>
 8002156:	4b14      	ldr	r3, [pc, #80]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	e028      	b.n	80021b0 <HAL_TIM_PeriodElapsedCallback+0x328>
 800215e:	bf00      	nop
 8002160:	200003ec 	.word	0x200003ec
 8002164:	20000048 	.word	0x20000048
 8002168:	200004a8 	.word	0x200004a8
 800216c:	200004ac 	.word	0x200004ac
 8002170:	2000035c 	.word	0x2000035c
 8002174:	200004a0 	.word	0x200004a0
 8002178:	20000498 	.word	0x20000498
 800217c:	200004d0 	.word	0x200004d0
 8002180:	200004c0 	.word	0x200004c0
 8002184:	20000050 	.word	0x20000050
 8002188:	200004c8 	.word	0x200004c8
 800218c:	200004b8 	.word	0x200004b8
 8002190:	40590000 	.word	0x40590000
 8002194:	40280000 	.word	0x40280000
 8002198:	200004b0 	.word	0x200004b0
 800219c:	20000000 	.word	0x20000000
 80021a0:	408f4000 	.word	0x408f4000
 80021a4:	2000004c 	.word	0x2000004c
 80021a8:	200004d8 	.word	0x200004d8
 80021ac:	20000478 	.word	0x20000478
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	4a02      	ldr	r2, [pc, #8]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	bf00      	nop
 80021be:	3780      	adds	r7, #128	@ 0x80
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bdb0      	pop	{r4, r5, r7, pc}
 80021c4:	200004d8 	.word	0x200004d8

080021c8 <Error_Handler>:
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	b672      	cpsid	i
 80021ce:	bf00      	nop
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <Error_Handler+0x8>

080021d4 <HAL_MspInit>:
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <HAL_MspInit+0x4c>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002220 <HAL_MspInit+0x4c>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <HAL_MspInit+0x4c>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2300      	movs	r3, #0
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_MspInit+0x4c>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	4a08      	ldr	r2, [pc, #32]	@ (8002220 <HAL_MspInit+0x4c>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002204:	6413      	str	r3, [r2, #64]	@ 0x40
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_MspInit+0x4c>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800

08002224 <HAL_TIM_Encoder_MspInit>:
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	@ 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a19      	ldr	r2, [pc, #100]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d12c      	bne.n	80022a0 <HAL_TIM_Encoder_MspInit+0x7c>
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <HAL_TIM_Encoder_MspInit+0x88>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	4a17      	ldr	r2, [pc, #92]	@ (80022ac <HAL_TIM_Encoder_MspInit+0x88>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6453      	str	r3, [r2, #68]	@ 0x44
 8002256:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <HAL_TIM_Encoder_MspInit+0x88>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <HAL_TIM_Encoder_MspInit+0x88>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	4a10      	ldr	r2, [pc, #64]	@ (80022ac <HAL_TIM_Encoder_MspInit+0x88>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6313      	str	r3, [r2, #48]	@ 0x30
 8002272:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <HAL_TIM_Encoder_MspInit+0x88>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	2302      	movs	r3, #2
 8002286:	61bb      	str	r3, [r7, #24]
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	2301      	movs	r3, #1
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	4805      	ldr	r0, [pc, #20]	@ (80022b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800229c:	f000 fb92 	bl	80029c4 <HAL_GPIO_Init>
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	@ 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40010000 	.word	0x40010000
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40020000 	.word	0x40020000

080022b4 <HAL_TIM_Base_MspInit>:
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a18      	ldr	r2, [pc, #96]	@ (8002324 <HAL_TIM_Base_MspInit+0x70>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_Base_MspInit+0x30>
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b17      	ldr	r3, [pc, #92]	@ (8002328 <HAL_TIM_Base_MspInit+0x74>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	4a16      	ldr	r2, [pc, #88]	@ (8002328 <HAL_TIM_Base_MspInit+0x74>)
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d6:	4b14      	ldr	r3, [pc, #80]	@ (8002328 <HAL_TIM_Base_MspInit+0x74>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	e01a      	b.n	800231a <HAL_TIM_Base_MspInit+0x66>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a10      	ldr	r2, [pc, #64]	@ (800232c <HAL_TIM_Base_MspInit+0x78>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d115      	bne.n	800231a <HAL_TIM_Base_MspInit+0x66>
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002328 <HAL_TIM_Base_MspInit+0x74>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002328 <HAL_TIM_Base_MspInit+0x74>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <HAL_TIM_Base_MspInit+0x74>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	201e      	movs	r0, #30
 8002310:	f000 fb21 	bl	8002956 <HAL_NVIC_SetPriority>
 8002314:	201e      	movs	r0, #30
 8002316:	f000 fb3a 	bl	800298e <HAL_NVIC_EnableIRQ>
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40000400 	.word	0x40000400
 8002328:	40023800 	.word	0x40023800
 800232c:	40000800 	.word	0x40000800

08002330 <HAL_TIM_MspPostInit>:
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	f107 030c 	add.w	r3, r7, #12
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a12      	ldr	r2, [pc, #72]	@ (8002398 <HAL_TIM_MspPostInit+0x68>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d11d      	bne.n	800238e <HAL_TIM_MspPostInit+0x5e>
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b11      	ldr	r3, [pc, #68]	@ (800239c <HAL_TIM_MspPostInit+0x6c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	4a10      	ldr	r2, [pc, #64]	@ (800239c <HAL_TIM_MspPostInit+0x6c>)
 800235c:	f043 0302 	orr.w	r3, r3, #2
 8002360:	6313      	str	r3, [r2, #48]	@ 0x30
 8002362:	4b0e      	ldr	r3, [pc, #56]	@ (800239c <HAL_TIM_MspPostInit+0x6c>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2330      	movs	r3, #48	@ 0x30
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	2302      	movs	r3, #2
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	2302      	movs	r3, #2
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	f107 030c 	add.w	r3, r7, #12
 8002386:	4619      	mov	r1, r3
 8002388:	4805      	ldr	r0, [pc, #20]	@ (80023a0 <HAL_TIM_MspPostInit+0x70>)
 800238a:	f000 fb1b 	bl	80029c4 <HAL_GPIO_Init>
 800238e:	bf00      	nop
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40000400 	.word	0x40000400
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020400 	.word	0x40020400

080023a4 <HAL_UART_MspInit>:
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	@ 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a19      	ldr	r2, [pc, #100]	@ (8002428 <HAL_UART_MspInit+0x84>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12b      	bne.n	800241e <HAL_UART_MspInit+0x7a>
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	4b18      	ldr	r3, [pc, #96]	@ (800242c <HAL_UART_MspInit+0x88>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	4a17      	ldr	r2, [pc, #92]	@ (800242c <HAL_UART_MspInit+0x88>)
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d6:	4b15      	ldr	r3, [pc, #84]	@ (800242c <HAL_UART_MspInit+0x88>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b11      	ldr	r3, [pc, #68]	@ (800242c <HAL_UART_MspInit+0x88>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	4a10      	ldr	r2, [pc, #64]	@ (800242c <HAL_UART_MspInit+0x88>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <HAL_UART_MspInit+0x88>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	230c      	movs	r3, #12
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	2302      	movs	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	2303      	movs	r3, #3
 800240c:	623b      	str	r3, [r7, #32]
 800240e:	2307      	movs	r3, #7
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4805      	ldr	r0, [pc, #20]	@ (8002430 <HAL_UART_MspInit+0x8c>)
 800241a:	f000 fad3 	bl	80029c4 <HAL_GPIO_Init>
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	@ 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40004400 	.word	0x40004400
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000

08002434 <NMI_Handler>:
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <NMI_Handler+0x4>

0800243c <HardFault_Handler>:
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <HardFault_Handler+0x4>

08002444 <MemManage_Handler>:
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <MemManage_Handler+0x4>

0800244c <BusFault_Handler>:
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <BusFault_Handler+0x4>

08002454 <UsageFault_Handler>:
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <UsageFault_Handler+0x4>

0800245c <SVC_Handler>:
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <DebugMon_Handler>:
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <PendSV_Handler>:
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <SysTick_Handler>:
 8002486:	b580      	push	{r7, lr}
 8002488:	af00      	add	r7, sp, #0
 800248a:	f000 f945 	bl	8002718 <HAL_IncTick>
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <TIM4_IRQHandler>:
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
 8002498:	4802      	ldr	r0, [pc, #8]	@ (80024a4 <TIM4_IRQHandler+0x10>)
 800249a:	f001 fb45 	bl	8003b28 <HAL_TIM_IRQHandler>
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200003ec 	.word	0x200003ec

080024a8 <_getpid>:
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	2301      	movs	r3, #1
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_kill>:
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	f003 fbb9 	bl	8005c38 <__errno>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2216      	movs	r2, #22
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <_exit>:
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	f04f 31ff 	mov.w	r1, #4294967295
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff ffe7 	bl	80024b8 <_kill>
 80024ea:	bf00      	nop
 80024ec:	e7fd      	b.n	80024ea <_exit+0x12>

080024ee <_read>:
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e00a      	b.n	8002516 <_read+0x28>
 8002500:	f3af 8000 	nop.w
 8002504:	4601      	mov	r1, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	60ba      	str	r2, [r7, #8]
 800250c:	b2ca      	uxtb	r2, r1
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	429a      	cmp	r2, r3
 800251c:	dbf0      	blt.n	8002500 <_read+0x12>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_close>:
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_fstat>:
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	2300      	movs	r3, #0
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_isatty>:
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	2301      	movs	r3, #1
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <_lseek>:
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	2300      	movs	r3, #0
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_sbrk>:
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	4a14      	ldr	r2, [pc, #80]	@ (80025ec <_sbrk+0x5c>)
 800259a:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <_sbrk+0x60>)
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	4b13      	ldr	r3, [pc, #76]	@ (80025f4 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <_sbrk+0x22>
 80025ac:	4b11      	ldr	r3, [pc, #68]	@ (80025f4 <_sbrk+0x64>)
 80025ae:	4a12      	ldr	r2, [pc, #72]	@ (80025f8 <_sbrk+0x68>)
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	4b10      	ldr	r3, [pc, #64]	@ (80025f4 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d207      	bcs.n	80025d0 <_sbrk+0x40>
 80025c0:	f003 fb3a 	bl	8005c38 <__errno>
 80025c4:	4603      	mov	r3, r0
 80025c6:	220c      	movs	r2, #12
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
 80025ce:	e009      	b.n	80025e4 <_sbrk+0x54>
 80025d0:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <_sbrk+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	4a05      	ldr	r2, [pc, #20]	@ (80025f4 <_sbrk+0x64>)
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20018000 	.word	0x20018000
 80025f0:	00000400 	.word	0x00000400
 80025f4:	20000500 	.word	0x20000500
 80025f8:	20000658 	.word	0x20000658

080025fc <SystemInit>:
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4b06      	ldr	r3, [pc, #24]	@ (800261c <SystemInit+0x20>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002606:	4a05      	ldr	r2, [pc, #20]	@ (800261c <SystemInit+0x20>)
 8002608:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800260c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <Reset_Handler>:
 8002620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002658 <LoopFillZerobss+0x12>
 8002624:	480d      	ldr	r0, [pc, #52]	@ (800265c <LoopFillZerobss+0x16>)
 8002626:	490e      	ldr	r1, [pc, #56]	@ (8002660 <LoopFillZerobss+0x1a>)
 8002628:	4a0e      	ldr	r2, [pc, #56]	@ (8002664 <LoopFillZerobss+0x1e>)
 800262a:	2300      	movs	r3, #0
 800262c:	e002      	b.n	8002634 <LoopCopyDataInit>

0800262e <CopyDataInit>:
 800262e:	58d4      	ldr	r4, [r2, r3]
 8002630:	50c4      	str	r4, [r0, r3]
 8002632:	3304      	adds	r3, #4

08002634 <LoopCopyDataInit>:
 8002634:	18c4      	adds	r4, r0, r3
 8002636:	428c      	cmp	r4, r1
 8002638:	d3f9      	bcc.n	800262e <CopyDataInit>
 800263a:	4a0b      	ldr	r2, [pc, #44]	@ (8002668 <LoopFillZerobss+0x22>)
 800263c:	4c0b      	ldr	r4, [pc, #44]	@ (800266c <LoopFillZerobss+0x26>)
 800263e:	2300      	movs	r3, #0
 8002640:	e001      	b.n	8002646 <LoopFillZerobss>

08002642 <FillZerobss>:
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	3204      	adds	r2, #4

08002646 <LoopFillZerobss>:
 8002646:	42a2      	cmp	r2, r4
 8002648:	d3fb      	bcc.n	8002642 <FillZerobss>
 800264a:	f7ff ffd7 	bl	80025fc <SystemInit>
 800264e:	f003 faf9 	bl	8005c44 <__libc_init_array>
 8002652:	f7fe ff0f 	bl	8001474 <main>
 8002656:	4770      	bx	lr
 8002658:	20018000 	.word	0x20018000
 800265c:	20000000 	.word	0x20000000
 8002660:	2000033c 	.word	0x2000033c
 8002664:	08007fa8 	.word	0x08007fa8
 8002668:	20000340 	.word	0x20000340
 800266c:	20000654 	.word	0x20000654

08002670 <ADC_IRQHandler>:
 8002670:	e7fe      	b.n	8002670 <ADC_IRQHandler>
	...

08002674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002678:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <HAL_Init+0x40>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0d      	ldr	r2, [pc, #52]	@ (80026b4 <HAL_Init+0x40>)
 800267e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002684:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_Init+0x40>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0a      	ldr	r2, [pc, #40]	@ (80026b4 <HAL_Init+0x40>)
 800268a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800268e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002690:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <HAL_Init+0x40>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a07      	ldr	r2, [pc, #28]	@ (80026b4 <HAL_Init+0x40>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800269c:	2003      	movs	r0, #3
 800269e:	f000 f94f 	bl	8002940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a2:	200f      	movs	r0, #15
 80026a4:	f000 f808 	bl	80026b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a8:	f7ff fd94 	bl	80021d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023c00 	.word	0x40023c00

080026b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c0:	4b12      	ldr	r3, [pc, #72]	@ (800270c <HAL_InitTick+0x54>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <HAL_InitTick+0x58>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f967 	bl	80029aa <HAL_SYSTICK_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00e      	b.n	8002704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b0f      	cmp	r3, #15
 80026ea:	d80a      	bhi.n	8002702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ec:	2200      	movs	r2, #0
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	f000 f92f 	bl	8002956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f8:	4a06      	ldr	r2, [pc, #24]	@ (8002714 <HAL_InitTick+0x5c>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e000      	b.n	8002704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000168 	.word	0x20000168
 8002710:	20000170 	.word	0x20000170
 8002714:	2000016c 	.word	0x2000016c

08002718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800271c:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_IncTick+0x20>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4b06      	ldr	r3, [pc, #24]	@ (800273c <HAL_IncTick+0x24>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4413      	add	r3, r2
 8002728:	4a04      	ldr	r2, [pc, #16]	@ (800273c <HAL_IncTick+0x24>)
 800272a:	6013      	str	r3, [r2, #0]
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000170 	.word	0x20000170
 800273c:	20000504 	.word	0x20000504

08002740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return uwTick;
 8002744:	4b03      	ldr	r3, [pc, #12]	@ (8002754 <HAL_GetTick+0x14>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000504 	.word	0x20000504

08002758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002760:	f7ff ffee 	bl	8002740 <HAL_GetTick>
 8002764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d005      	beq.n	800277e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002772:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <HAL_Delay+0x44>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4413      	add	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800277e:	bf00      	nop
 8002780:	f7ff ffde 	bl	8002740 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	429a      	cmp	r2, r3
 800278e:	d8f7      	bhi.n	8002780 <HAL_Delay+0x28>
  {
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000170 	.word	0x20000170

080027a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ec:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <__NVIC_GetPriorityGrouping+0x18>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 0307 	and.w	r3, r3, #7
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	db0b      	blt.n	800282e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	4907      	ldr	r1, [pc, #28]	@ (800283c <__NVIC_EnableIRQ+0x38>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2001      	movs	r0, #1
 8002826:	fa00 f202 	lsl.w	r2, r0, r2
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100

08002840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0a      	blt.n	800286a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	490c      	ldr	r1, [pc, #48]	@ (800288c <__NVIC_SetPriority+0x4c>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	440b      	add	r3, r1
 8002864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002868:	e00a      	b.n	8002880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4908      	ldr	r1, [pc, #32]	@ (8002890 <__NVIC_SetPriority+0x50>)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3b04      	subs	r3, #4
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	440b      	add	r3, r1
 800287e:	761a      	strb	r2, [r3, #24]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000e100 	.word	0xe000e100
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	@ 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f1c3 0307 	rsb	r3, r3, #7
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	bf28      	it	cs
 80028b2:	2304      	movcs	r3, #4
 80028b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d902      	bls.n	80028c4 <NVIC_EncodePriority+0x30>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3b03      	subs	r3, #3
 80028c2:	e000      	b.n	80028c6 <NVIC_EncodePriority+0x32>
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	401a      	ands	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	43d9      	mvns	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	4313      	orrs	r3, r2
         );
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3724      	adds	r7, #36	@ 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800290c:	d301      	bcc.n	8002912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290e:	2301      	movs	r3, #1
 8002910:	e00f      	b.n	8002932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002912:	4a0a      	ldr	r2, [pc, #40]	@ (800293c <SysTick_Config+0x40>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291a:	210f      	movs	r1, #15
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f7ff ff8e 	bl	8002840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <SysTick_Config+0x40>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292a:	4b04      	ldr	r3, [pc, #16]	@ (800293c <SysTick_Config+0x40>)
 800292c:	2207      	movs	r2, #7
 800292e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	e000e010 	.word	0xe000e010

08002940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff29 	bl	80027a0 <__NVIC_SetPriorityGrouping>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002968:	f7ff ff3e 	bl	80027e8 <__NVIC_GetPriorityGrouping>
 800296c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	6978      	ldr	r0, [r7, #20]
 8002974:	f7ff ff8e 	bl	8002894 <NVIC_EncodePriority>
 8002978:	4602      	mov	r2, r0
 800297a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff5d 	bl	8002840 <__NVIC_SetPriority>
}
 8002986:	bf00      	nop
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	4603      	mov	r3, r0
 8002996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff31 	bl	8002804 <__NVIC_EnableIRQ>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ffa2 	bl	80028fc <SysTick_Config>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b089      	sub	sp, #36	@ 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	e159      	b.n	8002c94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e0:	2201      	movs	r2, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4013      	ands	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	f040 8148 	bne.w	8002c8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d005      	beq.n	8002a16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d130      	bne.n	8002a78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	2203      	movs	r2, #3
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 0201 	and.w	r2, r3, #1
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d017      	beq.n	8002ab4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	2203      	movs	r2, #3
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d123      	bne.n	8002b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	08da      	lsrs	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3208      	adds	r2, #8
 8002ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	220f      	movs	r2, #15
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	08da      	lsrs	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3208      	adds	r2, #8
 8002b02:	69b9      	ldr	r1, [r7, #24]
 8002b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0203 	and.w	r2, r3, #3
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a2 	beq.w	8002c8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b57      	ldr	r3, [pc, #348]	@ (8002cac <HAL_GPIO_Init+0x2e8>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	4a56      	ldr	r2, [pc, #344]	@ (8002cac <HAL_GPIO_Init+0x2e8>)
 8002b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b5a:	4b54      	ldr	r3, [pc, #336]	@ (8002cac <HAL_GPIO_Init+0x2e8>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b66:	4a52      	ldr	r2, [pc, #328]	@ (8002cb0 <HAL_GPIO_Init+0x2ec>)
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	220f      	movs	r2, #15
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a49      	ldr	r2, [pc, #292]	@ (8002cb4 <HAL_GPIO_Init+0x2f0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d019      	beq.n	8002bc6 <HAL_GPIO_Init+0x202>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a48      	ldr	r2, [pc, #288]	@ (8002cb8 <HAL_GPIO_Init+0x2f4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d013      	beq.n	8002bc2 <HAL_GPIO_Init+0x1fe>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a47      	ldr	r2, [pc, #284]	@ (8002cbc <HAL_GPIO_Init+0x2f8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00d      	beq.n	8002bbe <HAL_GPIO_Init+0x1fa>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a46      	ldr	r2, [pc, #280]	@ (8002cc0 <HAL_GPIO_Init+0x2fc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d007      	beq.n	8002bba <HAL_GPIO_Init+0x1f6>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a45      	ldr	r2, [pc, #276]	@ (8002cc4 <HAL_GPIO_Init+0x300>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d101      	bne.n	8002bb6 <HAL_GPIO_Init+0x1f2>
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	e008      	b.n	8002bc8 <HAL_GPIO_Init+0x204>
 8002bb6:	2307      	movs	r3, #7
 8002bb8:	e006      	b.n	8002bc8 <HAL_GPIO_Init+0x204>
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e004      	b.n	8002bc8 <HAL_GPIO_Init+0x204>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e002      	b.n	8002bc8 <HAL_GPIO_Init+0x204>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_GPIO_Init+0x204>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	f002 0203 	and.w	r2, r2, #3
 8002bce:	0092      	lsls	r2, r2, #2
 8002bd0:	4093      	lsls	r3, r2
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd8:	4935      	ldr	r1, [pc, #212]	@ (8002cb0 <HAL_GPIO_Init+0x2ec>)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	3302      	adds	r3, #2
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002be6:	4b38      	ldr	r3, [pc, #224]	@ (8002cc8 <HAL_GPIO_Init+0x304>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c0a:	4a2f      	ldr	r2, [pc, #188]	@ (8002cc8 <HAL_GPIO_Init+0x304>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c10:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc8 <HAL_GPIO_Init+0x304>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c34:	4a24      	ldr	r2, [pc, #144]	@ (8002cc8 <HAL_GPIO_Init+0x304>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3a:	4b23      	ldr	r3, [pc, #140]	@ (8002cc8 <HAL_GPIO_Init+0x304>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc8 <HAL_GPIO_Init+0x304>)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c64:	4b18      	ldr	r3, [pc, #96]	@ (8002cc8 <HAL_GPIO_Init+0x304>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c88:	4a0f      	ldr	r2, [pc, #60]	@ (8002cc8 <HAL_GPIO_Init+0x304>)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3301      	adds	r3, #1
 8002c92:	61fb      	str	r3, [r7, #28]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b0f      	cmp	r3, #15
 8002c98:	f67f aea2 	bls.w	80029e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3724      	adds	r7, #36	@ 0x24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40013800 	.word	0x40013800
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	40020400 	.word	0x40020400
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	40020c00 	.word	0x40020c00
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40013c00 	.word	0x40013c00

08002ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cdc:	787b      	ldrb	r3, [r7, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ce8:	e003      	b.n	8002cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cea:	887b      	ldrh	r3, [r7, #2]
 8002cec:	041a      	lsls	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	619a      	str	r2, [r3, #24]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e267      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d075      	beq.n	8002e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1e:	4b88      	ldr	r3, [pc, #544]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d00c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2a:	4b85      	ldr	r3, [pc, #532]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d112      	bne.n	8002d5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d36:	4b82      	ldr	r3, [pc, #520]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d42:	d10b      	bne.n	8002d5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	4b7e      	ldr	r3, [pc, #504]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d05b      	beq.n	8002e08 <HAL_RCC_OscConfig+0x108>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d157      	bne.n	8002e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e242      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d64:	d106      	bne.n	8002d74 <HAL_RCC_OscConfig+0x74>
 8002d66:	4b76      	ldr	r3, [pc, #472]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a75      	ldr	r2, [pc, #468]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e01d      	b.n	8002db0 <HAL_RCC_OscConfig+0xb0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x98>
 8002d7e:	4b70      	ldr	r3, [pc, #448]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a6f      	ldr	r2, [pc, #444]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a6c      	ldr	r2, [pc, #432]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e00b      	b.n	8002db0 <HAL_RCC_OscConfig+0xb0>
 8002d98:	4b69      	ldr	r3, [pc, #420]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a68      	ldr	r2, [pc, #416]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b66      	ldr	r3, [pc, #408]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a65      	ldr	r2, [pc, #404]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7ff fcc2 	bl	8002740 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7ff fcbe 	bl	8002740 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	@ 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e207      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xc0>
 8002dde:	e014      	b.n	8002e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7ff fcae 	bl	8002740 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de8:	f7ff fcaa 	bl	8002740 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	@ 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e1f3      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfa:	4b51      	ldr	r3, [pc, #324]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0xe8>
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d063      	beq.n	8002ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e16:	4b4a      	ldr	r3, [pc, #296]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e22:	4b47      	ldr	r3, [pc, #284]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d11c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2e:	4b44      	ldr	r3, [pc, #272]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d116      	bne.n	8002e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	4b41      	ldr	r3, [pc, #260]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <HAL_RCC_OscConfig+0x152>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e1c7      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e52:	4b3b      	ldr	r3, [pc, #236]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4937      	ldr	r1, [pc, #220]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e66:	e03a      	b.n	8002ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e70:	4b34      	ldr	r3, [pc, #208]	@ (8002f44 <HAL_RCC_OscConfig+0x244>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7ff fc63 	bl	8002740 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7ff fc5f 	bl	8002740 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1a8      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	4b2b      	ldr	r3, [pc, #172]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9c:	4b28      	ldr	r3, [pc, #160]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4925      	ldr	r1, [pc, #148]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]
 8002eb0:	e015      	b.n	8002ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb2:	4b24      	ldr	r3, [pc, #144]	@ (8002f44 <HAL_RCC_OscConfig+0x244>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7ff fc42 	bl	8002740 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec0:	f7ff fc3e 	bl	8002740 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e187      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d036      	beq.n	8002f58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d016      	beq.n	8002f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef2:	4b15      	ldr	r3, [pc, #84]	@ (8002f48 <HAL_RCC_OscConfig+0x248>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef8:	f7ff fc22 	bl	8002740 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f00:	f7ff fc1e 	bl	8002740 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e167      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <HAL_RCC_OscConfig+0x240>)
 8002f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x200>
 8002f1e:	e01b      	b.n	8002f58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f20:	4b09      	ldr	r3, [pc, #36]	@ (8002f48 <HAL_RCC_OscConfig+0x248>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7ff fc0b 	bl	8002740 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2c:	e00e      	b.n	8002f4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2e:	f7ff fc07 	bl	8002740 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d907      	bls.n	8002f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e150      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
 8002f40:	40023800 	.word	0x40023800
 8002f44:	42470000 	.word	0x42470000
 8002f48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4c:	4b88      	ldr	r3, [pc, #544]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ea      	bne.n	8002f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8097 	beq.w	8003094 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6a:	4b81      	ldr	r3, [pc, #516]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10f      	bne.n	8002f96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	4a7c      	ldr	r2, [pc, #496]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f86:	4b7a      	ldr	r3, [pc, #488]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f92:	2301      	movs	r3, #1
 8002f94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f96:	4b77      	ldr	r3, [pc, #476]	@ (8003174 <HAL_RCC_OscConfig+0x474>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d118      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa2:	4b74      	ldr	r3, [pc, #464]	@ (8003174 <HAL_RCC_OscConfig+0x474>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a73      	ldr	r2, [pc, #460]	@ (8003174 <HAL_RCC_OscConfig+0x474>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fae:	f7ff fbc7 	bl	8002740 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb6:	f7ff fbc3 	bl	8002740 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e10c      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8003174 <HAL_RCC_OscConfig+0x474>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d106      	bne.n	8002fea <HAL_RCC_OscConfig+0x2ea>
 8002fdc:	4b64      	ldr	r3, [pc, #400]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe0:	4a63      	ldr	r2, [pc, #396]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe8:	e01c      	b.n	8003024 <HAL_RCC_OscConfig+0x324>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0x30c>
 8002ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	f043 0304 	orr.w	r3, r3, #4
 8002ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003002:	4a5b      	ldr	r2, [pc, #364]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6713      	str	r3, [r2, #112]	@ 0x70
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0x324>
 800300c:	4b58      	ldr	r3, [pc, #352]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003010:	4a57      	ldr	r2, [pc, #348]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8003012:	f023 0301 	bic.w	r3, r3, #1
 8003016:	6713      	str	r3, [r2, #112]	@ 0x70
 8003018:	4b55      	ldr	r3, [pc, #340]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 800301a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301c:	4a54      	ldr	r2, [pc, #336]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 800301e:	f023 0304 	bic.w	r3, r3, #4
 8003022:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d015      	beq.n	8003058 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7ff fb88 	bl	8002740 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003032:	e00a      	b.n	800304a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003034:	f7ff fb84 	bl	8002740 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e0cb      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304a:	4b49      	ldr	r3, [pc, #292]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0ee      	beq.n	8003034 <HAL_RCC_OscConfig+0x334>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003058:	f7ff fb72 	bl	8002740 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305e:	e00a      	b.n	8003076 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7ff fb6e 	bl	8002740 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e0b5      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003076:	4b3e      	ldr	r3, [pc, #248]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1ee      	bne.n	8003060 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003082:	7dfb      	ldrb	r3, [r7, #23]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d105      	bne.n	8003094 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003088:	4b39      	ldr	r3, [pc, #228]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	4a38      	ldr	r2, [pc, #224]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 800308e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003092:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80a1 	beq.w	80031e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800309e:	4b34      	ldr	r3, [pc, #208]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d05c      	beq.n	8003164 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d141      	bne.n	8003136 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b2:	4b31      	ldr	r3, [pc, #196]	@ (8003178 <HAL_RCC_OscConfig+0x478>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7ff fb42 	bl	8002740 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c0:	f7ff fb3e 	bl	8002740 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e087      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d2:	4b27      	ldr	r3, [pc, #156]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	019b      	lsls	r3, r3, #6
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	085b      	lsrs	r3, r3, #1
 80030f6:	3b01      	subs	r3, #1
 80030f8:	041b      	lsls	r3, r3, #16
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003100:	061b      	lsls	r3, r3, #24
 8003102:	491b      	ldr	r1, [pc, #108]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003108:	4b1b      	ldr	r3, [pc, #108]	@ (8003178 <HAL_RCC_OscConfig+0x478>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7ff fb17 	bl	8002740 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003116:	f7ff fb13 	bl	8002740 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e05c      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003128:	4b11      	ldr	r3, [pc, #68]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x416>
 8003134:	e054      	b.n	80031e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003136:	4b10      	ldr	r3, [pc, #64]	@ (8003178 <HAL_RCC_OscConfig+0x478>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7ff fb00 	bl	8002740 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003144:	f7ff fafc 	bl	8002740 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e045      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003156:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <HAL_RCC_OscConfig+0x470>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x444>
 8003162:	e03d      	b.n	80031e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d107      	bne.n	800317c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e038      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
 8003170:	40023800 	.word	0x40023800
 8003174:	40007000 	.word	0x40007000
 8003178:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800317c:	4b1b      	ldr	r3, [pc, #108]	@ (80031ec <HAL_RCC_OscConfig+0x4ec>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d028      	beq.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d121      	bne.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d11a      	bne.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031ac:	4013      	ands	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d111      	bne.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c2:	085b      	lsrs	r3, r3, #1
 80031c4:	3b01      	subs	r3, #1
 80031c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d107      	bne.n	80031dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800

080031f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0cc      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003204:	4b68      	ldr	r3, [pc, #416]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d90c      	bls.n	800322c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b65      	ldr	r3, [pc, #404]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	4b63      	ldr	r3, [pc, #396]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0b8      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d020      	beq.n	800327a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003244:	4b59      	ldr	r3, [pc, #356]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a58      	ldr	r2, [pc, #352]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800324e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800325c:	4b53      	ldr	r3, [pc, #332]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a52      	ldr	r2, [pc, #328]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003268:	4b50      	ldr	r3, [pc, #320]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	494d      	ldr	r1, [pc, #308]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d044      	beq.n	8003310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b47      	ldr	r3, [pc, #284]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d119      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e07f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d003      	beq.n	80032ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ae:	4b3f      	ldr	r3, [pc, #252]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e06f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032be:	4b3b      	ldr	r3, [pc, #236]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e067      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ce:	4b37      	ldr	r3, [pc, #220]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f023 0203 	bic.w	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4934      	ldr	r1, [pc, #208]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e0:	f7ff fa2e 	bl	8002740 <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e8:	f7ff fa2a 	bl	8002740 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e04f      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	4b2b      	ldr	r3, [pc, #172]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 020c 	and.w	r2, r3, #12
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	429a      	cmp	r2, r3
 800330e:	d1eb      	bne.n	80032e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003310:	4b25      	ldr	r3, [pc, #148]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d20c      	bcs.n	8003338 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b22      	ldr	r3, [pc, #136]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b20      	ldr	r3, [pc, #128]	@ (80033a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e032      	b.n	800339e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003344:	4b19      	ldr	r3, [pc, #100]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4916      	ldr	r1, [pc, #88]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003362:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	490e      	ldr	r1, [pc, #56]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003376:	f000 f821 	bl	80033bc <HAL_RCC_GetSysClockFreq>
 800337a:	4602      	mov	r2, r0
 800337c:	4b0b      	ldr	r3, [pc, #44]	@ (80033ac <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	490a      	ldr	r1, [pc, #40]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003388:	5ccb      	ldrb	r3, [r1, r3]
 800338a:	fa22 f303 	lsr.w	r3, r2, r3
 800338e:	4a09      	ldr	r2, [pc, #36]	@ (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003392:	4b09      	ldr	r3, [pc, #36]	@ (80033b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff f98e 	bl	80026b8 <HAL_InitTick>

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40023c00 	.word	0x40023c00
 80033ac:	40023800 	.word	0x40023800
 80033b0:	08007c00 	.word	0x08007c00
 80033b4:	20000168 	.word	0x20000168
 80033b8:	2000016c 	.word	0x2000016c

080033bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c0:	b090      	sub	sp, #64	@ 0x40
 80033c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80033c8:	2300      	movs	r3, #0
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033cc:	2300      	movs	r3, #0
 80033ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d4:	4b59      	ldr	r3, [pc, #356]	@ (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 030c 	and.w	r3, r3, #12
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d00d      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x40>
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	f200 80a1 	bhi.w	8003528 <HAL_RCC_GetSysClockFreq+0x16c>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x34>
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d003      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ee:	e09b      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f0:	4b53      	ldr	r3, [pc, #332]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x184>)
 80033f2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80033f4:	e09b      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033f6:	4b53      	ldr	r3, [pc, #332]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033fa:	e098      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033fc:	4b4f      	ldr	r3, [pc, #316]	@ (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003404:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003406:	4b4d      	ldr	r3, [pc, #308]	@ (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d028      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003412:	4b4a      	ldr	r3, [pc, #296]	@ (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	2200      	movs	r2, #0
 800341a:	623b      	str	r3, [r7, #32]
 800341c:	627a      	str	r2, [r7, #36]	@ 0x24
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003424:	2100      	movs	r1, #0
 8003426:	4b47      	ldr	r3, [pc, #284]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x188>)
 8003428:	fb03 f201 	mul.w	r2, r3, r1
 800342c:	2300      	movs	r3, #0
 800342e:	fb00 f303 	mul.w	r3, r0, r3
 8003432:	4413      	add	r3, r2
 8003434:	4a43      	ldr	r2, [pc, #268]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x188>)
 8003436:	fba0 1202 	umull	r1, r2, r0, r2
 800343a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800343c:	460a      	mov	r2, r1
 800343e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003442:	4413      	add	r3, r2
 8003444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003448:	2200      	movs	r2, #0
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	61fa      	str	r2, [r7, #28]
 800344e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003452:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003456:	f7fd fbcf 	bl	8000bf8 <__aeabi_uldivmod>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4613      	mov	r3, r2
 8003460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003462:	e053      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003464:	4b35      	ldr	r3, [pc, #212]	@ (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	099b      	lsrs	r3, r3, #6
 800346a:	2200      	movs	r2, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	617a      	str	r2, [r7, #20]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003476:	f04f 0b00 	mov.w	fp, #0
 800347a:	4652      	mov	r2, sl
 800347c:	465b      	mov	r3, fp
 800347e:	f04f 0000 	mov.w	r0, #0
 8003482:	f04f 0100 	mov.w	r1, #0
 8003486:	0159      	lsls	r1, r3, #5
 8003488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800348c:	0150      	lsls	r0, r2, #5
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	ebb2 080a 	subs.w	r8, r2, sl
 8003496:	eb63 090b 	sbc.w	r9, r3, fp
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034ae:	ebb2 0408 	subs.w	r4, r2, r8
 80034b2:	eb63 0509 	sbc.w	r5, r3, r9
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	00eb      	lsls	r3, r5, #3
 80034c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c4:	00e2      	lsls	r2, r4, #3
 80034c6:	4614      	mov	r4, r2
 80034c8:	461d      	mov	r5, r3
 80034ca:	eb14 030a 	adds.w	r3, r4, sl
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	eb45 030b 	adc.w	r3, r5, fp
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034e2:	4629      	mov	r1, r5
 80034e4:	028b      	lsls	r3, r1, #10
 80034e6:	4621      	mov	r1, r4
 80034e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034ec:	4621      	mov	r1, r4
 80034ee:	028a      	lsls	r2, r1, #10
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f6:	2200      	movs	r2, #0
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	60fa      	str	r2, [r7, #12]
 80034fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003500:	f7fd fb7a 	bl	8000bf8 <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4613      	mov	r3, r2
 800350a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800350c:	4b0b      	ldr	r3, [pc, #44]	@ (800353c <HAL_RCC_GetSysClockFreq+0x180>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	3301      	adds	r3, #1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800351c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800351e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003526:	e002      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b05      	ldr	r3, [pc, #20]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x184>)
 800352a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800352c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003530:	4618      	mov	r0, r3
 8003532:	3740      	adds	r7, #64	@ 0x40
 8003534:	46bd      	mov	sp, r7
 8003536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	00f42400 	.word	0x00f42400
 8003544:	017d7840 	.word	0x017d7840

08003548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800354c:	4b03      	ldr	r3, [pc, #12]	@ (800355c <HAL_RCC_GetHCLKFreq+0x14>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000168 	.word	0x20000168

08003560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003564:	f7ff fff0 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	0a9b      	lsrs	r3, r3, #10
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	@ (8003584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	08007c10 	.word	0x08007c10

08003588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800358c:	f7ff ffdc 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0b5b      	lsrs	r3, r3, #13
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4903      	ldr	r1, [pc, #12]	@ (80035ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	08007c10 	.word	0x08007c10

080035b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e041      	b.n	8003646 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fe fe6c 	bl	80022b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f000 fd54 	bl	800409c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d001      	beq.n	8003668 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e03c      	b.n	80036e2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1e      	ldr	r2, [pc, #120]	@ (80036f0 <HAL_TIM_Base_Start+0xa0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d018      	beq.n	80036ac <HAL_TIM_Base_Start+0x5c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003682:	d013      	beq.n	80036ac <HAL_TIM_Base_Start+0x5c>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1a      	ldr	r2, [pc, #104]	@ (80036f4 <HAL_TIM_Base_Start+0xa4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00e      	beq.n	80036ac <HAL_TIM_Base_Start+0x5c>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a19      	ldr	r2, [pc, #100]	@ (80036f8 <HAL_TIM_Base_Start+0xa8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d009      	beq.n	80036ac <HAL_TIM_Base_Start+0x5c>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a17      	ldr	r2, [pc, #92]	@ (80036fc <HAL_TIM_Base_Start+0xac>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <HAL_TIM_Base_Start+0x5c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a16      	ldr	r2, [pc, #88]	@ (8003700 <HAL_TIM_Base_Start+0xb0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d111      	bne.n	80036d0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d010      	beq.n	80036e0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ce:	e007      	b.n	80036e0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40010000 	.word	0x40010000
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800
 80036fc:	40000c00 	.word	0x40000c00
 8003700:	40014000 	.word	0x40014000

08003704 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b01      	cmp	r3, #1
 8003716:	d001      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e044      	b.n	80037a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1e      	ldr	r2, [pc, #120]	@ (80037b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d018      	beq.n	8003770 <HAL_TIM_Base_Start_IT+0x6c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003746:	d013      	beq.n	8003770 <HAL_TIM_Base_Start_IT+0x6c>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1a      	ldr	r2, [pc, #104]	@ (80037b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00e      	beq.n	8003770 <HAL_TIM_Base_Start_IT+0x6c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a19      	ldr	r2, [pc, #100]	@ (80037bc <HAL_TIM_Base_Start_IT+0xb8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d009      	beq.n	8003770 <HAL_TIM_Base_Start_IT+0x6c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a17      	ldr	r2, [pc, #92]	@ (80037c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d004      	beq.n	8003770 <HAL_TIM_Base_Start_IT+0x6c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a16      	ldr	r2, [pc, #88]	@ (80037c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d111      	bne.n	8003794 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b06      	cmp	r3, #6
 8003780:	d010      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003792:	e007      	b.n	80037a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40000800 	.word	0x40000800
 80037c0:	40000c00 	.word	0x40000c00
 80037c4:	40014000 	.word	0x40014000

080037c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e041      	b.n	800385e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f839 	bl	8003866 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	4619      	mov	r1, r3
 8003806:	4610      	mov	r0, r2
 8003808:	f000 fc48 	bl	800409c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d109      	bne.n	80038a0 <HAL_TIM_PWM_Start+0x24>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	bf14      	ite	ne
 8003898:	2301      	movne	r3, #1
 800389a:	2300      	moveq	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e022      	b.n	80038e6 <HAL_TIM_PWM_Start+0x6a>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d109      	bne.n	80038ba <HAL_TIM_PWM_Start+0x3e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	bf14      	ite	ne
 80038b2:	2301      	movne	r3, #1
 80038b4:	2300      	moveq	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	e015      	b.n	80038e6 <HAL_TIM_PWM_Start+0x6a>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d109      	bne.n	80038d4 <HAL_TIM_PWM_Start+0x58>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	bf14      	ite	ne
 80038cc:	2301      	movne	r3, #1
 80038ce:	2300      	moveq	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	e008      	b.n	80038e6 <HAL_TIM_PWM_Start+0x6a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e068      	b.n	80039c0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_PWM_Start+0x82>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038fc:	e013      	b.n	8003926 <HAL_TIM_PWM_Start+0xaa>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d104      	bne.n	800390e <HAL_TIM_PWM_Start+0x92>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800390c:	e00b      	b.n	8003926 <HAL_TIM_PWM_Start+0xaa>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d104      	bne.n	800391e <HAL_TIM_PWM_Start+0xa2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800391c:	e003      	b.n	8003926 <HAL_TIM_PWM_Start+0xaa>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2201      	movs	r2, #1
 800392c:	6839      	ldr	r1, [r7, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fe5a 	bl	80045e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a23      	ldr	r2, [pc, #140]	@ (80039c8 <HAL_TIM_PWM_Start+0x14c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d107      	bne.n	800394e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800394c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1d      	ldr	r2, [pc, #116]	@ (80039c8 <HAL_TIM_PWM_Start+0x14c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d018      	beq.n	800398a <HAL_TIM_PWM_Start+0x10e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003960:	d013      	beq.n	800398a <HAL_TIM_PWM_Start+0x10e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a19      	ldr	r2, [pc, #100]	@ (80039cc <HAL_TIM_PWM_Start+0x150>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00e      	beq.n	800398a <HAL_TIM_PWM_Start+0x10e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a17      	ldr	r2, [pc, #92]	@ (80039d0 <HAL_TIM_PWM_Start+0x154>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d009      	beq.n	800398a <HAL_TIM_PWM_Start+0x10e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a16      	ldr	r2, [pc, #88]	@ (80039d4 <HAL_TIM_PWM_Start+0x158>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d004      	beq.n	800398a <HAL_TIM_PWM_Start+0x10e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a14      	ldr	r2, [pc, #80]	@ (80039d8 <HAL_TIM_PWM_Start+0x15c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d111      	bne.n	80039ae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b06      	cmp	r3, #6
 800399a:	d010      	beq.n	80039be <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ac:	e007      	b.n	80039be <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0201 	orr.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40010000 	.word	0x40010000
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800
 80039d4:	40000c00 	.word	0x40000c00
 80039d8:	40014000 	.word	0x40014000

080039dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e097      	b.n	8003b20 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7fe fc0d 	bl	8002224 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a20:	f023 0307 	bic.w	r3, r3, #7
 8003a24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4610      	mov	r0, r2
 8003a32:	f000 fb33 	bl	800409c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003a7c:	f023 030c 	bic.w	r3, r3, #12
 8003a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	011a      	lsls	r2, r3, #4
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	031b      	lsls	r3, r3, #12
 8003aac:	4313      	orrs	r3, r2
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003aba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0202 	mvn.w	r2, #2
 8003b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fa77 	bl	800405e <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa69 	bl	800404a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fa7a 	bl	8004072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0204 	mvn.w	r2, #4
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa4d 	bl	800405e <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fa3f 	bl	800404a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fa50 	bl	8004072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0208 	mvn.w	r2, #8
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2204      	movs	r2, #4
 8003c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fa23 	bl	800405e <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fa15 	bl	800404a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fa26 	bl	8004072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d122      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d11b      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0210 	mvn.w	r2, #16
 8003c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2208      	movs	r2, #8
 8003c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f9f9 	bl	800405e <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f9eb 	bl	800404a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f9fc 	bl	8004072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d10e      	bne.n	8003cac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d107      	bne.n	8003cac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0201 	mvn.w	r2, #1
 8003ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fe f8ee 	bl	8001e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb6:	2b80      	cmp	r3, #128	@ 0x80
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc4:	2b80      	cmp	r3, #128	@ 0x80
 8003cc6:	d107      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fd26 	bl	8004724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d10e      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf0:	2b40      	cmp	r3, #64	@ 0x40
 8003cf2:	d107      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f9c1 	bl	8004086 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d10e      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d107      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0220 	mvn.w	r2, #32
 8003d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fcf0 	bl	8004710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e0ae      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	f200 809f 	bhi.w	8003ea4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d66:	a201      	add	r2, pc, #4	@ (adr r2, 8003d6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003da1 	.word	0x08003da1
 8003d70:	08003ea5 	.word	0x08003ea5
 8003d74:	08003ea5 	.word	0x08003ea5
 8003d78:	08003ea5 	.word	0x08003ea5
 8003d7c:	08003de1 	.word	0x08003de1
 8003d80:	08003ea5 	.word	0x08003ea5
 8003d84:	08003ea5 	.word	0x08003ea5
 8003d88:	08003ea5 	.word	0x08003ea5
 8003d8c:	08003e23 	.word	0x08003e23
 8003d90:	08003ea5 	.word	0x08003ea5
 8003d94:	08003ea5 	.word	0x08003ea5
 8003d98:	08003ea5 	.word	0x08003ea5
 8003d9c:	08003e63 	.word	0x08003e63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f9f8 	bl	800419c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0208 	orr.w	r2, r2, #8
 8003dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0204 	bic.w	r2, r2, #4
 8003dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6999      	ldr	r1, [r3, #24]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	619a      	str	r2, [r3, #24]
      break;
 8003dde:	e064      	b.n	8003eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fa3e 	bl	8004268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6999      	ldr	r1, [r3, #24]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	021a      	lsls	r2, r3, #8
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	619a      	str	r2, [r3, #24]
      break;
 8003e20:	e043      	b.n	8003eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fa89 	bl	8004340 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0208 	orr.w	r2, r2, #8
 8003e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69da      	ldr	r2, [r3, #28]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0204 	bic.w	r2, r2, #4
 8003e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69d9      	ldr	r1, [r3, #28]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	61da      	str	r2, [r3, #28]
      break;
 8003e60:	e023      	b.n	8003eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fad3 	bl	8004414 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69d9      	ldr	r1, [r3, #28]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	021a      	lsls	r2, r3, #8
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	61da      	str	r2, [r3, #28]
      break;
 8003ea2:	e002      	b.n	8003eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e0b4      	b.n	8004042 <HAL_TIM_ConfigClockSource+0x186>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003efe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f10:	d03e      	beq.n	8003f90 <HAL_TIM_ConfigClockSource+0xd4>
 8003f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f16:	f200 8087 	bhi.w	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f1e:	f000 8086 	beq.w	800402e <HAL_TIM_ConfigClockSource+0x172>
 8003f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f26:	d87f      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f28:	2b70      	cmp	r3, #112	@ 0x70
 8003f2a:	d01a      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0xa6>
 8003f2c:	2b70      	cmp	r3, #112	@ 0x70
 8003f2e:	d87b      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f30:	2b60      	cmp	r3, #96	@ 0x60
 8003f32:	d050      	beq.n	8003fd6 <HAL_TIM_ConfigClockSource+0x11a>
 8003f34:	2b60      	cmp	r3, #96	@ 0x60
 8003f36:	d877      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f38:	2b50      	cmp	r3, #80	@ 0x50
 8003f3a:	d03c      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0xfa>
 8003f3c:	2b50      	cmp	r3, #80	@ 0x50
 8003f3e:	d873      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f40:	2b40      	cmp	r3, #64	@ 0x40
 8003f42:	d058      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0x13a>
 8003f44:	2b40      	cmp	r3, #64	@ 0x40
 8003f46:	d86f      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b30      	cmp	r3, #48	@ 0x30
 8003f4a:	d064      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x15a>
 8003f4c:	2b30      	cmp	r3, #48	@ 0x30
 8003f4e:	d86b      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d060      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x15a>
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d867      	bhi.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d05c      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x15a>
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d05a      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x15a>
 8003f60:	e062      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6899      	ldr	r1, [r3, #8]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f000 fb19 	bl	80045a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	609a      	str	r2, [r3, #8]
      break;
 8003f8e:	e04f      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	6899      	ldr	r1, [r3, #8]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f000 fb02 	bl	80045a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fb2:	609a      	str	r2, [r3, #8]
      break;
 8003fb4:	e03c      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6859      	ldr	r1, [r3, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f000 fa76 	bl	80044b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2150      	movs	r1, #80	@ 0x50
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 facf 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 8003fd4:	e02c      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	6859      	ldr	r1, [r3, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f000 fa95 	bl	8004512 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2160      	movs	r1, #96	@ 0x60
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fabf 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 8003ff4:	e01c      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6859      	ldr	r1, [r3, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	461a      	mov	r2, r3
 8004004:	f000 fa56 	bl	80044b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2140      	movs	r1, #64	@ 0x40
 800400e:	4618      	mov	r0, r3
 8004010:	f000 faaf 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 8004014:	e00c      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f000 faa6 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 8004026:	e003      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      break;
 800402c:	e000      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800402e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004040:	7bfb      	ldrb	r3, [r7, #15]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a34      	ldr	r2, [pc, #208]	@ (8004180 <TIM_Base_SetConfig+0xe4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00f      	beq.n	80040d4 <TIM_Base_SetConfig+0x38>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ba:	d00b      	beq.n	80040d4 <TIM_Base_SetConfig+0x38>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a31      	ldr	r2, [pc, #196]	@ (8004184 <TIM_Base_SetConfig+0xe8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d007      	beq.n	80040d4 <TIM_Base_SetConfig+0x38>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a30      	ldr	r2, [pc, #192]	@ (8004188 <TIM_Base_SetConfig+0xec>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d003      	beq.n	80040d4 <TIM_Base_SetConfig+0x38>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a2f      	ldr	r2, [pc, #188]	@ (800418c <TIM_Base_SetConfig+0xf0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d108      	bne.n	80040e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a25      	ldr	r2, [pc, #148]	@ (8004180 <TIM_Base_SetConfig+0xe4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01b      	beq.n	8004126 <TIM_Base_SetConfig+0x8a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f4:	d017      	beq.n	8004126 <TIM_Base_SetConfig+0x8a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a22      	ldr	r2, [pc, #136]	@ (8004184 <TIM_Base_SetConfig+0xe8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d013      	beq.n	8004126 <TIM_Base_SetConfig+0x8a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a21      	ldr	r2, [pc, #132]	@ (8004188 <TIM_Base_SetConfig+0xec>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00f      	beq.n	8004126 <TIM_Base_SetConfig+0x8a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a20      	ldr	r2, [pc, #128]	@ (800418c <TIM_Base_SetConfig+0xf0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00b      	beq.n	8004126 <TIM_Base_SetConfig+0x8a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a1f      	ldr	r2, [pc, #124]	@ (8004190 <TIM_Base_SetConfig+0xf4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d007      	beq.n	8004126 <TIM_Base_SetConfig+0x8a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a1e      	ldr	r2, [pc, #120]	@ (8004194 <TIM_Base_SetConfig+0xf8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d003      	beq.n	8004126 <TIM_Base_SetConfig+0x8a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a1d      	ldr	r2, [pc, #116]	@ (8004198 <TIM_Base_SetConfig+0xfc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d108      	bne.n	8004138 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800412c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a08      	ldr	r2, [pc, #32]	@ (8004180 <TIM_Base_SetConfig+0xe4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d103      	bne.n	800416c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	615a      	str	r2, [r3, #20]
}
 8004172:	bf00      	nop
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40010000 	.word	0x40010000
 8004184:	40000400 	.word	0x40000400
 8004188:	40000800 	.word	0x40000800
 800418c:	40000c00 	.word	0x40000c00
 8004190:	40014000 	.word	0x40014000
 8004194:	40014400 	.word	0x40014400
 8004198:	40014800 	.word	0x40014800

0800419c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f023 0201 	bic.w	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0303 	bic.w	r3, r3, #3
 80041d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f023 0302 	bic.w	r3, r3, #2
 80041e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004264 <TIM_OC1_SetConfig+0xc8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d10c      	bne.n	8004212 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 0308 	bic.w	r3, r3, #8
 80041fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f023 0304 	bic.w	r3, r3, #4
 8004210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a13      	ldr	r2, [pc, #76]	@ (8004264 <TIM_OC1_SetConfig+0xc8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d111      	bne.n	800423e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	621a      	str	r2, [r3, #32]
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40010000 	.word	0x40010000

08004268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f023 0210 	bic.w	r2, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800429e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f023 0320 	bic.w	r3, r3, #32
 80042b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a1e      	ldr	r2, [pc, #120]	@ (800433c <TIM_OC2_SetConfig+0xd4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d10d      	bne.n	80042e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a15      	ldr	r2, [pc, #84]	@ (800433c <TIM_OC2_SetConfig+0xd4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d113      	bne.n	8004314 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	621a      	str	r2, [r3, #32]
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40010000 	.word	0x40010000

08004340 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800436e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0303 	bic.w	r3, r3, #3
 8004376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1d      	ldr	r2, [pc, #116]	@ (8004410 <TIM_OC3_SetConfig+0xd0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d10d      	bne.n	80043ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a14      	ldr	r2, [pc, #80]	@ (8004410 <TIM_OC3_SetConfig+0xd0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d113      	bne.n	80043ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	621a      	str	r2, [r3, #32]
}
 8004404:	bf00      	nop
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40010000 	.word	0x40010000

08004414 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800444a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800445e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	031b      	lsls	r3, r3, #12
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a10      	ldr	r2, [pc, #64]	@ (80044b0 <TIM_OC4_SetConfig+0x9c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d109      	bne.n	8004488 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800447a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	019b      	lsls	r3, r3, #6
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000

080044b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f023 0201 	bic.w	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 030a 	bic.w	r3, r3, #10
 80044f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004512:	b480      	push	{r7}
 8004514:	b087      	sub	sp, #28
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0210 	bic.w	r2, r3, #16
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800453c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	031b      	lsls	r3, r3, #12
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800454e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	f043 0307 	orr.w	r3, r3, #7
 8004594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	609a      	str	r2, [r3, #8]
}
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	021a      	lsls	r2, r3, #8
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	609a      	str	r2, [r3, #8]
}
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	2201      	movs	r2, #1
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1a      	ldr	r2, [r3, #32]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	43db      	mvns	r3, r3
 800460a:	401a      	ands	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a1a      	ldr	r2, [r3, #32]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	431a      	orrs	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004648:	2302      	movs	r3, #2
 800464a:	e050      	b.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a1c      	ldr	r2, [pc, #112]	@ (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d018      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004698:	d013      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a18      	ldr	r2, [pc, #96]	@ (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a16      	ldr	r2, [pc, #88]	@ (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d009      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a15      	ldr	r2, [pc, #84]	@ (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a13      	ldr	r2, [pc, #76]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d10c      	bne.n	80046dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40010000 	.word	0x40010000
 8004700:	40000400 	.word	0x40000400
 8004704:	40000800 	.word	0x40000800
 8004708:	40000c00 	.word	0x40000c00
 800470c:	40014000 	.word	0x40014000

08004710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e03f      	b.n	80047ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fd fe20 	bl	80023a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2224      	movs	r2, #36	@ 0x24
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800477a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f929 	bl	80049d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b08a      	sub	sp, #40	@ 0x28
 80047d6:	af02      	add	r7, sp, #8
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	603b      	str	r3, [r7, #0]
 80047de:	4613      	mov	r3, r2
 80047e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d17c      	bne.n	80048ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_UART_Transmit+0x2c>
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e075      	b.n	80048ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_UART_Transmit+0x3e>
 800480c:	2302      	movs	r3, #2
 800480e:	e06e      	b.n	80048ee <HAL_UART_Transmit+0x11c>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2221      	movs	r2, #33	@ 0x21
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004826:	f7fd ff8b 	bl	8002740 <HAL_GetTick>
 800482a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	88fa      	ldrh	r2, [r7, #6]
 8004830:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	88fa      	ldrh	r2, [r7, #6]
 8004836:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004840:	d108      	bne.n	8004854 <HAL_UART_Transmit+0x82>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d104      	bne.n	8004854 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	e003      	b.n	800485c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004858:	2300      	movs	r3, #0
 800485a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8004864:	e02a      	b.n	80048bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2200      	movs	r2, #0
 800486e:	2180      	movs	r1, #128	@ 0x80
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f840 	bl	80048f6 <UART_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e036      	b.n	80048ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10b      	bne.n	800489e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004894:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	3302      	adds	r3, #2
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	e007      	b.n	80048ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	781a      	ldrb	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	3301      	adds	r3, #1
 80048ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1cf      	bne.n	8004866 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2200      	movs	r2, #0
 80048ce:	2140      	movs	r1, #64	@ 0x40
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f810 	bl	80048f6 <UART_WaitOnFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e006      	b.n	80048ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	e000      	b.n	80048ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
  }
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3720      	adds	r7, #32
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b090      	sub	sp, #64	@ 0x40
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	603b      	str	r3, [r7, #0]
 8004902:	4613      	mov	r3, r2
 8004904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004906:	e050      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490e:	d04c      	beq.n	80049aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <UART_WaitOnFlagUntilTimeout+0x30>
 8004916:	f7fd ff13 	bl	8002740 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004922:	429a      	cmp	r2, r3
 8004924:	d241      	bcs.n	80049aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800493c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004946:	637a      	str	r2, [r7, #52]	@ 0x34
 8004948:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800494c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e5      	bne.n	8004926 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3314      	adds	r3, #20
 8004960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	613b      	str	r3, [r7, #16]
   return(result);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3314      	adds	r3, #20
 8004978:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800497a:	623a      	str	r2, [r7, #32]
 800497c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	69f9      	ldr	r1, [r7, #28]
 8004980:	6a3a      	ldr	r2, [r7, #32]
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	61bb      	str	r3, [r7, #24]
   return(result);
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e5      	bne.n	800495a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e00f      	b.n	80049ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4013      	ands	r3, r2
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	bf0c      	ite	eq
 80049ba:	2301      	moveq	r3, #1
 80049bc:	2300      	movne	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d09f      	beq.n	8004908 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3740      	adds	r7, #64	@ 0x40
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049d8:	b0c0      	sub	sp, #256	@ 0x100
 80049da:	af00      	add	r7, sp, #0
 80049dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f0:	68d9      	ldr	r1, [r3, #12]
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	ea40 0301 	orr.w	r3, r0, r1
 80049fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a2c:	f021 010c 	bic.w	r1, r1, #12
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4e:	6999      	ldr	r1, [r3, #24]
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	ea40 0301 	orr.w	r3, r0, r1
 8004a5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b8f      	ldr	r3, [pc, #572]	@ (8004ca0 <UART_SetConfig+0x2cc>)
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d005      	beq.n	8004a74 <UART_SetConfig+0xa0>
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8004ca4 <UART_SetConfig+0x2d0>)
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d104      	bne.n	8004a7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a74:	f7fe fd88 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 8004a78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a7c:	e003      	b.n	8004a86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a7e:	f7fe fd6f 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8004a82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a90:	f040 810c 	bne.w	8004cac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004aa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004aa6:	4622      	mov	r2, r4
 8004aa8:	462b      	mov	r3, r5
 8004aaa:	1891      	adds	r1, r2, r2
 8004aac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004aae:	415b      	adcs	r3, r3
 8004ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ab2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	eb12 0801 	adds.w	r8, r2, r1
 8004abc:	4629      	mov	r1, r5
 8004abe:	eb43 0901 	adc.w	r9, r3, r1
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ad6:	4690      	mov	r8, r2
 8004ad8:	4699      	mov	r9, r3
 8004ada:	4623      	mov	r3, r4
 8004adc:	eb18 0303 	adds.w	r3, r8, r3
 8004ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ae4:	462b      	mov	r3, r5
 8004ae6:	eb49 0303 	adc.w	r3, r9, r3
 8004aea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004afa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004afe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b02:	460b      	mov	r3, r1
 8004b04:	18db      	adds	r3, r3, r3
 8004b06:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b08:	4613      	mov	r3, r2
 8004b0a:	eb42 0303 	adc.w	r3, r2, r3
 8004b0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b18:	f7fc f86e 	bl	8000bf8 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4b61      	ldr	r3, [pc, #388]	@ (8004ca8 <UART_SetConfig+0x2d4>)
 8004b22:	fba3 2302 	umull	r2, r3, r3, r2
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	011c      	lsls	r4, r3, #4
 8004b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	1891      	adds	r1, r2, r2
 8004b42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b44:	415b      	adcs	r3, r3
 8004b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b52:	4649      	mov	r1, r9
 8004b54:	eb43 0b01 	adc.w	fp, r3, r1
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b6c:	4692      	mov	sl, r2
 8004b6e:	469b      	mov	fp, r3
 8004b70:	4643      	mov	r3, r8
 8004b72:	eb1a 0303 	adds.w	r3, sl, r3
 8004b76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	18db      	adds	r3, r3, r3
 8004b9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	eb42 0303 	adc.w	r3, r2, r3
 8004ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ba6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004baa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004bae:	f7fc f823 	bl	8000bf8 <__aeabi_uldivmod>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca8 <UART_SetConfig+0x2d4>)
 8004bba:	fba3 2301 	umull	r2, r3, r3, r1
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	2264      	movs	r2, #100	@ 0x64
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	1acb      	subs	r3, r1, r3
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bce:	4b36      	ldr	r3, [pc, #216]	@ (8004ca8 <UART_SetConfig+0x2d4>)
 8004bd0:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004bdc:	441c      	add	r4, r3
 8004bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004be8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	1891      	adds	r1, r2, r2
 8004bf6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bf8:	415b      	adcs	r3, r3
 8004bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c00:	4641      	mov	r1, r8
 8004c02:	1851      	adds	r1, r2, r1
 8004c04:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c06:	4649      	mov	r1, r9
 8004c08:	414b      	adcs	r3, r1
 8004c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c18:	4659      	mov	r1, fp
 8004c1a:	00cb      	lsls	r3, r1, #3
 8004c1c:	4651      	mov	r1, sl
 8004c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c22:	4651      	mov	r1, sl
 8004c24:	00ca      	lsls	r2, r1, #3
 8004c26:	4610      	mov	r0, r2
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4642      	mov	r2, r8
 8004c2e:	189b      	adds	r3, r3, r2
 8004c30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c34:	464b      	mov	r3, r9
 8004c36:	460a      	mov	r2, r1
 8004c38:	eb42 0303 	adc.w	r3, r2, r3
 8004c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c54:	460b      	mov	r3, r1
 8004c56:	18db      	adds	r3, r3, r3
 8004c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	eb42 0303 	adc.w	r3, r2, r3
 8004c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c6a:	f7fb ffc5 	bl	8000bf8 <__aeabi_uldivmod>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca8 <UART_SetConfig+0x2d4>)
 8004c74:	fba3 1302 	umull	r1, r3, r3, r2
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	2164      	movs	r1, #100	@ 0x64
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	3332      	adds	r3, #50	@ 0x32
 8004c86:	4a08      	ldr	r2, [pc, #32]	@ (8004ca8 <UART_SetConfig+0x2d4>)
 8004c88:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	f003 0207 	and.w	r2, r3, #7
 8004c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4422      	add	r2, r4
 8004c9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c9c:	e106      	b.n	8004eac <UART_SetConfig+0x4d8>
 8004c9e:	bf00      	nop
 8004ca0:	40011000 	.word	0x40011000
 8004ca4:	40011400 	.word	0x40011400
 8004ca8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cbe:	4642      	mov	r2, r8
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	1891      	adds	r1, r2, r2
 8004cc4:	6239      	str	r1, [r7, #32]
 8004cc6:	415b      	adcs	r3, r3
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cce:	4641      	mov	r1, r8
 8004cd0:	1854      	adds	r4, r2, r1
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	eb43 0501 	adc.w	r5, r3, r1
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	00eb      	lsls	r3, r5, #3
 8004ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ce6:	00e2      	lsls	r2, r4, #3
 8004ce8:	4614      	mov	r4, r2
 8004cea:	461d      	mov	r5, r3
 8004cec:	4643      	mov	r3, r8
 8004cee:	18e3      	adds	r3, r4, r3
 8004cf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cf4:	464b      	mov	r3, r9
 8004cf6:	eb45 0303 	adc.w	r3, r5, r3
 8004cfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	008b      	lsls	r3, r1, #2
 8004d1e:	4621      	mov	r1, r4
 8004d20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d24:	4621      	mov	r1, r4
 8004d26:	008a      	lsls	r2, r1, #2
 8004d28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d2c:	f7fb ff64 	bl	8000bf8 <__aeabi_uldivmod>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4b60      	ldr	r3, [pc, #384]	@ (8004eb8 <UART_SetConfig+0x4e4>)
 8004d36:	fba3 2302 	umull	r2, r3, r3, r2
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	011c      	lsls	r4, r3, #4
 8004d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d50:	4642      	mov	r2, r8
 8004d52:	464b      	mov	r3, r9
 8004d54:	1891      	adds	r1, r2, r2
 8004d56:	61b9      	str	r1, [r7, #24]
 8004d58:	415b      	adcs	r3, r3
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d60:	4641      	mov	r1, r8
 8004d62:	1851      	adds	r1, r2, r1
 8004d64:	6139      	str	r1, [r7, #16]
 8004d66:	4649      	mov	r1, r9
 8004d68:	414b      	adcs	r3, r1
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d78:	4659      	mov	r1, fp
 8004d7a:	00cb      	lsls	r3, r1, #3
 8004d7c:	4651      	mov	r1, sl
 8004d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d82:	4651      	mov	r1, sl
 8004d84:	00ca      	lsls	r2, r1, #3
 8004d86:	4610      	mov	r0, r2
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	189b      	adds	r3, r3, r2
 8004d90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d94:	464b      	mov	r3, r9
 8004d96:	460a      	mov	r2, r1
 8004d98:	eb42 0303 	adc.w	r3, r2, r3
 8004d9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004daa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004db8:	4649      	mov	r1, r9
 8004dba:	008b      	lsls	r3, r1, #2
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dc2:	4641      	mov	r1, r8
 8004dc4:	008a      	lsls	r2, r1, #2
 8004dc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004dca:	f7fb ff15 	bl	8000bf8 <__aeabi_uldivmod>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4b38      	ldr	r3, [pc, #224]	@ (8004eb8 <UART_SetConfig+0x4e4>)
 8004dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2264      	movs	r2, #100	@ 0x64
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	1acb      	subs	r3, r1, r3
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	3332      	adds	r3, #50	@ 0x32
 8004de8:	4a33      	ldr	r2, [pc, #204]	@ (8004eb8 <UART_SetConfig+0x4e4>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004df4:	441c      	add	r4, r3
 8004df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dfe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e04:	4642      	mov	r2, r8
 8004e06:	464b      	mov	r3, r9
 8004e08:	1891      	adds	r1, r2, r2
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	415b      	adcs	r3, r3
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e14:	4641      	mov	r1, r8
 8004e16:	1851      	adds	r1, r2, r1
 8004e18:	6039      	str	r1, [r7, #0]
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	414b      	adcs	r3, r1
 8004e1e:	607b      	str	r3, [r7, #4]
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	00cb      	lsls	r3, r1, #3
 8004e30:	4651      	mov	r1, sl
 8004e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e36:	4651      	mov	r1, sl
 8004e38:	00ca      	lsls	r2, r1, #3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4603      	mov	r3, r0
 8004e40:	4642      	mov	r2, r8
 8004e42:	189b      	adds	r3, r3, r2
 8004e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e46:	464b      	mov	r3, r9
 8004e48:	460a      	mov	r2, r1
 8004e4a:	eb42 0303 	adc.w	r3, r2, r3
 8004e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e68:	4649      	mov	r1, r9
 8004e6a:	008b      	lsls	r3, r1, #2
 8004e6c:	4641      	mov	r1, r8
 8004e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e72:	4641      	mov	r1, r8
 8004e74:	008a      	lsls	r2, r1, #2
 8004e76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e7a:	f7fb febd 	bl	8000bf8 <__aeabi_uldivmod>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb8 <UART_SetConfig+0x4e4>)
 8004e84:	fba3 1302 	umull	r1, r3, r3, r2
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	2164      	movs	r1, #100	@ 0x64
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	3332      	adds	r3, #50	@ 0x32
 8004e96:	4a08      	ldr	r2, [pc, #32]	@ (8004eb8 <UART_SetConfig+0x4e4>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	f003 020f 	and.w	r2, r3, #15
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4422      	add	r2, r4
 8004eaa:	609a      	str	r2, [r3, #8]
}
 8004eac:	bf00      	nop
 8004eae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb8:	51eb851f 	.word	0x51eb851f

08004ebc <calloc>:
 8004ebc:	4b02      	ldr	r3, [pc, #8]	@ (8004ec8 <calloc+0xc>)
 8004ebe:	460a      	mov	r2, r1
 8004ec0:	4601      	mov	r1, r0
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	f000 b802 	b.w	8004ecc <_calloc_r>
 8004ec8:	20000180 	.word	0x20000180

08004ecc <_calloc_r>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	fba1 5402 	umull	r5, r4, r1, r2
 8004ed2:	b93c      	cbnz	r4, 8004ee4 <_calloc_r+0x18>
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f000 f837 	bl	8004f48 <_malloc_r>
 8004eda:	4606      	mov	r6, r0
 8004edc:	b928      	cbnz	r0, 8004eea <_calloc_r+0x1e>
 8004ede:	2600      	movs	r6, #0
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}
 8004ee4:	220c      	movs	r2, #12
 8004ee6:	6002      	str	r2, [r0, #0]
 8004ee8:	e7f9      	b.n	8004ede <_calloc_r+0x12>
 8004eea:	462a      	mov	r2, r5
 8004eec:	4621      	mov	r1, r4
 8004eee:	f000 fe40 	bl	8005b72 <memset>
 8004ef2:	e7f5      	b.n	8004ee0 <_calloc_r+0x14>

08004ef4 <malloc>:
 8004ef4:	4b02      	ldr	r3, [pc, #8]	@ (8004f00 <malloc+0xc>)
 8004ef6:	4601      	mov	r1, r0
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	f000 b825 	b.w	8004f48 <_malloc_r>
 8004efe:	bf00      	nop
 8004f00:	20000180 	.word	0x20000180

08004f04 <sbrk_aligned>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	4e0f      	ldr	r6, [pc, #60]	@ (8004f44 <sbrk_aligned+0x40>)
 8004f08:	460c      	mov	r4, r1
 8004f0a:	6831      	ldr	r1, [r6, #0]
 8004f0c:	4605      	mov	r5, r0
 8004f0e:	b911      	cbnz	r1, 8004f16 <sbrk_aligned+0x12>
 8004f10:	f000 fe70 	bl	8005bf4 <_sbrk_r>
 8004f14:	6030      	str	r0, [r6, #0]
 8004f16:	4621      	mov	r1, r4
 8004f18:	4628      	mov	r0, r5
 8004f1a:	f000 fe6b 	bl	8005bf4 <_sbrk_r>
 8004f1e:	1c43      	adds	r3, r0, #1
 8004f20:	d103      	bne.n	8004f2a <sbrk_aligned+0x26>
 8004f22:	f04f 34ff 	mov.w	r4, #4294967295
 8004f26:	4620      	mov	r0, r4
 8004f28:	bd70      	pop	{r4, r5, r6, pc}
 8004f2a:	1cc4      	adds	r4, r0, #3
 8004f2c:	f024 0403 	bic.w	r4, r4, #3
 8004f30:	42a0      	cmp	r0, r4
 8004f32:	d0f8      	beq.n	8004f26 <sbrk_aligned+0x22>
 8004f34:	1a21      	subs	r1, r4, r0
 8004f36:	4628      	mov	r0, r5
 8004f38:	f000 fe5c 	bl	8005bf4 <_sbrk_r>
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d1f2      	bne.n	8004f26 <sbrk_aligned+0x22>
 8004f40:	e7ef      	b.n	8004f22 <sbrk_aligned+0x1e>
 8004f42:	bf00      	nop
 8004f44:	20000508 	.word	0x20000508

08004f48 <_malloc_r>:
 8004f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f4c:	1ccd      	adds	r5, r1, #3
 8004f4e:	f025 0503 	bic.w	r5, r5, #3
 8004f52:	3508      	adds	r5, #8
 8004f54:	2d0c      	cmp	r5, #12
 8004f56:	bf38      	it	cc
 8004f58:	250c      	movcc	r5, #12
 8004f5a:	2d00      	cmp	r5, #0
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	db01      	blt.n	8004f64 <_malloc_r+0x1c>
 8004f60:	42a9      	cmp	r1, r5
 8004f62:	d904      	bls.n	8004f6e <_malloc_r+0x26>
 8004f64:	230c      	movs	r3, #12
 8004f66:	6033      	str	r3, [r6, #0]
 8004f68:	2000      	movs	r0, #0
 8004f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005044 <_malloc_r+0xfc>
 8004f72:	f000 f869 	bl	8005048 <__malloc_lock>
 8004f76:	f8d8 3000 	ldr.w	r3, [r8]
 8004f7a:	461c      	mov	r4, r3
 8004f7c:	bb44      	cbnz	r4, 8004fd0 <_malloc_r+0x88>
 8004f7e:	4629      	mov	r1, r5
 8004f80:	4630      	mov	r0, r6
 8004f82:	f7ff ffbf 	bl	8004f04 <sbrk_aligned>
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	4604      	mov	r4, r0
 8004f8a:	d158      	bne.n	800503e <_malloc_r+0xf6>
 8004f8c:	f8d8 4000 	ldr.w	r4, [r8]
 8004f90:	4627      	mov	r7, r4
 8004f92:	2f00      	cmp	r7, #0
 8004f94:	d143      	bne.n	800501e <_malloc_r+0xd6>
 8004f96:	2c00      	cmp	r4, #0
 8004f98:	d04b      	beq.n	8005032 <_malloc_r+0xea>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	4639      	mov	r1, r7
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	eb04 0903 	add.w	r9, r4, r3
 8004fa4:	f000 fe26 	bl	8005bf4 <_sbrk_r>
 8004fa8:	4581      	cmp	r9, r0
 8004faa:	d142      	bne.n	8005032 <_malloc_r+0xea>
 8004fac:	6821      	ldr	r1, [r4, #0]
 8004fae:	1a6d      	subs	r5, r5, r1
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	f7ff ffa6 	bl	8004f04 <sbrk_aligned>
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d03a      	beq.n	8005032 <_malloc_r+0xea>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	442b      	add	r3, r5
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	bb62      	cbnz	r2, 8005024 <_malloc_r+0xdc>
 8004fca:	f8c8 7000 	str.w	r7, [r8]
 8004fce:	e00f      	b.n	8004ff0 <_malloc_r+0xa8>
 8004fd0:	6822      	ldr	r2, [r4, #0]
 8004fd2:	1b52      	subs	r2, r2, r5
 8004fd4:	d420      	bmi.n	8005018 <_malloc_r+0xd0>
 8004fd6:	2a0b      	cmp	r2, #11
 8004fd8:	d917      	bls.n	800500a <_malloc_r+0xc2>
 8004fda:	1961      	adds	r1, r4, r5
 8004fdc:	42a3      	cmp	r3, r4
 8004fde:	6025      	str	r5, [r4, #0]
 8004fe0:	bf18      	it	ne
 8004fe2:	6059      	strne	r1, [r3, #4]
 8004fe4:	6863      	ldr	r3, [r4, #4]
 8004fe6:	bf08      	it	eq
 8004fe8:	f8c8 1000 	streq.w	r1, [r8]
 8004fec:	5162      	str	r2, [r4, r5]
 8004fee:	604b      	str	r3, [r1, #4]
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	f000 f82f 	bl	8005054 <__malloc_unlock>
 8004ff6:	f104 000b 	add.w	r0, r4, #11
 8004ffa:	1d23      	adds	r3, r4, #4
 8004ffc:	f020 0007 	bic.w	r0, r0, #7
 8005000:	1ac2      	subs	r2, r0, r3
 8005002:	bf1c      	itt	ne
 8005004:	1a1b      	subne	r3, r3, r0
 8005006:	50a3      	strne	r3, [r4, r2]
 8005008:	e7af      	b.n	8004f6a <_malloc_r+0x22>
 800500a:	6862      	ldr	r2, [r4, #4]
 800500c:	42a3      	cmp	r3, r4
 800500e:	bf0c      	ite	eq
 8005010:	f8c8 2000 	streq.w	r2, [r8]
 8005014:	605a      	strne	r2, [r3, #4]
 8005016:	e7eb      	b.n	8004ff0 <_malloc_r+0xa8>
 8005018:	4623      	mov	r3, r4
 800501a:	6864      	ldr	r4, [r4, #4]
 800501c:	e7ae      	b.n	8004f7c <_malloc_r+0x34>
 800501e:	463c      	mov	r4, r7
 8005020:	687f      	ldr	r7, [r7, #4]
 8005022:	e7b6      	b.n	8004f92 <_malloc_r+0x4a>
 8005024:	461a      	mov	r2, r3
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	42a3      	cmp	r3, r4
 800502a:	d1fb      	bne.n	8005024 <_malloc_r+0xdc>
 800502c:	2300      	movs	r3, #0
 800502e:	6053      	str	r3, [r2, #4]
 8005030:	e7de      	b.n	8004ff0 <_malloc_r+0xa8>
 8005032:	230c      	movs	r3, #12
 8005034:	6033      	str	r3, [r6, #0]
 8005036:	4630      	mov	r0, r6
 8005038:	f000 f80c 	bl	8005054 <__malloc_unlock>
 800503c:	e794      	b.n	8004f68 <_malloc_r+0x20>
 800503e:	6005      	str	r5, [r0, #0]
 8005040:	e7d6      	b.n	8004ff0 <_malloc_r+0xa8>
 8005042:	bf00      	nop
 8005044:	2000050c 	.word	0x2000050c

08005048 <__malloc_lock>:
 8005048:	4801      	ldr	r0, [pc, #4]	@ (8005050 <__malloc_lock+0x8>)
 800504a:	f000 be20 	b.w	8005c8e <__retarget_lock_acquire_recursive>
 800504e:	bf00      	nop
 8005050:	20000650 	.word	0x20000650

08005054 <__malloc_unlock>:
 8005054:	4801      	ldr	r0, [pc, #4]	@ (800505c <__malloc_unlock+0x8>)
 8005056:	f000 be1b 	b.w	8005c90 <__retarget_lock_release_recursive>
 800505a:	bf00      	nop
 800505c:	20000650 	.word	0x20000650

08005060 <__cvt>:
 8005060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005064:	ec57 6b10 	vmov	r6, r7, d0
 8005068:	2f00      	cmp	r7, #0
 800506a:	460c      	mov	r4, r1
 800506c:	4619      	mov	r1, r3
 800506e:	463b      	mov	r3, r7
 8005070:	bfbb      	ittet	lt
 8005072:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005076:	461f      	movlt	r7, r3
 8005078:	2300      	movge	r3, #0
 800507a:	232d      	movlt	r3, #45	@ 0x2d
 800507c:	700b      	strb	r3, [r1, #0]
 800507e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005080:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005084:	4691      	mov	r9, r2
 8005086:	f023 0820 	bic.w	r8, r3, #32
 800508a:	bfbc      	itt	lt
 800508c:	4632      	movlt	r2, r6
 800508e:	4616      	movlt	r6, r2
 8005090:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005094:	d005      	beq.n	80050a2 <__cvt+0x42>
 8005096:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800509a:	d100      	bne.n	800509e <__cvt+0x3e>
 800509c:	3401      	adds	r4, #1
 800509e:	2102      	movs	r1, #2
 80050a0:	e000      	b.n	80050a4 <__cvt+0x44>
 80050a2:	2103      	movs	r1, #3
 80050a4:	ab03      	add	r3, sp, #12
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	ab02      	add	r3, sp, #8
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	ec47 6b10 	vmov	d0, r6, r7
 80050b0:	4653      	mov	r3, sl
 80050b2:	4622      	mov	r2, r4
 80050b4:	f000 fe78 	bl	8005da8 <_dtoa_r>
 80050b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80050bc:	4605      	mov	r5, r0
 80050be:	d119      	bne.n	80050f4 <__cvt+0x94>
 80050c0:	f019 0f01 	tst.w	r9, #1
 80050c4:	d00e      	beq.n	80050e4 <__cvt+0x84>
 80050c6:	eb00 0904 	add.w	r9, r0, r4
 80050ca:	2200      	movs	r2, #0
 80050cc:	2300      	movs	r3, #0
 80050ce:	4630      	mov	r0, r6
 80050d0:	4639      	mov	r1, r7
 80050d2:	f7fb fd01 	bl	8000ad8 <__aeabi_dcmpeq>
 80050d6:	b108      	cbz	r0, 80050dc <__cvt+0x7c>
 80050d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80050dc:	2230      	movs	r2, #48	@ 0x30
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	454b      	cmp	r3, r9
 80050e2:	d31e      	bcc.n	8005122 <__cvt+0xc2>
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80050e8:	1b5b      	subs	r3, r3, r5
 80050ea:	4628      	mov	r0, r5
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	b004      	add	sp, #16
 80050f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050f8:	eb00 0904 	add.w	r9, r0, r4
 80050fc:	d1e5      	bne.n	80050ca <__cvt+0x6a>
 80050fe:	7803      	ldrb	r3, [r0, #0]
 8005100:	2b30      	cmp	r3, #48	@ 0x30
 8005102:	d10a      	bne.n	800511a <__cvt+0xba>
 8005104:	2200      	movs	r2, #0
 8005106:	2300      	movs	r3, #0
 8005108:	4630      	mov	r0, r6
 800510a:	4639      	mov	r1, r7
 800510c:	f7fb fce4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005110:	b918      	cbnz	r0, 800511a <__cvt+0xba>
 8005112:	f1c4 0401 	rsb	r4, r4, #1
 8005116:	f8ca 4000 	str.w	r4, [sl]
 800511a:	f8da 3000 	ldr.w	r3, [sl]
 800511e:	4499      	add	r9, r3
 8005120:	e7d3      	b.n	80050ca <__cvt+0x6a>
 8005122:	1c59      	adds	r1, r3, #1
 8005124:	9103      	str	r1, [sp, #12]
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	e7d9      	b.n	80050de <__cvt+0x7e>

0800512a <__exponent>:
 800512a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800512c:	2900      	cmp	r1, #0
 800512e:	bfba      	itte	lt
 8005130:	4249      	neglt	r1, r1
 8005132:	232d      	movlt	r3, #45	@ 0x2d
 8005134:	232b      	movge	r3, #43	@ 0x2b
 8005136:	2909      	cmp	r1, #9
 8005138:	7002      	strb	r2, [r0, #0]
 800513a:	7043      	strb	r3, [r0, #1]
 800513c:	dd29      	ble.n	8005192 <__exponent+0x68>
 800513e:	f10d 0307 	add.w	r3, sp, #7
 8005142:	461d      	mov	r5, r3
 8005144:	270a      	movs	r7, #10
 8005146:	461a      	mov	r2, r3
 8005148:	fbb1 f6f7 	udiv	r6, r1, r7
 800514c:	fb07 1416 	mls	r4, r7, r6, r1
 8005150:	3430      	adds	r4, #48	@ 0x30
 8005152:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005156:	460c      	mov	r4, r1
 8005158:	2c63      	cmp	r4, #99	@ 0x63
 800515a:	f103 33ff 	add.w	r3, r3, #4294967295
 800515e:	4631      	mov	r1, r6
 8005160:	dcf1      	bgt.n	8005146 <__exponent+0x1c>
 8005162:	3130      	adds	r1, #48	@ 0x30
 8005164:	1e94      	subs	r4, r2, #2
 8005166:	f803 1c01 	strb.w	r1, [r3, #-1]
 800516a:	1c41      	adds	r1, r0, #1
 800516c:	4623      	mov	r3, r4
 800516e:	42ab      	cmp	r3, r5
 8005170:	d30a      	bcc.n	8005188 <__exponent+0x5e>
 8005172:	f10d 0309 	add.w	r3, sp, #9
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	42ac      	cmp	r4, r5
 800517a:	bf88      	it	hi
 800517c:	2300      	movhi	r3, #0
 800517e:	3302      	adds	r3, #2
 8005180:	4403      	add	r3, r0
 8005182:	1a18      	subs	r0, r3, r0
 8005184:	b003      	add	sp, #12
 8005186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005188:	f813 6b01 	ldrb.w	r6, [r3], #1
 800518c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005190:	e7ed      	b.n	800516e <__exponent+0x44>
 8005192:	2330      	movs	r3, #48	@ 0x30
 8005194:	3130      	adds	r1, #48	@ 0x30
 8005196:	7083      	strb	r3, [r0, #2]
 8005198:	70c1      	strb	r1, [r0, #3]
 800519a:	1d03      	adds	r3, r0, #4
 800519c:	e7f1      	b.n	8005182 <__exponent+0x58>
	...

080051a0 <_printf_float>:
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	b08d      	sub	sp, #52	@ 0x34
 80051a6:	460c      	mov	r4, r1
 80051a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80051ac:	4616      	mov	r6, r2
 80051ae:	461f      	mov	r7, r3
 80051b0:	4605      	mov	r5, r0
 80051b2:	f000 fce7 	bl	8005b84 <_localeconv_r>
 80051b6:	6803      	ldr	r3, [r0, #0]
 80051b8:	9304      	str	r3, [sp, #16]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fb f860 	bl	8000280 <strlen>
 80051c0:	2300      	movs	r3, #0
 80051c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80051c4:	f8d8 3000 	ldr.w	r3, [r8]
 80051c8:	9005      	str	r0, [sp, #20]
 80051ca:	3307      	adds	r3, #7
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	f103 0208 	add.w	r2, r3, #8
 80051d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80051d8:	f8d4 b000 	ldr.w	fp, [r4]
 80051dc:	f8c8 2000 	str.w	r2, [r8]
 80051e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80051e8:	9307      	str	r3, [sp, #28]
 80051ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80051ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80051f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051f6:	4b9c      	ldr	r3, [pc, #624]	@ (8005468 <_printf_float+0x2c8>)
 80051f8:	f04f 32ff 	mov.w	r2, #4294967295
 80051fc:	f7fb fc9e 	bl	8000b3c <__aeabi_dcmpun>
 8005200:	bb70      	cbnz	r0, 8005260 <_printf_float+0xc0>
 8005202:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005206:	4b98      	ldr	r3, [pc, #608]	@ (8005468 <_printf_float+0x2c8>)
 8005208:	f04f 32ff 	mov.w	r2, #4294967295
 800520c:	f7fb fc78 	bl	8000b00 <__aeabi_dcmple>
 8005210:	bb30      	cbnz	r0, 8005260 <_printf_float+0xc0>
 8005212:	2200      	movs	r2, #0
 8005214:	2300      	movs	r3, #0
 8005216:	4640      	mov	r0, r8
 8005218:	4649      	mov	r1, r9
 800521a:	f7fb fc67 	bl	8000aec <__aeabi_dcmplt>
 800521e:	b110      	cbz	r0, 8005226 <_printf_float+0x86>
 8005220:	232d      	movs	r3, #45	@ 0x2d
 8005222:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005226:	4a91      	ldr	r2, [pc, #580]	@ (800546c <_printf_float+0x2cc>)
 8005228:	4b91      	ldr	r3, [pc, #580]	@ (8005470 <_printf_float+0x2d0>)
 800522a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800522e:	bf94      	ite	ls
 8005230:	4690      	movls	r8, r2
 8005232:	4698      	movhi	r8, r3
 8005234:	2303      	movs	r3, #3
 8005236:	6123      	str	r3, [r4, #16]
 8005238:	f02b 0304 	bic.w	r3, fp, #4
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	f04f 0900 	mov.w	r9, #0
 8005242:	9700      	str	r7, [sp, #0]
 8005244:	4633      	mov	r3, r6
 8005246:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005248:	4621      	mov	r1, r4
 800524a:	4628      	mov	r0, r5
 800524c:	f000 f9d2 	bl	80055f4 <_printf_common>
 8005250:	3001      	adds	r0, #1
 8005252:	f040 808d 	bne.w	8005370 <_printf_float+0x1d0>
 8005256:	f04f 30ff 	mov.w	r0, #4294967295
 800525a:	b00d      	add	sp, #52	@ 0x34
 800525c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005260:	4642      	mov	r2, r8
 8005262:	464b      	mov	r3, r9
 8005264:	4640      	mov	r0, r8
 8005266:	4649      	mov	r1, r9
 8005268:	f7fb fc68 	bl	8000b3c <__aeabi_dcmpun>
 800526c:	b140      	cbz	r0, 8005280 <_printf_float+0xe0>
 800526e:	464b      	mov	r3, r9
 8005270:	2b00      	cmp	r3, #0
 8005272:	bfbc      	itt	lt
 8005274:	232d      	movlt	r3, #45	@ 0x2d
 8005276:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800527a:	4a7e      	ldr	r2, [pc, #504]	@ (8005474 <_printf_float+0x2d4>)
 800527c:	4b7e      	ldr	r3, [pc, #504]	@ (8005478 <_printf_float+0x2d8>)
 800527e:	e7d4      	b.n	800522a <_printf_float+0x8a>
 8005280:	6863      	ldr	r3, [r4, #4]
 8005282:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005286:	9206      	str	r2, [sp, #24]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	d13b      	bne.n	8005304 <_printf_float+0x164>
 800528c:	2306      	movs	r3, #6
 800528e:	6063      	str	r3, [r4, #4]
 8005290:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005294:	2300      	movs	r3, #0
 8005296:	6022      	str	r2, [r4, #0]
 8005298:	9303      	str	r3, [sp, #12]
 800529a:	ab0a      	add	r3, sp, #40	@ 0x28
 800529c:	e9cd a301 	strd	sl, r3, [sp, #4]
 80052a0:	ab09      	add	r3, sp, #36	@ 0x24
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	6861      	ldr	r1, [r4, #4]
 80052a6:	ec49 8b10 	vmov	d0, r8, r9
 80052aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80052ae:	4628      	mov	r0, r5
 80052b0:	f7ff fed6 	bl	8005060 <__cvt>
 80052b4:	9b06      	ldr	r3, [sp, #24]
 80052b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80052b8:	2b47      	cmp	r3, #71	@ 0x47
 80052ba:	4680      	mov	r8, r0
 80052bc:	d129      	bne.n	8005312 <_printf_float+0x172>
 80052be:	1cc8      	adds	r0, r1, #3
 80052c0:	db02      	blt.n	80052c8 <_printf_float+0x128>
 80052c2:	6863      	ldr	r3, [r4, #4]
 80052c4:	4299      	cmp	r1, r3
 80052c6:	dd41      	ble.n	800534c <_printf_float+0x1ac>
 80052c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80052cc:	fa5f fa8a 	uxtb.w	sl, sl
 80052d0:	3901      	subs	r1, #1
 80052d2:	4652      	mov	r2, sl
 80052d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80052d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80052da:	f7ff ff26 	bl	800512a <__exponent>
 80052de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052e0:	1813      	adds	r3, r2, r0
 80052e2:	2a01      	cmp	r2, #1
 80052e4:	4681      	mov	r9, r0
 80052e6:	6123      	str	r3, [r4, #16]
 80052e8:	dc02      	bgt.n	80052f0 <_printf_float+0x150>
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	07d2      	lsls	r2, r2, #31
 80052ee:	d501      	bpl.n	80052f4 <_printf_float+0x154>
 80052f0:	3301      	adds	r3, #1
 80052f2:	6123      	str	r3, [r4, #16]
 80052f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0a2      	beq.n	8005242 <_printf_float+0xa2>
 80052fc:	232d      	movs	r3, #45	@ 0x2d
 80052fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005302:	e79e      	b.n	8005242 <_printf_float+0xa2>
 8005304:	9a06      	ldr	r2, [sp, #24]
 8005306:	2a47      	cmp	r2, #71	@ 0x47
 8005308:	d1c2      	bne.n	8005290 <_printf_float+0xf0>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1c0      	bne.n	8005290 <_printf_float+0xf0>
 800530e:	2301      	movs	r3, #1
 8005310:	e7bd      	b.n	800528e <_printf_float+0xee>
 8005312:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005316:	d9db      	bls.n	80052d0 <_printf_float+0x130>
 8005318:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800531c:	d118      	bne.n	8005350 <_printf_float+0x1b0>
 800531e:	2900      	cmp	r1, #0
 8005320:	6863      	ldr	r3, [r4, #4]
 8005322:	dd0b      	ble.n	800533c <_printf_float+0x19c>
 8005324:	6121      	str	r1, [r4, #16]
 8005326:	b913      	cbnz	r3, 800532e <_printf_float+0x18e>
 8005328:	6822      	ldr	r2, [r4, #0]
 800532a:	07d0      	lsls	r0, r2, #31
 800532c:	d502      	bpl.n	8005334 <_printf_float+0x194>
 800532e:	3301      	adds	r3, #1
 8005330:	440b      	add	r3, r1
 8005332:	6123      	str	r3, [r4, #16]
 8005334:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005336:	f04f 0900 	mov.w	r9, #0
 800533a:	e7db      	b.n	80052f4 <_printf_float+0x154>
 800533c:	b913      	cbnz	r3, 8005344 <_printf_float+0x1a4>
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	07d2      	lsls	r2, r2, #31
 8005342:	d501      	bpl.n	8005348 <_printf_float+0x1a8>
 8005344:	3302      	adds	r3, #2
 8005346:	e7f4      	b.n	8005332 <_printf_float+0x192>
 8005348:	2301      	movs	r3, #1
 800534a:	e7f2      	b.n	8005332 <_printf_float+0x192>
 800534c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005352:	4299      	cmp	r1, r3
 8005354:	db05      	blt.n	8005362 <_printf_float+0x1c2>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	6121      	str	r1, [r4, #16]
 800535a:	07d8      	lsls	r0, r3, #31
 800535c:	d5ea      	bpl.n	8005334 <_printf_float+0x194>
 800535e:	1c4b      	adds	r3, r1, #1
 8005360:	e7e7      	b.n	8005332 <_printf_float+0x192>
 8005362:	2900      	cmp	r1, #0
 8005364:	bfd4      	ite	le
 8005366:	f1c1 0202 	rsble	r2, r1, #2
 800536a:	2201      	movgt	r2, #1
 800536c:	4413      	add	r3, r2
 800536e:	e7e0      	b.n	8005332 <_printf_float+0x192>
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	055a      	lsls	r2, r3, #21
 8005374:	d407      	bmi.n	8005386 <_printf_float+0x1e6>
 8005376:	6923      	ldr	r3, [r4, #16]
 8005378:	4642      	mov	r2, r8
 800537a:	4631      	mov	r1, r6
 800537c:	4628      	mov	r0, r5
 800537e:	47b8      	blx	r7
 8005380:	3001      	adds	r0, #1
 8005382:	d12b      	bne.n	80053dc <_printf_float+0x23c>
 8005384:	e767      	b.n	8005256 <_printf_float+0xb6>
 8005386:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800538a:	f240 80dd 	bls.w	8005548 <_printf_float+0x3a8>
 800538e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005392:	2200      	movs	r2, #0
 8005394:	2300      	movs	r3, #0
 8005396:	f7fb fb9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800539a:	2800      	cmp	r0, #0
 800539c:	d033      	beq.n	8005406 <_printf_float+0x266>
 800539e:	4a37      	ldr	r2, [pc, #220]	@ (800547c <_printf_float+0x2dc>)
 80053a0:	2301      	movs	r3, #1
 80053a2:	4631      	mov	r1, r6
 80053a4:	4628      	mov	r0, r5
 80053a6:	47b8      	blx	r7
 80053a8:	3001      	adds	r0, #1
 80053aa:	f43f af54 	beq.w	8005256 <_printf_float+0xb6>
 80053ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80053b2:	4543      	cmp	r3, r8
 80053b4:	db02      	blt.n	80053bc <_printf_float+0x21c>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	07d8      	lsls	r0, r3, #31
 80053ba:	d50f      	bpl.n	80053dc <_printf_float+0x23c>
 80053bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053c0:	4631      	mov	r1, r6
 80053c2:	4628      	mov	r0, r5
 80053c4:	47b8      	blx	r7
 80053c6:	3001      	adds	r0, #1
 80053c8:	f43f af45 	beq.w	8005256 <_printf_float+0xb6>
 80053cc:	f04f 0900 	mov.w	r9, #0
 80053d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80053d4:	f104 0a1a 	add.w	sl, r4, #26
 80053d8:	45c8      	cmp	r8, r9
 80053da:	dc09      	bgt.n	80053f0 <_printf_float+0x250>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	079b      	lsls	r3, r3, #30
 80053e0:	f100 8103 	bmi.w	80055ea <_printf_float+0x44a>
 80053e4:	68e0      	ldr	r0, [r4, #12]
 80053e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053e8:	4298      	cmp	r0, r3
 80053ea:	bfb8      	it	lt
 80053ec:	4618      	movlt	r0, r3
 80053ee:	e734      	b.n	800525a <_printf_float+0xba>
 80053f0:	2301      	movs	r3, #1
 80053f2:	4652      	mov	r2, sl
 80053f4:	4631      	mov	r1, r6
 80053f6:	4628      	mov	r0, r5
 80053f8:	47b8      	blx	r7
 80053fa:	3001      	adds	r0, #1
 80053fc:	f43f af2b 	beq.w	8005256 <_printf_float+0xb6>
 8005400:	f109 0901 	add.w	r9, r9, #1
 8005404:	e7e8      	b.n	80053d8 <_printf_float+0x238>
 8005406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005408:	2b00      	cmp	r3, #0
 800540a:	dc39      	bgt.n	8005480 <_printf_float+0x2e0>
 800540c:	4a1b      	ldr	r2, [pc, #108]	@ (800547c <_printf_float+0x2dc>)
 800540e:	2301      	movs	r3, #1
 8005410:	4631      	mov	r1, r6
 8005412:	4628      	mov	r0, r5
 8005414:	47b8      	blx	r7
 8005416:	3001      	adds	r0, #1
 8005418:	f43f af1d 	beq.w	8005256 <_printf_float+0xb6>
 800541c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005420:	ea59 0303 	orrs.w	r3, r9, r3
 8005424:	d102      	bne.n	800542c <_printf_float+0x28c>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	07d9      	lsls	r1, r3, #31
 800542a:	d5d7      	bpl.n	80053dc <_printf_float+0x23c>
 800542c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005430:	4631      	mov	r1, r6
 8005432:	4628      	mov	r0, r5
 8005434:	47b8      	blx	r7
 8005436:	3001      	adds	r0, #1
 8005438:	f43f af0d 	beq.w	8005256 <_printf_float+0xb6>
 800543c:	f04f 0a00 	mov.w	sl, #0
 8005440:	f104 0b1a 	add.w	fp, r4, #26
 8005444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005446:	425b      	negs	r3, r3
 8005448:	4553      	cmp	r3, sl
 800544a:	dc01      	bgt.n	8005450 <_printf_float+0x2b0>
 800544c:	464b      	mov	r3, r9
 800544e:	e793      	b.n	8005378 <_printf_float+0x1d8>
 8005450:	2301      	movs	r3, #1
 8005452:	465a      	mov	r2, fp
 8005454:	4631      	mov	r1, r6
 8005456:	4628      	mov	r0, r5
 8005458:	47b8      	blx	r7
 800545a:	3001      	adds	r0, #1
 800545c:	f43f aefb 	beq.w	8005256 <_printf_float+0xb6>
 8005460:	f10a 0a01 	add.w	sl, sl, #1
 8005464:	e7ee      	b.n	8005444 <_printf_float+0x2a4>
 8005466:	bf00      	nop
 8005468:	7fefffff 	.word	0x7fefffff
 800546c:	08007c18 	.word	0x08007c18
 8005470:	08007c1c 	.word	0x08007c1c
 8005474:	08007c20 	.word	0x08007c20
 8005478:	08007c24 	.word	0x08007c24
 800547c:	08007c28 	.word	0x08007c28
 8005480:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005482:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005486:	4553      	cmp	r3, sl
 8005488:	bfa8      	it	ge
 800548a:	4653      	movge	r3, sl
 800548c:	2b00      	cmp	r3, #0
 800548e:	4699      	mov	r9, r3
 8005490:	dc36      	bgt.n	8005500 <_printf_float+0x360>
 8005492:	f04f 0b00 	mov.w	fp, #0
 8005496:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800549a:	f104 021a 	add.w	r2, r4, #26
 800549e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054a0:	9306      	str	r3, [sp, #24]
 80054a2:	eba3 0309 	sub.w	r3, r3, r9
 80054a6:	455b      	cmp	r3, fp
 80054a8:	dc31      	bgt.n	800550e <_printf_float+0x36e>
 80054aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054ac:	459a      	cmp	sl, r3
 80054ae:	dc3a      	bgt.n	8005526 <_printf_float+0x386>
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	07da      	lsls	r2, r3, #31
 80054b4:	d437      	bmi.n	8005526 <_printf_float+0x386>
 80054b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054b8:	ebaa 0903 	sub.w	r9, sl, r3
 80054bc:	9b06      	ldr	r3, [sp, #24]
 80054be:	ebaa 0303 	sub.w	r3, sl, r3
 80054c2:	4599      	cmp	r9, r3
 80054c4:	bfa8      	it	ge
 80054c6:	4699      	movge	r9, r3
 80054c8:	f1b9 0f00 	cmp.w	r9, #0
 80054cc:	dc33      	bgt.n	8005536 <_printf_float+0x396>
 80054ce:	f04f 0800 	mov.w	r8, #0
 80054d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054d6:	f104 0b1a 	add.w	fp, r4, #26
 80054da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054dc:	ebaa 0303 	sub.w	r3, sl, r3
 80054e0:	eba3 0309 	sub.w	r3, r3, r9
 80054e4:	4543      	cmp	r3, r8
 80054e6:	f77f af79 	ble.w	80053dc <_printf_float+0x23c>
 80054ea:	2301      	movs	r3, #1
 80054ec:	465a      	mov	r2, fp
 80054ee:	4631      	mov	r1, r6
 80054f0:	4628      	mov	r0, r5
 80054f2:	47b8      	blx	r7
 80054f4:	3001      	adds	r0, #1
 80054f6:	f43f aeae 	beq.w	8005256 <_printf_float+0xb6>
 80054fa:	f108 0801 	add.w	r8, r8, #1
 80054fe:	e7ec      	b.n	80054da <_printf_float+0x33a>
 8005500:	4642      	mov	r2, r8
 8005502:	4631      	mov	r1, r6
 8005504:	4628      	mov	r0, r5
 8005506:	47b8      	blx	r7
 8005508:	3001      	adds	r0, #1
 800550a:	d1c2      	bne.n	8005492 <_printf_float+0x2f2>
 800550c:	e6a3      	b.n	8005256 <_printf_float+0xb6>
 800550e:	2301      	movs	r3, #1
 8005510:	4631      	mov	r1, r6
 8005512:	4628      	mov	r0, r5
 8005514:	9206      	str	r2, [sp, #24]
 8005516:	47b8      	blx	r7
 8005518:	3001      	adds	r0, #1
 800551a:	f43f ae9c 	beq.w	8005256 <_printf_float+0xb6>
 800551e:	9a06      	ldr	r2, [sp, #24]
 8005520:	f10b 0b01 	add.w	fp, fp, #1
 8005524:	e7bb      	b.n	800549e <_printf_float+0x2fe>
 8005526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800552a:	4631      	mov	r1, r6
 800552c:	4628      	mov	r0, r5
 800552e:	47b8      	blx	r7
 8005530:	3001      	adds	r0, #1
 8005532:	d1c0      	bne.n	80054b6 <_printf_float+0x316>
 8005534:	e68f      	b.n	8005256 <_printf_float+0xb6>
 8005536:	9a06      	ldr	r2, [sp, #24]
 8005538:	464b      	mov	r3, r9
 800553a:	4442      	add	r2, r8
 800553c:	4631      	mov	r1, r6
 800553e:	4628      	mov	r0, r5
 8005540:	47b8      	blx	r7
 8005542:	3001      	adds	r0, #1
 8005544:	d1c3      	bne.n	80054ce <_printf_float+0x32e>
 8005546:	e686      	b.n	8005256 <_printf_float+0xb6>
 8005548:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800554c:	f1ba 0f01 	cmp.w	sl, #1
 8005550:	dc01      	bgt.n	8005556 <_printf_float+0x3b6>
 8005552:	07db      	lsls	r3, r3, #31
 8005554:	d536      	bpl.n	80055c4 <_printf_float+0x424>
 8005556:	2301      	movs	r3, #1
 8005558:	4642      	mov	r2, r8
 800555a:	4631      	mov	r1, r6
 800555c:	4628      	mov	r0, r5
 800555e:	47b8      	blx	r7
 8005560:	3001      	adds	r0, #1
 8005562:	f43f ae78 	beq.w	8005256 <_printf_float+0xb6>
 8005566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800556a:	4631      	mov	r1, r6
 800556c:	4628      	mov	r0, r5
 800556e:	47b8      	blx	r7
 8005570:	3001      	adds	r0, #1
 8005572:	f43f ae70 	beq.w	8005256 <_printf_float+0xb6>
 8005576:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800557a:	2200      	movs	r2, #0
 800557c:	2300      	movs	r3, #0
 800557e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005582:	f7fb faa9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005586:	b9c0      	cbnz	r0, 80055ba <_printf_float+0x41a>
 8005588:	4653      	mov	r3, sl
 800558a:	f108 0201 	add.w	r2, r8, #1
 800558e:	4631      	mov	r1, r6
 8005590:	4628      	mov	r0, r5
 8005592:	47b8      	blx	r7
 8005594:	3001      	adds	r0, #1
 8005596:	d10c      	bne.n	80055b2 <_printf_float+0x412>
 8005598:	e65d      	b.n	8005256 <_printf_float+0xb6>
 800559a:	2301      	movs	r3, #1
 800559c:	465a      	mov	r2, fp
 800559e:	4631      	mov	r1, r6
 80055a0:	4628      	mov	r0, r5
 80055a2:	47b8      	blx	r7
 80055a4:	3001      	adds	r0, #1
 80055a6:	f43f ae56 	beq.w	8005256 <_printf_float+0xb6>
 80055aa:	f108 0801 	add.w	r8, r8, #1
 80055ae:	45d0      	cmp	r8, sl
 80055b0:	dbf3      	blt.n	800559a <_printf_float+0x3fa>
 80055b2:	464b      	mov	r3, r9
 80055b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80055b8:	e6df      	b.n	800537a <_printf_float+0x1da>
 80055ba:	f04f 0800 	mov.w	r8, #0
 80055be:	f104 0b1a 	add.w	fp, r4, #26
 80055c2:	e7f4      	b.n	80055ae <_printf_float+0x40e>
 80055c4:	2301      	movs	r3, #1
 80055c6:	4642      	mov	r2, r8
 80055c8:	e7e1      	b.n	800558e <_printf_float+0x3ee>
 80055ca:	2301      	movs	r3, #1
 80055cc:	464a      	mov	r2, r9
 80055ce:	4631      	mov	r1, r6
 80055d0:	4628      	mov	r0, r5
 80055d2:	47b8      	blx	r7
 80055d4:	3001      	adds	r0, #1
 80055d6:	f43f ae3e 	beq.w	8005256 <_printf_float+0xb6>
 80055da:	f108 0801 	add.w	r8, r8, #1
 80055de:	68e3      	ldr	r3, [r4, #12]
 80055e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80055e2:	1a5b      	subs	r3, r3, r1
 80055e4:	4543      	cmp	r3, r8
 80055e6:	dcf0      	bgt.n	80055ca <_printf_float+0x42a>
 80055e8:	e6fc      	b.n	80053e4 <_printf_float+0x244>
 80055ea:	f04f 0800 	mov.w	r8, #0
 80055ee:	f104 0919 	add.w	r9, r4, #25
 80055f2:	e7f4      	b.n	80055de <_printf_float+0x43e>

080055f4 <_printf_common>:
 80055f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f8:	4616      	mov	r6, r2
 80055fa:	4698      	mov	r8, r3
 80055fc:	688a      	ldr	r2, [r1, #8]
 80055fe:	690b      	ldr	r3, [r1, #16]
 8005600:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005604:	4293      	cmp	r3, r2
 8005606:	bfb8      	it	lt
 8005608:	4613      	movlt	r3, r2
 800560a:	6033      	str	r3, [r6, #0]
 800560c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005610:	4607      	mov	r7, r0
 8005612:	460c      	mov	r4, r1
 8005614:	b10a      	cbz	r2, 800561a <_printf_common+0x26>
 8005616:	3301      	adds	r3, #1
 8005618:	6033      	str	r3, [r6, #0]
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	0699      	lsls	r1, r3, #26
 800561e:	bf42      	ittt	mi
 8005620:	6833      	ldrmi	r3, [r6, #0]
 8005622:	3302      	addmi	r3, #2
 8005624:	6033      	strmi	r3, [r6, #0]
 8005626:	6825      	ldr	r5, [r4, #0]
 8005628:	f015 0506 	ands.w	r5, r5, #6
 800562c:	d106      	bne.n	800563c <_printf_common+0x48>
 800562e:	f104 0a19 	add.w	sl, r4, #25
 8005632:	68e3      	ldr	r3, [r4, #12]
 8005634:	6832      	ldr	r2, [r6, #0]
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	42ab      	cmp	r3, r5
 800563a:	dc26      	bgt.n	800568a <_printf_common+0x96>
 800563c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005640:	6822      	ldr	r2, [r4, #0]
 8005642:	3b00      	subs	r3, #0
 8005644:	bf18      	it	ne
 8005646:	2301      	movne	r3, #1
 8005648:	0692      	lsls	r2, r2, #26
 800564a:	d42b      	bmi.n	80056a4 <_printf_common+0xb0>
 800564c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005650:	4641      	mov	r1, r8
 8005652:	4638      	mov	r0, r7
 8005654:	47c8      	blx	r9
 8005656:	3001      	adds	r0, #1
 8005658:	d01e      	beq.n	8005698 <_printf_common+0xa4>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	6922      	ldr	r2, [r4, #16]
 800565e:	f003 0306 	and.w	r3, r3, #6
 8005662:	2b04      	cmp	r3, #4
 8005664:	bf02      	ittt	eq
 8005666:	68e5      	ldreq	r5, [r4, #12]
 8005668:	6833      	ldreq	r3, [r6, #0]
 800566a:	1aed      	subeq	r5, r5, r3
 800566c:	68a3      	ldr	r3, [r4, #8]
 800566e:	bf0c      	ite	eq
 8005670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005674:	2500      	movne	r5, #0
 8005676:	4293      	cmp	r3, r2
 8005678:	bfc4      	itt	gt
 800567a:	1a9b      	subgt	r3, r3, r2
 800567c:	18ed      	addgt	r5, r5, r3
 800567e:	2600      	movs	r6, #0
 8005680:	341a      	adds	r4, #26
 8005682:	42b5      	cmp	r5, r6
 8005684:	d11a      	bne.n	80056bc <_printf_common+0xc8>
 8005686:	2000      	movs	r0, #0
 8005688:	e008      	b.n	800569c <_printf_common+0xa8>
 800568a:	2301      	movs	r3, #1
 800568c:	4652      	mov	r2, sl
 800568e:	4641      	mov	r1, r8
 8005690:	4638      	mov	r0, r7
 8005692:	47c8      	blx	r9
 8005694:	3001      	adds	r0, #1
 8005696:	d103      	bne.n	80056a0 <_printf_common+0xac>
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
 800569c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a0:	3501      	adds	r5, #1
 80056a2:	e7c6      	b.n	8005632 <_printf_common+0x3e>
 80056a4:	18e1      	adds	r1, r4, r3
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	2030      	movs	r0, #48	@ 0x30
 80056aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056ae:	4422      	add	r2, r4
 80056b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056b8:	3302      	adds	r3, #2
 80056ba:	e7c7      	b.n	800564c <_printf_common+0x58>
 80056bc:	2301      	movs	r3, #1
 80056be:	4622      	mov	r2, r4
 80056c0:	4641      	mov	r1, r8
 80056c2:	4638      	mov	r0, r7
 80056c4:	47c8      	blx	r9
 80056c6:	3001      	adds	r0, #1
 80056c8:	d0e6      	beq.n	8005698 <_printf_common+0xa4>
 80056ca:	3601      	adds	r6, #1
 80056cc:	e7d9      	b.n	8005682 <_printf_common+0x8e>
	...

080056d0 <_printf_i>:
 80056d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056d4:	7e0f      	ldrb	r7, [r1, #24]
 80056d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056d8:	2f78      	cmp	r7, #120	@ 0x78
 80056da:	4691      	mov	r9, r2
 80056dc:	4680      	mov	r8, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	469a      	mov	sl, r3
 80056e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056e6:	d807      	bhi.n	80056f8 <_printf_i+0x28>
 80056e8:	2f62      	cmp	r7, #98	@ 0x62
 80056ea:	d80a      	bhi.n	8005702 <_printf_i+0x32>
 80056ec:	2f00      	cmp	r7, #0
 80056ee:	f000 80d2 	beq.w	8005896 <_printf_i+0x1c6>
 80056f2:	2f58      	cmp	r7, #88	@ 0x58
 80056f4:	f000 80b9 	beq.w	800586a <_printf_i+0x19a>
 80056f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005700:	e03a      	b.n	8005778 <_printf_i+0xa8>
 8005702:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005706:	2b15      	cmp	r3, #21
 8005708:	d8f6      	bhi.n	80056f8 <_printf_i+0x28>
 800570a:	a101      	add	r1, pc, #4	@ (adr r1, 8005710 <_printf_i+0x40>)
 800570c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005710:	08005769 	.word	0x08005769
 8005714:	0800577d 	.word	0x0800577d
 8005718:	080056f9 	.word	0x080056f9
 800571c:	080056f9 	.word	0x080056f9
 8005720:	080056f9 	.word	0x080056f9
 8005724:	080056f9 	.word	0x080056f9
 8005728:	0800577d 	.word	0x0800577d
 800572c:	080056f9 	.word	0x080056f9
 8005730:	080056f9 	.word	0x080056f9
 8005734:	080056f9 	.word	0x080056f9
 8005738:	080056f9 	.word	0x080056f9
 800573c:	0800587d 	.word	0x0800587d
 8005740:	080057a7 	.word	0x080057a7
 8005744:	08005837 	.word	0x08005837
 8005748:	080056f9 	.word	0x080056f9
 800574c:	080056f9 	.word	0x080056f9
 8005750:	0800589f 	.word	0x0800589f
 8005754:	080056f9 	.word	0x080056f9
 8005758:	080057a7 	.word	0x080057a7
 800575c:	080056f9 	.word	0x080056f9
 8005760:	080056f9 	.word	0x080056f9
 8005764:	0800583f 	.word	0x0800583f
 8005768:	6833      	ldr	r3, [r6, #0]
 800576a:	1d1a      	adds	r2, r3, #4
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6032      	str	r2, [r6, #0]
 8005770:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005774:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005778:	2301      	movs	r3, #1
 800577a:	e09d      	b.n	80058b8 <_printf_i+0x1e8>
 800577c:	6833      	ldr	r3, [r6, #0]
 800577e:	6820      	ldr	r0, [r4, #0]
 8005780:	1d19      	adds	r1, r3, #4
 8005782:	6031      	str	r1, [r6, #0]
 8005784:	0606      	lsls	r6, r0, #24
 8005786:	d501      	bpl.n	800578c <_printf_i+0xbc>
 8005788:	681d      	ldr	r5, [r3, #0]
 800578a:	e003      	b.n	8005794 <_printf_i+0xc4>
 800578c:	0645      	lsls	r5, r0, #25
 800578e:	d5fb      	bpl.n	8005788 <_printf_i+0xb8>
 8005790:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005794:	2d00      	cmp	r5, #0
 8005796:	da03      	bge.n	80057a0 <_printf_i+0xd0>
 8005798:	232d      	movs	r3, #45	@ 0x2d
 800579a:	426d      	negs	r5, r5
 800579c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057a0:	4859      	ldr	r0, [pc, #356]	@ (8005908 <_printf_i+0x238>)
 80057a2:	230a      	movs	r3, #10
 80057a4:	e011      	b.n	80057ca <_printf_i+0xfa>
 80057a6:	6821      	ldr	r1, [r4, #0]
 80057a8:	6833      	ldr	r3, [r6, #0]
 80057aa:	0608      	lsls	r0, r1, #24
 80057ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80057b0:	d402      	bmi.n	80057b8 <_printf_i+0xe8>
 80057b2:	0649      	lsls	r1, r1, #25
 80057b4:	bf48      	it	mi
 80057b6:	b2ad      	uxthmi	r5, r5
 80057b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80057ba:	4853      	ldr	r0, [pc, #332]	@ (8005908 <_printf_i+0x238>)
 80057bc:	6033      	str	r3, [r6, #0]
 80057be:	bf14      	ite	ne
 80057c0:	230a      	movne	r3, #10
 80057c2:	2308      	moveq	r3, #8
 80057c4:	2100      	movs	r1, #0
 80057c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057ca:	6866      	ldr	r6, [r4, #4]
 80057cc:	60a6      	str	r6, [r4, #8]
 80057ce:	2e00      	cmp	r6, #0
 80057d0:	bfa2      	ittt	ge
 80057d2:	6821      	ldrge	r1, [r4, #0]
 80057d4:	f021 0104 	bicge.w	r1, r1, #4
 80057d8:	6021      	strge	r1, [r4, #0]
 80057da:	b90d      	cbnz	r5, 80057e0 <_printf_i+0x110>
 80057dc:	2e00      	cmp	r6, #0
 80057de:	d04b      	beq.n	8005878 <_printf_i+0x1a8>
 80057e0:	4616      	mov	r6, r2
 80057e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80057e6:	fb03 5711 	mls	r7, r3, r1, r5
 80057ea:	5dc7      	ldrb	r7, [r0, r7]
 80057ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057f0:	462f      	mov	r7, r5
 80057f2:	42bb      	cmp	r3, r7
 80057f4:	460d      	mov	r5, r1
 80057f6:	d9f4      	bls.n	80057e2 <_printf_i+0x112>
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d10b      	bne.n	8005814 <_printf_i+0x144>
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	07df      	lsls	r7, r3, #31
 8005800:	d508      	bpl.n	8005814 <_printf_i+0x144>
 8005802:	6923      	ldr	r3, [r4, #16]
 8005804:	6861      	ldr	r1, [r4, #4]
 8005806:	4299      	cmp	r1, r3
 8005808:	bfde      	ittt	le
 800580a:	2330      	movle	r3, #48	@ 0x30
 800580c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005810:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005814:	1b92      	subs	r2, r2, r6
 8005816:	6122      	str	r2, [r4, #16]
 8005818:	f8cd a000 	str.w	sl, [sp]
 800581c:	464b      	mov	r3, r9
 800581e:	aa03      	add	r2, sp, #12
 8005820:	4621      	mov	r1, r4
 8005822:	4640      	mov	r0, r8
 8005824:	f7ff fee6 	bl	80055f4 <_printf_common>
 8005828:	3001      	adds	r0, #1
 800582a:	d14a      	bne.n	80058c2 <_printf_i+0x1f2>
 800582c:	f04f 30ff 	mov.w	r0, #4294967295
 8005830:	b004      	add	sp, #16
 8005832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	f043 0320 	orr.w	r3, r3, #32
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	4833      	ldr	r0, [pc, #204]	@ (800590c <_printf_i+0x23c>)
 8005840:	2778      	movs	r7, #120	@ 0x78
 8005842:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	6831      	ldr	r1, [r6, #0]
 800584a:	061f      	lsls	r7, r3, #24
 800584c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005850:	d402      	bmi.n	8005858 <_printf_i+0x188>
 8005852:	065f      	lsls	r7, r3, #25
 8005854:	bf48      	it	mi
 8005856:	b2ad      	uxthmi	r5, r5
 8005858:	6031      	str	r1, [r6, #0]
 800585a:	07d9      	lsls	r1, r3, #31
 800585c:	bf44      	itt	mi
 800585e:	f043 0320 	orrmi.w	r3, r3, #32
 8005862:	6023      	strmi	r3, [r4, #0]
 8005864:	b11d      	cbz	r5, 800586e <_printf_i+0x19e>
 8005866:	2310      	movs	r3, #16
 8005868:	e7ac      	b.n	80057c4 <_printf_i+0xf4>
 800586a:	4827      	ldr	r0, [pc, #156]	@ (8005908 <_printf_i+0x238>)
 800586c:	e7e9      	b.n	8005842 <_printf_i+0x172>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	f023 0320 	bic.w	r3, r3, #32
 8005874:	6023      	str	r3, [r4, #0]
 8005876:	e7f6      	b.n	8005866 <_printf_i+0x196>
 8005878:	4616      	mov	r6, r2
 800587a:	e7bd      	b.n	80057f8 <_printf_i+0x128>
 800587c:	6833      	ldr	r3, [r6, #0]
 800587e:	6825      	ldr	r5, [r4, #0]
 8005880:	6961      	ldr	r1, [r4, #20]
 8005882:	1d18      	adds	r0, r3, #4
 8005884:	6030      	str	r0, [r6, #0]
 8005886:	062e      	lsls	r6, r5, #24
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	d501      	bpl.n	8005890 <_printf_i+0x1c0>
 800588c:	6019      	str	r1, [r3, #0]
 800588e:	e002      	b.n	8005896 <_printf_i+0x1c6>
 8005890:	0668      	lsls	r0, r5, #25
 8005892:	d5fb      	bpl.n	800588c <_printf_i+0x1bc>
 8005894:	8019      	strh	r1, [r3, #0]
 8005896:	2300      	movs	r3, #0
 8005898:	6123      	str	r3, [r4, #16]
 800589a:	4616      	mov	r6, r2
 800589c:	e7bc      	b.n	8005818 <_printf_i+0x148>
 800589e:	6833      	ldr	r3, [r6, #0]
 80058a0:	1d1a      	adds	r2, r3, #4
 80058a2:	6032      	str	r2, [r6, #0]
 80058a4:	681e      	ldr	r6, [r3, #0]
 80058a6:	6862      	ldr	r2, [r4, #4]
 80058a8:	2100      	movs	r1, #0
 80058aa:	4630      	mov	r0, r6
 80058ac:	f7fa fc98 	bl	80001e0 <memchr>
 80058b0:	b108      	cbz	r0, 80058b6 <_printf_i+0x1e6>
 80058b2:	1b80      	subs	r0, r0, r6
 80058b4:	6060      	str	r0, [r4, #4]
 80058b6:	6863      	ldr	r3, [r4, #4]
 80058b8:	6123      	str	r3, [r4, #16]
 80058ba:	2300      	movs	r3, #0
 80058bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058c0:	e7aa      	b.n	8005818 <_printf_i+0x148>
 80058c2:	6923      	ldr	r3, [r4, #16]
 80058c4:	4632      	mov	r2, r6
 80058c6:	4649      	mov	r1, r9
 80058c8:	4640      	mov	r0, r8
 80058ca:	47d0      	blx	sl
 80058cc:	3001      	adds	r0, #1
 80058ce:	d0ad      	beq.n	800582c <_printf_i+0x15c>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	079b      	lsls	r3, r3, #30
 80058d4:	d413      	bmi.n	80058fe <_printf_i+0x22e>
 80058d6:	68e0      	ldr	r0, [r4, #12]
 80058d8:	9b03      	ldr	r3, [sp, #12]
 80058da:	4298      	cmp	r0, r3
 80058dc:	bfb8      	it	lt
 80058de:	4618      	movlt	r0, r3
 80058e0:	e7a6      	b.n	8005830 <_printf_i+0x160>
 80058e2:	2301      	movs	r3, #1
 80058e4:	4632      	mov	r2, r6
 80058e6:	4649      	mov	r1, r9
 80058e8:	4640      	mov	r0, r8
 80058ea:	47d0      	blx	sl
 80058ec:	3001      	adds	r0, #1
 80058ee:	d09d      	beq.n	800582c <_printf_i+0x15c>
 80058f0:	3501      	adds	r5, #1
 80058f2:	68e3      	ldr	r3, [r4, #12]
 80058f4:	9903      	ldr	r1, [sp, #12]
 80058f6:	1a5b      	subs	r3, r3, r1
 80058f8:	42ab      	cmp	r3, r5
 80058fa:	dcf2      	bgt.n	80058e2 <_printf_i+0x212>
 80058fc:	e7eb      	b.n	80058d6 <_printf_i+0x206>
 80058fe:	2500      	movs	r5, #0
 8005900:	f104 0619 	add.w	r6, r4, #25
 8005904:	e7f5      	b.n	80058f2 <_printf_i+0x222>
 8005906:	bf00      	nop
 8005908:	08007c2a 	.word	0x08007c2a
 800590c:	08007c3b 	.word	0x08007c3b

08005910 <std>:
 8005910:	2300      	movs	r3, #0
 8005912:	b510      	push	{r4, lr}
 8005914:	4604      	mov	r4, r0
 8005916:	e9c0 3300 	strd	r3, r3, [r0]
 800591a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800591e:	6083      	str	r3, [r0, #8]
 8005920:	8181      	strh	r1, [r0, #12]
 8005922:	6643      	str	r3, [r0, #100]	@ 0x64
 8005924:	81c2      	strh	r2, [r0, #14]
 8005926:	6183      	str	r3, [r0, #24]
 8005928:	4619      	mov	r1, r3
 800592a:	2208      	movs	r2, #8
 800592c:	305c      	adds	r0, #92	@ 0x5c
 800592e:	f000 f920 	bl	8005b72 <memset>
 8005932:	4b0d      	ldr	r3, [pc, #52]	@ (8005968 <std+0x58>)
 8005934:	6263      	str	r3, [r4, #36]	@ 0x24
 8005936:	4b0d      	ldr	r3, [pc, #52]	@ (800596c <std+0x5c>)
 8005938:	62a3      	str	r3, [r4, #40]	@ 0x28
 800593a:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <std+0x60>)
 800593c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800593e:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <std+0x64>)
 8005940:	6323      	str	r3, [r4, #48]	@ 0x30
 8005942:	4b0d      	ldr	r3, [pc, #52]	@ (8005978 <std+0x68>)
 8005944:	6224      	str	r4, [r4, #32]
 8005946:	429c      	cmp	r4, r3
 8005948:	d006      	beq.n	8005958 <std+0x48>
 800594a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800594e:	4294      	cmp	r4, r2
 8005950:	d002      	beq.n	8005958 <std+0x48>
 8005952:	33d0      	adds	r3, #208	@ 0xd0
 8005954:	429c      	cmp	r4, r3
 8005956:	d105      	bne.n	8005964 <std+0x54>
 8005958:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800595c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005960:	f000 b994 	b.w	8005c8c <__retarget_lock_init_recursive>
 8005964:	bd10      	pop	{r4, pc}
 8005966:	bf00      	nop
 8005968:	08005ab9 	.word	0x08005ab9
 800596c:	08005adb 	.word	0x08005adb
 8005970:	08005b13 	.word	0x08005b13
 8005974:	08005b37 	.word	0x08005b37
 8005978:	20000510 	.word	0x20000510

0800597c <stdio_exit_handler>:
 800597c:	4a02      	ldr	r2, [pc, #8]	@ (8005988 <stdio_exit_handler+0xc>)
 800597e:	4903      	ldr	r1, [pc, #12]	@ (800598c <stdio_exit_handler+0x10>)
 8005980:	4803      	ldr	r0, [pc, #12]	@ (8005990 <stdio_exit_handler+0x14>)
 8005982:	f000 b869 	b.w	8005a58 <_fwalk_sglue>
 8005986:	bf00      	nop
 8005988:	20000174 	.word	0x20000174
 800598c:	08007455 	.word	0x08007455
 8005990:	20000184 	.word	0x20000184

08005994 <cleanup_stdio>:
 8005994:	6841      	ldr	r1, [r0, #4]
 8005996:	4b0c      	ldr	r3, [pc, #48]	@ (80059c8 <cleanup_stdio+0x34>)
 8005998:	4299      	cmp	r1, r3
 800599a:	b510      	push	{r4, lr}
 800599c:	4604      	mov	r4, r0
 800599e:	d001      	beq.n	80059a4 <cleanup_stdio+0x10>
 80059a0:	f001 fd58 	bl	8007454 <_fflush_r>
 80059a4:	68a1      	ldr	r1, [r4, #8]
 80059a6:	4b09      	ldr	r3, [pc, #36]	@ (80059cc <cleanup_stdio+0x38>)
 80059a8:	4299      	cmp	r1, r3
 80059aa:	d002      	beq.n	80059b2 <cleanup_stdio+0x1e>
 80059ac:	4620      	mov	r0, r4
 80059ae:	f001 fd51 	bl	8007454 <_fflush_r>
 80059b2:	68e1      	ldr	r1, [r4, #12]
 80059b4:	4b06      	ldr	r3, [pc, #24]	@ (80059d0 <cleanup_stdio+0x3c>)
 80059b6:	4299      	cmp	r1, r3
 80059b8:	d004      	beq.n	80059c4 <cleanup_stdio+0x30>
 80059ba:	4620      	mov	r0, r4
 80059bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c0:	f001 bd48 	b.w	8007454 <_fflush_r>
 80059c4:	bd10      	pop	{r4, pc}
 80059c6:	bf00      	nop
 80059c8:	20000510 	.word	0x20000510
 80059cc:	20000578 	.word	0x20000578
 80059d0:	200005e0 	.word	0x200005e0

080059d4 <global_stdio_init.part.0>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <global_stdio_init.part.0+0x30>)
 80059d8:	4c0b      	ldr	r4, [pc, #44]	@ (8005a08 <global_stdio_init.part.0+0x34>)
 80059da:	4a0c      	ldr	r2, [pc, #48]	@ (8005a0c <global_stdio_init.part.0+0x38>)
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	4620      	mov	r0, r4
 80059e0:	2200      	movs	r2, #0
 80059e2:	2104      	movs	r1, #4
 80059e4:	f7ff ff94 	bl	8005910 <std>
 80059e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059ec:	2201      	movs	r2, #1
 80059ee:	2109      	movs	r1, #9
 80059f0:	f7ff ff8e 	bl	8005910 <std>
 80059f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059f8:	2202      	movs	r2, #2
 80059fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059fe:	2112      	movs	r1, #18
 8005a00:	f7ff bf86 	b.w	8005910 <std>
 8005a04:	20000648 	.word	0x20000648
 8005a08:	20000510 	.word	0x20000510
 8005a0c:	0800597d 	.word	0x0800597d

08005a10 <__sfp_lock_acquire>:
 8005a10:	4801      	ldr	r0, [pc, #4]	@ (8005a18 <__sfp_lock_acquire+0x8>)
 8005a12:	f000 b93c 	b.w	8005c8e <__retarget_lock_acquire_recursive>
 8005a16:	bf00      	nop
 8005a18:	20000651 	.word	0x20000651

08005a1c <__sfp_lock_release>:
 8005a1c:	4801      	ldr	r0, [pc, #4]	@ (8005a24 <__sfp_lock_release+0x8>)
 8005a1e:	f000 b937 	b.w	8005c90 <__retarget_lock_release_recursive>
 8005a22:	bf00      	nop
 8005a24:	20000651 	.word	0x20000651

08005a28 <__sinit>:
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	f7ff fff0 	bl	8005a10 <__sfp_lock_acquire>
 8005a30:	6a23      	ldr	r3, [r4, #32]
 8005a32:	b11b      	cbz	r3, 8005a3c <__sinit+0x14>
 8005a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a38:	f7ff bff0 	b.w	8005a1c <__sfp_lock_release>
 8005a3c:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <__sinit+0x28>)
 8005a3e:	6223      	str	r3, [r4, #32]
 8005a40:	4b04      	ldr	r3, [pc, #16]	@ (8005a54 <__sinit+0x2c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1f5      	bne.n	8005a34 <__sinit+0xc>
 8005a48:	f7ff ffc4 	bl	80059d4 <global_stdio_init.part.0>
 8005a4c:	e7f2      	b.n	8005a34 <__sinit+0xc>
 8005a4e:	bf00      	nop
 8005a50:	08005995 	.word	0x08005995
 8005a54:	20000648 	.word	0x20000648

08005a58 <_fwalk_sglue>:
 8005a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	4688      	mov	r8, r1
 8005a60:	4614      	mov	r4, r2
 8005a62:	2600      	movs	r6, #0
 8005a64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a68:	f1b9 0901 	subs.w	r9, r9, #1
 8005a6c:	d505      	bpl.n	8005a7a <_fwalk_sglue+0x22>
 8005a6e:	6824      	ldr	r4, [r4, #0]
 8005a70:	2c00      	cmp	r4, #0
 8005a72:	d1f7      	bne.n	8005a64 <_fwalk_sglue+0xc>
 8005a74:	4630      	mov	r0, r6
 8005a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d907      	bls.n	8005a90 <_fwalk_sglue+0x38>
 8005a80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a84:	3301      	adds	r3, #1
 8005a86:	d003      	beq.n	8005a90 <_fwalk_sglue+0x38>
 8005a88:	4629      	mov	r1, r5
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	47c0      	blx	r8
 8005a8e:	4306      	orrs	r6, r0
 8005a90:	3568      	adds	r5, #104	@ 0x68
 8005a92:	e7e9      	b.n	8005a68 <_fwalk_sglue+0x10>

08005a94 <iprintf>:
 8005a94:	b40f      	push	{r0, r1, r2, r3}
 8005a96:	b507      	push	{r0, r1, r2, lr}
 8005a98:	4906      	ldr	r1, [pc, #24]	@ (8005ab4 <iprintf+0x20>)
 8005a9a:	ab04      	add	r3, sp, #16
 8005a9c:	6808      	ldr	r0, [r1, #0]
 8005a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aa2:	6881      	ldr	r1, [r0, #8]
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	f001 fb39 	bl	800711c <_vfiprintf_r>
 8005aaa:	b003      	add	sp, #12
 8005aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ab0:	b004      	add	sp, #16
 8005ab2:	4770      	bx	lr
 8005ab4:	20000180 	.word	0x20000180

08005ab8 <__sread>:
 8005ab8:	b510      	push	{r4, lr}
 8005aba:	460c      	mov	r4, r1
 8005abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac0:	f000 f886 	bl	8005bd0 <_read_r>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	bfab      	itete	ge
 8005ac8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005aca:	89a3      	ldrhlt	r3, [r4, #12]
 8005acc:	181b      	addge	r3, r3, r0
 8005ace:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ad2:	bfac      	ite	ge
 8005ad4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ad6:	81a3      	strhlt	r3, [r4, #12]
 8005ad8:	bd10      	pop	{r4, pc}

08005ada <__swrite>:
 8005ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ade:	461f      	mov	r7, r3
 8005ae0:	898b      	ldrh	r3, [r1, #12]
 8005ae2:	05db      	lsls	r3, r3, #23
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	4616      	mov	r6, r2
 8005aea:	d505      	bpl.n	8005af8 <__swrite+0x1e>
 8005aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af0:	2302      	movs	r3, #2
 8005af2:	2200      	movs	r2, #0
 8005af4:	f000 f85a 	bl	8005bac <_lseek_r>
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005afe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b02:	81a3      	strh	r3, [r4, #12]
 8005b04:	4632      	mov	r2, r6
 8005b06:	463b      	mov	r3, r7
 8005b08:	4628      	mov	r0, r5
 8005b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0e:	f000 b881 	b.w	8005c14 <_write_r>

08005b12 <__sseek>:
 8005b12:	b510      	push	{r4, lr}
 8005b14:	460c      	mov	r4, r1
 8005b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b1a:	f000 f847 	bl	8005bac <_lseek_r>
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	bf15      	itete	ne
 8005b24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b2e:	81a3      	strheq	r3, [r4, #12]
 8005b30:	bf18      	it	ne
 8005b32:	81a3      	strhne	r3, [r4, #12]
 8005b34:	bd10      	pop	{r4, pc}

08005b36 <__sclose>:
 8005b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3a:	f000 b827 	b.w	8005b8c <_close_r>

08005b3e <memmove>:
 8005b3e:	4288      	cmp	r0, r1
 8005b40:	b510      	push	{r4, lr}
 8005b42:	eb01 0402 	add.w	r4, r1, r2
 8005b46:	d902      	bls.n	8005b4e <memmove+0x10>
 8005b48:	4284      	cmp	r4, r0
 8005b4a:	4623      	mov	r3, r4
 8005b4c:	d807      	bhi.n	8005b5e <memmove+0x20>
 8005b4e:	1e43      	subs	r3, r0, #1
 8005b50:	42a1      	cmp	r1, r4
 8005b52:	d008      	beq.n	8005b66 <memmove+0x28>
 8005b54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b5c:	e7f8      	b.n	8005b50 <memmove+0x12>
 8005b5e:	4402      	add	r2, r0
 8005b60:	4601      	mov	r1, r0
 8005b62:	428a      	cmp	r2, r1
 8005b64:	d100      	bne.n	8005b68 <memmove+0x2a>
 8005b66:	bd10      	pop	{r4, pc}
 8005b68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b6c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b70:	e7f7      	b.n	8005b62 <memmove+0x24>

08005b72 <memset>:
 8005b72:	4402      	add	r2, r0
 8005b74:	4603      	mov	r3, r0
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d100      	bne.n	8005b7c <memset+0xa>
 8005b7a:	4770      	bx	lr
 8005b7c:	f803 1b01 	strb.w	r1, [r3], #1
 8005b80:	e7f9      	b.n	8005b76 <memset+0x4>
	...

08005b84 <_localeconv_r>:
 8005b84:	4800      	ldr	r0, [pc, #0]	@ (8005b88 <_localeconv_r+0x4>)
 8005b86:	4770      	bx	lr
 8005b88:	200002c0 	.word	0x200002c0

08005b8c <_close_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4d06      	ldr	r5, [pc, #24]	@ (8005ba8 <_close_r+0x1c>)
 8005b90:	2300      	movs	r3, #0
 8005b92:	4604      	mov	r4, r0
 8005b94:	4608      	mov	r0, r1
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	f7fc fcc6 	bl	8002528 <_close>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_close_r+0x1a>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_close_r+0x1a>
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	2000064c 	.word	0x2000064c

08005bac <_lseek_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	4d07      	ldr	r5, [pc, #28]	@ (8005bcc <_lseek_r+0x20>)
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	4608      	mov	r0, r1
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	602a      	str	r2, [r5, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f7fc fcdb 	bl	8002576 <_lseek>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d102      	bne.n	8005bca <_lseek_r+0x1e>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	b103      	cbz	r3, 8005bca <_lseek_r+0x1e>
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	bd38      	pop	{r3, r4, r5, pc}
 8005bcc:	2000064c 	.word	0x2000064c

08005bd0 <_read_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	4d07      	ldr	r5, [pc, #28]	@ (8005bf0 <_read_r+0x20>)
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	4608      	mov	r0, r1
 8005bd8:	4611      	mov	r1, r2
 8005bda:	2200      	movs	r2, #0
 8005bdc:	602a      	str	r2, [r5, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f7fc fc85 	bl	80024ee <_read>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d102      	bne.n	8005bee <_read_r+0x1e>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	b103      	cbz	r3, 8005bee <_read_r+0x1e>
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	2000064c 	.word	0x2000064c

08005bf4 <_sbrk_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4d06      	ldr	r5, [pc, #24]	@ (8005c10 <_sbrk_r+0x1c>)
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	4608      	mov	r0, r1
 8005bfe:	602b      	str	r3, [r5, #0]
 8005c00:	f7fc fcc6 	bl	8002590 <_sbrk>
 8005c04:	1c43      	adds	r3, r0, #1
 8005c06:	d102      	bne.n	8005c0e <_sbrk_r+0x1a>
 8005c08:	682b      	ldr	r3, [r5, #0]
 8005c0a:	b103      	cbz	r3, 8005c0e <_sbrk_r+0x1a>
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	bd38      	pop	{r3, r4, r5, pc}
 8005c10:	2000064c 	.word	0x2000064c

08005c14 <_write_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4d07      	ldr	r5, [pc, #28]	@ (8005c34 <_write_r+0x20>)
 8005c18:	4604      	mov	r4, r0
 8005c1a:	4608      	mov	r0, r1
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	2200      	movs	r2, #0
 8005c20:	602a      	str	r2, [r5, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	f7fb fa06 	bl	8001034 <_write>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	d102      	bne.n	8005c32 <_write_r+0x1e>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	b103      	cbz	r3, 8005c32 <_write_r+0x1e>
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	2000064c 	.word	0x2000064c

08005c38 <__errno>:
 8005c38:	4b01      	ldr	r3, [pc, #4]	@ (8005c40 <__errno+0x8>)
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	20000180 	.word	0x20000180

08005c44 <__libc_init_array>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	4d0d      	ldr	r5, [pc, #52]	@ (8005c7c <__libc_init_array+0x38>)
 8005c48:	4c0d      	ldr	r4, [pc, #52]	@ (8005c80 <__libc_init_array+0x3c>)
 8005c4a:	1b64      	subs	r4, r4, r5
 8005c4c:	10a4      	asrs	r4, r4, #2
 8005c4e:	2600      	movs	r6, #0
 8005c50:	42a6      	cmp	r6, r4
 8005c52:	d109      	bne.n	8005c68 <__libc_init_array+0x24>
 8005c54:	4d0b      	ldr	r5, [pc, #44]	@ (8005c84 <__libc_init_array+0x40>)
 8005c56:	4c0c      	ldr	r4, [pc, #48]	@ (8005c88 <__libc_init_array+0x44>)
 8005c58:	f001 ff9c 	bl	8007b94 <_init>
 8005c5c:	1b64      	subs	r4, r4, r5
 8005c5e:	10a4      	asrs	r4, r4, #2
 8005c60:	2600      	movs	r6, #0
 8005c62:	42a6      	cmp	r6, r4
 8005c64:	d105      	bne.n	8005c72 <__libc_init_array+0x2e>
 8005c66:	bd70      	pop	{r4, r5, r6, pc}
 8005c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6c:	4798      	blx	r3
 8005c6e:	3601      	adds	r6, #1
 8005c70:	e7ee      	b.n	8005c50 <__libc_init_array+0xc>
 8005c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c76:	4798      	blx	r3
 8005c78:	3601      	adds	r6, #1
 8005c7a:	e7f2      	b.n	8005c62 <__libc_init_array+0x1e>
 8005c7c:	08007fa0 	.word	0x08007fa0
 8005c80:	08007fa0 	.word	0x08007fa0
 8005c84:	08007fa0 	.word	0x08007fa0
 8005c88:	08007fa4 	.word	0x08007fa4

08005c8c <__retarget_lock_init_recursive>:
 8005c8c:	4770      	bx	lr

08005c8e <__retarget_lock_acquire_recursive>:
 8005c8e:	4770      	bx	lr

08005c90 <__retarget_lock_release_recursive>:
 8005c90:	4770      	bx	lr

08005c92 <quorem>:
 8005c92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c96:	6903      	ldr	r3, [r0, #16]
 8005c98:	690c      	ldr	r4, [r1, #16]
 8005c9a:	42a3      	cmp	r3, r4
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	db7e      	blt.n	8005d9e <quorem+0x10c>
 8005ca0:	3c01      	subs	r4, #1
 8005ca2:	f101 0814 	add.w	r8, r1, #20
 8005ca6:	00a3      	lsls	r3, r4, #2
 8005ca8:	f100 0514 	add.w	r5, r0, #20
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cc8:	d32e      	bcc.n	8005d28 <quorem+0x96>
 8005cca:	f04f 0a00 	mov.w	sl, #0
 8005cce:	46c4      	mov	ip, r8
 8005cd0:	46ae      	mov	lr, r5
 8005cd2:	46d3      	mov	fp, sl
 8005cd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005cd8:	b298      	uxth	r0, r3
 8005cda:	fb06 a000 	mla	r0, r6, r0, sl
 8005cde:	0c02      	lsrs	r2, r0, #16
 8005ce0:	0c1b      	lsrs	r3, r3, #16
 8005ce2:	fb06 2303 	mla	r3, r6, r3, r2
 8005ce6:	f8de 2000 	ldr.w	r2, [lr]
 8005cea:	b280      	uxth	r0, r0
 8005cec:	b292      	uxth	r2, r2
 8005cee:	1a12      	subs	r2, r2, r0
 8005cf0:	445a      	add	r2, fp
 8005cf2:	f8de 0000 	ldr.w	r0, [lr]
 8005cf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d00:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d04:	b292      	uxth	r2, r2
 8005d06:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d0a:	45e1      	cmp	r9, ip
 8005d0c:	f84e 2b04 	str.w	r2, [lr], #4
 8005d10:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d14:	d2de      	bcs.n	8005cd4 <quorem+0x42>
 8005d16:	9b00      	ldr	r3, [sp, #0]
 8005d18:	58eb      	ldr	r3, [r5, r3]
 8005d1a:	b92b      	cbnz	r3, 8005d28 <quorem+0x96>
 8005d1c:	9b01      	ldr	r3, [sp, #4]
 8005d1e:	3b04      	subs	r3, #4
 8005d20:	429d      	cmp	r5, r3
 8005d22:	461a      	mov	r2, r3
 8005d24:	d32f      	bcc.n	8005d86 <quorem+0xf4>
 8005d26:	613c      	str	r4, [r7, #16]
 8005d28:	4638      	mov	r0, r7
 8005d2a:	f001 f8c5 	bl	8006eb8 <__mcmp>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	db25      	blt.n	8005d7e <quorem+0xec>
 8005d32:	4629      	mov	r1, r5
 8005d34:	2000      	movs	r0, #0
 8005d36:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d3a:	f8d1 c000 	ldr.w	ip, [r1]
 8005d3e:	fa1f fe82 	uxth.w	lr, r2
 8005d42:	fa1f f38c 	uxth.w	r3, ip
 8005d46:	eba3 030e 	sub.w	r3, r3, lr
 8005d4a:	4403      	add	r3, r0
 8005d4c:	0c12      	lsrs	r2, r2, #16
 8005d4e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d52:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d5c:	45c1      	cmp	r9, r8
 8005d5e:	f841 3b04 	str.w	r3, [r1], #4
 8005d62:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d66:	d2e6      	bcs.n	8005d36 <quorem+0xa4>
 8005d68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d70:	b922      	cbnz	r2, 8005d7c <quorem+0xea>
 8005d72:	3b04      	subs	r3, #4
 8005d74:	429d      	cmp	r5, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	d30b      	bcc.n	8005d92 <quorem+0x100>
 8005d7a:	613c      	str	r4, [r7, #16]
 8005d7c:	3601      	adds	r6, #1
 8005d7e:	4630      	mov	r0, r6
 8005d80:	b003      	add	sp, #12
 8005d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	3b04      	subs	r3, #4
 8005d8a:	2a00      	cmp	r2, #0
 8005d8c:	d1cb      	bne.n	8005d26 <quorem+0x94>
 8005d8e:	3c01      	subs	r4, #1
 8005d90:	e7c6      	b.n	8005d20 <quorem+0x8e>
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	3b04      	subs	r3, #4
 8005d96:	2a00      	cmp	r2, #0
 8005d98:	d1ef      	bne.n	8005d7a <quorem+0xe8>
 8005d9a:	3c01      	subs	r4, #1
 8005d9c:	e7ea      	b.n	8005d74 <quorem+0xe2>
 8005d9e:	2000      	movs	r0, #0
 8005da0:	e7ee      	b.n	8005d80 <quorem+0xee>
 8005da2:	0000      	movs	r0, r0
 8005da4:	0000      	movs	r0, r0
	...

08005da8 <_dtoa_r>:
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	69c7      	ldr	r7, [r0, #28]
 8005dae:	b099      	sub	sp, #100	@ 0x64
 8005db0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005db4:	ec55 4b10 	vmov	r4, r5, d0
 8005db8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005dba:	9109      	str	r1, [sp, #36]	@ 0x24
 8005dbc:	4683      	mov	fp, r0
 8005dbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8005dc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005dc2:	b97f      	cbnz	r7, 8005de4 <_dtoa_r+0x3c>
 8005dc4:	2010      	movs	r0, #16
 8005dc6:	f7ff f895 	bl	8004ef4 <malloc>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	f8cb 001c 	str.w	r0, [fp, #28]
 8005dd0:	b920      	cbnz	r0, 8005ddc <_dtoa_r+0x34>
 8005dd2:	4ba7      	ldr	r3, [pc, #668]	@ (8006070 <_dtoa_r+0x2c8>)
 8005dd4:	21ef      	movs	r1, #239	@ 0xef
 8005dd6:	48a7      	ldr	r0, [pc, #668]	@ (8006074 <_dtoa_r+0x2cc>)
 8005dd8:	f001 fc06 	bl	80075e8 <__assert_func>
 8005ddc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005de0:	6007      	str	r7, [r0, #0]
 8005de2:	60c7      	str	r7, [r0, #12]
 8005de4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005de8:	6819      	ldr	r1, [r3, #0]
 8005dea:	b159      	cbz	r1, 8005e04 <_dtoa_r+0x5c>
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	604a      	str	r2, [r1, #4]
 8005df0:	2301      	movs	r3, #1
 8005df2:	4093      	lsls	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
 8005df6:	4658      	mov	r0, fp
 8005df8:	f000 fe24 	bl	8006a44 <_Bfree>
 8005dfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	1e2b      	subs	r3, r5, #0
 8005e06:	bfb9      	ittee	lt
 8005e08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e0c:	9303      	strlt	r3, [sp, #12]
 8005e0e:	2300      	movge	r3, #0
 8005e10:	6033      	strge	r3, [r6, #0]
 8005e12:	9f03      	ldr	r7, [sp, #12]
 8005e14:	4b98      	ldr	r3, [pc, #608]	@ (8006078 <_dtoa_r+0x2d0>)
 8005e16:	bfbc      	itt	lt
 8005e18:	2201      	movlt	r2, #1
 8005e1a:	6032      	strlt	r2, [r6, #0]
 8005e1c:	43bb      	bics	r3, r7
 8005e1e:	d112      	bne.n	8005e46 <_dtoa_r+0x9e>
 8005e20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e2c:	4323      	orrs	r3, r4
 8005e2e:	f000 854d 	beq.w	80068cc <_dtoa_r+0xb24>
 8005e32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800608c <_dtoa_r+0x2e4>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 854f 	beq.w	80068dc <_dtoa_r+0xb34>
 8005e3e:	f10a 0303 	add.w	r3, sl, #3
 8005e42:	f000 bd49 	b.w	80068d8 <_dtoa_r+0xb30>
 8005e46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	ec51 0b17 	vmov	r0, r1, d7
 8005e50:	2300      	movs	r3, #0
 8005e52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005e56:	f7fa fe3f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e5a:	4680      	mov	r8, r0
 8005e5c:	b158      	cbz	r0, 8005e76 <_dtoa_r+0xce>
 8005e5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e60:	2301      	movs	r3, #1
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e66:	b113      	cbz	r3, 8005e6e <_dtoa_r+0xc6>
 8005e68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005e6a:	4b84      	ldr	r3, [pc, #528]	@ (800607c <_dtoa_r+0x2d4>)
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006090 <_dtoa_r+0x2e8>
 8005e72:	f000 bd33 	b.w	80068dc <_dtoa_r+0xb34>
 8005e76:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005e7a:	aa16      	add	r2, sp, #88	@ 0x58
 8005e7c:	a917      	add	r1, sp, #92	@ 0x5c
 8005e7e:	4658      	mov	r0, fp
 8005e80:	f001 f8ca 	bl	8007018 <__d2b>
 8005e84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005e88:	4681      	mov	r9, r0
 8005e8a:	2e00      	cmp	r6, #0
 8005e8c:	d077      	beq.n	8005f7e <_dtoa_r+0x1d6>
 8005e8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e90:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005ea0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005ea4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	2200      	movs	r2, #0
 8005eac:	4b74      	ldr	r3, [pc, #464]	@ (8006080 <_dtoa_r+0x2d8>)
 8005eae:	f7fa f9f3 	bl	8000298 <__aeabi_dsub>
 8005eb2:	a369      	add	r3, pc, #420	@ (adr r3, 8006058 <_dtoa_r+0x2b0>)
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f7fa fba6 	bl	8000608 <__aeabi_dmul>
 8005ebc:	a368      	add	r3, pc, #416	@ (adr r3, 8006060 <_dtoa_r+0x2b8>)
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f7fa f9eb 	bl	800029c <__adddf3>
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	4630      	mov	r0, r6
 8005eca:	460d      	mov	r5, r1
 8005ecc:	f7fa fb32 	bl	8000534 <__aeabi_i2d>
 8005ed0:	a365      	add	r3, pc, #404	@ (adr r3, 8006068 <_dtoa_r+0x2c0>)
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	f7fa fb97 	bl	8000608 <__aeabi_dmul>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4620      	mov	r0, r4
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	f7fa f9db 	bl	800029c <__adddf3>
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	460d      	mov	r5, r1
 8005eea:	f7fa fe3d 	bl	8000b68 <__aeabi_d2iz>
 8005eee:	2200      	movs	r2, #0
 8005ef0:	4607      	mov	r7, r0
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	f7fa fdf8 	bl	8000aec <__aeabi_dcmplt>
 8005efc:	b140      	cbz	r0, 8005f10 <_dtoa_r+0x168>
 8005efe:	4638      	mov	r0, r7
 8005f00:	f7fa fb18 	bl	8000534 <__aeabi_i2d>
 8005f04:	4622      	mov	r2, r4
 8005f06:	462b      	mov	r3, r5
 8005f08:	f7fa fde6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f0c:	b900      	cbnz	r0, 8005f10 <_dtoa_r+0x168>
 8005f0e:	3f01      	subs	r7, #1
 8005f10:	2f16      	cmp	r7, #22
 8005f12:	d851      	bhi.n	8005fb8 <_dtoa_r+0x210>
 8005f14:	4b5b      	ldr	r3, [pc, #364]	@ (8006084 <_dtoa_r+0x2dc>)
 8005f16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f22:	f7fa fde3 	bl	8000aec <__aeabi_dcmplt>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d048      	beq.n	8005fbc <_dtoa_r+0x214>
 8005f2a:	3f01      	subs	r7, #1
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005f30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f32:	1b9b      	subs	r3, r3, r6
 8005f34:	1e5a      	subs	r2, r3, #1
 8005f36:	bf44      	itt	mi
 8005f38:	f1c3 0801 	rsbmi	r8, r3, #1
 8005f3c:	2300      	movmi	r3, #0
 8005f3e:	9208      	str	r2, [sp, #32]
 8005f40:	bf54      	ite	pl
 8005f42:	f04f 0800 	movpl.w	r8, #0
 8005f46:	9308      	strmi	r3, [sp, #32]
 8005f48:	2f00      	cmp	r7, #0
 8005f4a:	db39      	blt.n	8005fc0 <_dtoa_r+0x218>
 8005f4c:	9b08      	ldr	r3, [sp, #32]
 8005f4e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005f50:	443b      	add	r3, r7
 8005f52:	9308      	str	r3, [sp, #32]
 8005f54:	2300      	movs	r3, #0
 8005f56:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f5a:	2b09      	cmp	r3, #9
 8005f5c:	d864      	bhi.n	8006028 <_dtoa_r+0x280>
 8005f5e:	2b05      	cmp	r3, #5
 8005f60:	bfc4      	itt	gt
 8005f62:	3b04      	subgt	r3, #4
 8005f64:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f68:	f1a3 0302 	sub.w	r3, r3, #2
 8005f6c:	bfcc      	ite	gt
 8005f6e:	2400      	movgt	r4, #0
 8005f70:	2401      	movle	r4, #1
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d863      	bhi.n	800603e <_dtoa_r+0x296>
 8005f76:	e8df f003 	tbb	[pc, r3]
 8005f7a:	372a      	.short	0x372a
 8005f7c:	5535      	.short	0x5535
 8005f7e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005f82:	441e      	add	r6, r3
 8005f84:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	bfc1      	itttt	gt
 8005f8c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f90:	409f      	lslgt	r7, r3
 8005f92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005f9a:	bfd6      	itet	le
 8005f9c:	f1c3 0320 	rsble	r3, r3, #32
 8005fa0:	ea47 0003 	orrgt.w	r0, r7, r3
 8005fa4:	fa04 f003 	lslle.w	r0, r4, r3
 8005fa8:	f7fa fab4 	bl	8000514 <__aeabi_ui2d>
 8005fac:	2201      	movs	r2, #1
 8005fae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005fb2:	3e01      	subs	r6, #1
 8005fb4:	9214      	str	r2, [sp, #80]	@ 0x50
 8005fb6:	e777      	b.n	8005ea8 <_dtoa_r+0x100>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e7b8      	b.n	8005f2e <_dtoa_r+0x186>
 8005fbc:	9012      	str	r0, [sp, #72]	@ 0x48
 8005fbe:	e7b7      	b.n	8005f30 <_dtoa_r+0x188>
 8005fc0:	427b      	negs	r3, r7
 8005fc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	eba8 0807 	sub.w	r8, r8, r7
 8005fca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005fcc:	e7c4      	b.n	8005f58 <_dtoa_r+0x1b0>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dc35      	bgt.n	8006044 <_dtoa_r+0x29c>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	9307      	str	r3, [sp, #28]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005fe2:	e00b      	b.n	8005ffc <_dtoa_r+0x254>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e7f3      	b.n	8005fd0 <_dtoa_r+0x228>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fee:	18fb      	adds	r3, r7, r3
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	9307      	str	r3, [sp, #28]
 8005ff8:	bfb8      	it	lt
 8005ffa:	2301      	movlt	r3, #1
 8005ffc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006000:	2100      	movs	r1, #0
 8006002:	2204      	movs	r2, #4
 8006004:	f102 0514 	add.w	r5, r2, #20
 8006008:	429d      	cmp	r5, r3
 800600a:	d91f      	bls.n	800604c <_dtoa_r+0x2a4>
 800600c:	6041      	str	r1, [r0, #4]
 800600e:	4658      	mov	r0, fp
 8006010:	f000 fcd8 	bl	80069c4 <_Balloc>
 8006014:	4682      	mov	sl, r0
 8006016:	2800      	cmp	r0, #0
 8006018:	d13c      	bne.n	8006094 <_dtoa_r+0x2ec>
 800601a:	4b1b      	ldr	r3, [pc, #108]	@ (8006088 <_dtoa_r+0x2e0>)
 800601c:	4602      	mov	r2, r0
 800601e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006022:	e6d8      	b.n	8005dd6 <_dtoa_r+0x2e>
 8006024:	2301      	movs	r3, #1
 8006026:	e7e0      	b.n	8005fea <_dtoa_r+0x242>
 8006028:	2401      	movs	r4, #1
 800602a:	2300      	movs	r3, #0
 800602c:	9309      	str	r3, [sp, #36]	@ 0x24
 800602e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006030:	f04f 33ff 	mov.w	r3, #4294967295
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	9307      	str	r3, [sp, #28]
 8006038:	2200      	movs	r2, #0
 800603a:	2312      	movs	r3, #18
 800603c:	e7d0      	b.n	8005fe0 <_dtoa_r+0x238>
 800603e:	2301      	movs	r3, #1
 8006040:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006042:	e7f5      	b.n	8006030 <_dtoa_r+0x288>
 8006044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	9307      	str	r3, [sp, #28]
 800604a:	e7d7      	b.n	8005ffc <_dtoa_r+0x254>
 800604c:	3101      	adds	r1, #1
 800604e:	0052      	lsls	r2, r2, #1
 8006050:	e7d8      	b.n	8006004 <_dtoa_r+0x25c>
 8006052:	bf00      	nop
 8006054:	f3af 8000 	nop.w
 8006058:	636f4361 	.word	0x636f4361
 800605c:	3fd287a7 	.word	0x3fd287a7
 8006060:	8b60c8b3 	.word	0x8b60c8b3
 8006064:	3fc68a28 	.word	0x3fc68a28
 8006068:	509f79fb 	.word	0x509f79fb
 800606c:	3fd34413 	.word	0x3fd34413
 8006070:	08007c59 	.word	0x08007c59
 8006074:	08007c70 	.word	0x08007c70
 8006078:	7ff00000 	.word	0x7ff00000
 800607c:	08007c29 	.word	0x08007c29
 8006080:	3ff80000 	.word	0x3ff80000
 8006084:	08007d68 	.word	0x08007d68
 8006088:	08007cc8 	.word	0x08007cc8
 800608c:	08007c55 	.word	0x08007c55
 8006090:	08007c28 	.word	0x08007c28
 8006094:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006098:	6018      	str	r0, [r3, #0]
 800609a:	9b07      	ldr	r3, [sp, #28]
 800609c:	2b0e      	cmp	r3, #14
 800609e:	f200 80a4 	bhi.w	80061ea <_dtoa_r+0x442>
 80060a2:	2c00      	cmp	r4, #0
 80060a4:	f000 80a1 	beq.w	80061ea <_dtoa_r+0x442>
 80060a8:	2f00      	cmp	r7, #0
 80060aa:	dd33      	ble.n	8006114 <_dtoa_r+0x36c>
 80060ac:	4bad      	ldr	r3, [pc, #692]	@ (8006364 <_dtoa_r+0x5bc>)
 80060ae:	f007 020f 	and.w	r2, r7, #15
 80060b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060b6:	ed93 7b00 	vldr	d7, [r3]
 80060ba:	05f8      	lsls	r0, r7, #23
 80060bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80060c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80060c4:	d516      	bpl.n	80060f4 <_dtoa_r+0x34c>
 80060c6:	4ba8      	ldr	r3, [pc, #672]	@ (8006368 <_dtoa_r+0x5c0>)
 80060c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060d0:	f7fa fbc4 	bl	800085c <__aeabi_ddiv>
 80060d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060d8:	f004 040f 	and.w	r4, r4, #15
 80060dc:	2603      	movs	r6, #3
 80060de:	4da2      	ldr	r5, [pc, #648]	@ (8006368 <_dtoa_r+0x5c0>)
 80060e0:	b954      	cbnz	r4, 80060f8 <_dtoa_r+0x350>
 80060e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ea:	f7fa fbb7 	bl	800085c <__aeabi_ddiv>
 80060ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060f2:	e028      	b.n	8006146 <_dtoa_r+0x39e>
 80060f4:	2602      	movs	r6, #2
 80060f6:	e7f2      	b.n	80060de <_dtoa_r+0x336>
 80060f8:	07e1      	lsls	r1, r4, #31
 80060fa:	d508      	bpl.n	800610e <_dtoa_r+0x366>
 80060fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006100:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006104:	f7fa fa80 	bl	8000608 <__aeabi_dmul>
 8006108:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800610c:	3601      	adds	r6, #1
 800610e:	1064      	asrs	r4, r4, #1
 8006110:	3508      	adds	r5, #8
 8006112:	e7e5      	b.n	80060e0 <_dtoa_r+0x338>
 8006114:	f000 80d2 	beq.w	80062bc <_dtoa_r+0x514>
 8006118:	427c      	negs	r4, r7
 800611a:	4b92      	ldr	r3, [pc, #584]	@ (8006364 <_dtoa_r+0x5bc>)
 800611c:	4d92      	ldr	r5, [pc, #584]	@ (8006368 <_dtoa_r+0x5c0>)
 800611e:	f004 020f 	and.w	r2, r4, #15
 8006122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800612e:	f7fa fa6b 	bl	8000608 <__aeabi_dmul>
 8006132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006136:	1124      	asrs	r4, r4, #4
 8006138:	2300      	movs	r3, #0
 800613a:	2602      	movs	r6, #2
 800613c:	2c00      	cmp	r4, #0
 800613e:	f040 80b2 	bne.w	80062a6 <_dtoa_r+0x4fe>
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1d3      	bne.n	80060ee <_dtoa_r+0x346>
 8006146:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006148:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 80b7 	beq.w	80062c0 <_dtoa_r+0x518>
 8006152:	4b86      	ldr	r3, [pc, #536]	@ (800636c <_dtoa_r+0x5c4>)
 8006154:	2200      	movs	r2, #0
 8006156:	4620      	mov	r0, r4
 8006158:	4629      	mov	r1, r5
 800615a:	f7fa fcc7 	bl	8000aec <__aeabi_dcmplt>
 800615e:	2800      	cmp	r0, #0
 8006160:	f000 80ae 	beq.w	80062c0 <_dtoa_r+0x518>
 8006164:	9b07      	ldr	r3, [sp, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 80aa 	beq.w	80062c0 <_dtoa_r+0x518>
 800616c:	9b00      	ldr	r3, [sp, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	dd37      	ble.n	80061e2 <_dtoa_r+0x43a>
 8006172:	1e7b      	subs	r3, r7, #1
 8006174:	9304      	str	r3, [sp, #16]
 8006176:	4620      	mov	r0, r4
 8006178:	4b7d      	ldr	r3, [pc, #500]	@ (8006370 <_dtoa_r+0x5c8>)
 800617a:	2200      	movs	r2, #0
 800617c:	4629      	mov	r1, r5
 800617e:	f7fa fa43 	bl	8000608 <__aeabi_dmul>
 8006182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006186:	9c00      	ldr	r4, [sp, #0]
 8006188:	3601      	adds	r6, #1
 800618a:	4630      	mov	r0, r6
 800618c:	f7fa f9d2 	bl	8000534 <__aeabi_i2d>
 8006190:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006194:	f7fa fa38 	bl	8000608 <__aeabi_dmul>
 8006198:	4b76      	ldr	r3, [pc, #472]	@ (8006374 <_dtoa_r+0x5cc>)
 800619a:	2200      	movs	r2, #0
 800619c:	f7fa f87e 	bl	800029c <__adddf3>
 80061a0:	4605      	mov	r5, r0
 80061a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80061a6:	2c00      	cmp	r4, #0
 80061a8:	f040 808d 	bne.w	80062c6 <_dtoa_r+0x51e>
 80061ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061b0:	4b71      	ldr	r3, [pc, #452]	@ (8006378 <_dtoa_r+0x5d0>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	f7fa f870 	bl	8000298 <__aeabi_dsub>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061c0:	462a      	mov	r2, r5
 80061c2:	4633      	mov	r3, r6
 80061c4:	f7fa fcb0 	bl	8000b28 <__aeabi_dcmpgt>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	f040 828b 	bne.w	80066e4 <_dtoa_r+0x93c>
 80061ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061d2:	462a      	mov	r2, r5
 80061d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80061d8:	f7fa fc88 	bl	8000aec <__aeabi_dcmplt>
 80061dc:	2800      	cmp	r0, #0
 80061de:	f040 8128 	bne.w	8006432 <_dtoa_r+0x68a>
 80061e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80061e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80061ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f2c0 815a 	blt.w	80064a6 <_dtoa_r+0x6fe>
 80061f2:	2f0e      	cmp	r7, #14
 80061f4:	f300 8157 	bgt.w	80064a6 <_dtoa_r+0x6fe>
 80061f8:	4b5a      	ldr	r3, [pc, #360]	@ (8006364 <_dtoa_r+0x5bc>)
 80061fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80061fe:	ed93 7b00 	vldr	d7, [r3]
 8006202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	ed8d 7b00 	vstr	d7, [sp]
 800620a:	da03      	bge.n	8006214 <_dtoa_r+0x46c>
 800620c:	9b07      	ldr	r3, [sp, #28]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f340 8101 	ble.w	8006416 <_dtoa_r+0x66e>
 8006214:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006218:	4656      	mov	r6, sl
 800621a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800621e:	4620      	mov	r0, r4
 8006220:	4629      	mov	r1, r5
 8006222:	f7fa fb1b 	bl	800085c <__aeabi_ddiv>
 8006226:	f7fa fc9f 	bl	8000b68 <__aeabi_d2iz>
 800622a:	4680      	mov	r8, r0
 800622c:	f7fa f982 	bl	8000534 <__aeabi_i2d>
 8006230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006234:	f7fa f9e8 	bl	8000608 <__aeabi_dmul>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4620      	mov	r0, r4
 800623e:	4629      	mov	r1, r5
 8006240:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006244:	f7fa f828 	bl	8000298 <__aeabi_dsub>
 8006248:	f806 4b01 	strb.w	r4, [r6], #1
 800624c:	9d07      	ldr	r5, [sp, #28]
 800624e:	eba6 040a 	sub.w	r4, r6, sl
 8006252:	42a5      	cmp	r5, r4
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	f040 8117 	bne.w	800648a <_dtoa_r+0x6e2>
 800625c:	f7fa f81e 	bl	800029c <__adddf3>
 8006260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006264:	4604      	mov	r4, r0
 8006266:	460d      	mov	r5, r1
 8006268:	f7fa fc5e 	bl	8000b28 <__aeabi_dcmpgt>
 800626c:	2800      	cmp	r0, #0
 800626e:	f040 80f9 	bne.w	8006464 <_dtoa_r+0x6bc>
 8006272:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006276:	4620      	mov	r0, r4
 8006278:	4629      	mov	r1, r5
 800627a:	f7fa fc2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800627e:	b118      	cbz	r0, 8006288 <_dtoa_r+0x4e0>
 8006280:	f018 0f01 	tst.w	r8, #1
 8006284:	f040 80ee 	bne.w	8006464 <_dtoa_r+0x6bc>
 8006288:	4649      	mov	r1, r9
 800628a:	4658      	mov	r0, fp
 800628c:	f000 fbda 	bl	8006a44 <_Bfree>
 8006290:	2300      	movs	r3, #0
 8006292:	7033      	strb	r3, [r6, #0]
 8006294:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006296:	3701      	adds	r7, #1
 8006298:	601f      	str	r7, [r3, #0]
 800629a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 831d 	beq.w	80068dc <_dtoa_r+0xb34>
 80062a2:	601e      	str	r6, [r3, #0]
 80062a4:	e31a      	b.n	80068dc <_dtoa_r+0xb34>
 80062a6:	07e2      	lsls	r2, r4, #31
 80062a8:	d505      	bpl.n	80062b6 <_dtoa_r+0x50e>
 80062aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062ae:	f7fa f9ab 	bl	8000608 <__aeabi_dmul>
 80062b2:	3601      	adds	r6, #1
 80062b4:	2301      	movs	r3, #1
 80062b6:	1064      	asrs	r4, r4, #1
 80062b8:	3508      	adds	r5, #8
 80062ba:	e73f      	b.n	800613c <_dtoa_r+0x394>
 80062bc:	2602      	movs	r6, #2
 80062be:	e742      	b.n	8006146 <_dtoa_r+0x39e>
 80062c0:	9c07      	ldr	r4, [sp, #28]
 80062c2:	9704      	str	r7, [sp, #16]
 80062c4:	e761      	b.n	800618a <_dtoa_r+0x3e2>
 80062c6:	4b27      	ldr	r3, [pc, #156]	@ (8006364 <_dtoa_r+0x5bc>)
 80062c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062d2:	4454      	add	r4, sl
 80062d4:	2900      	cmp	r1, #0
 80062d6:	d053      	beq.n	8006380 <_dtoa_r+0x5d8>
 80062d8:	4928      	ldr	r1, [pc, #160]	@ (800637c <_dtoa_r+0x5d4>)
 80062da:	2000      	movs	r0, #0
 80062dc:	f7fa fabe 	bl	800085c <__aeabi_ddiv>
 80062e0:	4633      	mov	r3, r6
 80062e2:	462a      	mov	r2, r5
 80062e4:	f7f9 ffd8 	bl	8000298 <__aeabi_dsub>
 80062e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062ec:	4656      	mov	r6, sl
 80062ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062f2:	f7fa fc39 	bl	8000b68 <__aeabi_d2iz>
 80062f6:	4605      	mov	r5, r0
 80062f8:	f7fa f91c 	bl	8000534 <__aeabi_i2d>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006304:	f7f9 ffc8 	bl	8000298 <__aeabi_dsub>
 8006308:	3530      	adds	r5, #48	@ 0x30
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006312:	f806 5b01 	strb.w	r5, [r6], #1
 8006316:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800631a:	f7fa fbe7 	bl	8000aec <__aeabi_dcmplt>
 800631e:	2800      	cmp	r0, #0
 8006320:	d171      	bne.n	8006406 <_dtoa_r+0x65e>
 8006322:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006326:	4911      	ldr	r1, [pc, #68]	@ (800636c <_dtoa_r+0x5c4>)
 8006328:	2000      	movs	r0, #0
 800632a:	f7f9 ffb5 	bl	8000298 <__aeabi_dsub>
 800632e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006332:	f7fa fbdb 	bl	8000aec <__aeabi_dcmplt>
 8006336:	2800      	cmp	r0, #0
 8006338:	f040 8095 	bne.w	8006466 <_dtoa_r+0x6be>
 800633c:	42a6      	cmp	r6, r4
 800633e:	f43f af50 	beq.w	80061e2 <_dtoa_r+0x43a>
 8006342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006346:	4b0a      	ldr	r3, [pc, #40]	@ (8006370 <_dtoa_r+0x5c8>)
 8006348:	2200      	movs	r2, #0
 800634a:	f7fa f95d 	bl	8000608 <__aeabi_dmul>
 800634e:	4b08      	ldr	r3, [pc, #32]	@ (8006370 <_dtoa_r+0x5c8>)
 8006350:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006354:	2200      	movs	r2, #0
 8006356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800635a:	f7fa f955 	bl	8000608 <__aeabi_dmul>
 800635e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006362:	e7c4      	b.n	80062ee <_dtoa_r+0x546>
 8006364:	08007d68 	.word	0x08007d68
 8006368:	08007d40 	.word	0x08007d40
 800636c:	3ff00000 	.word	0x3ff00000
 8006370:	40240000 	.word	0x40240000
 8006374:	401c0000 	.word	0x401c0000
 8006378:	40140000 	.word	0x40140000
 800637c:	3fe00000 	.word	0x3fe00000
 8006380:	4631      	mov	r1, r6
 8006382:	4628      	mov	r0, r5
 8006384:	f7fa f940 	bl	8000608 <__aeabi_dmul>
 8006388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800638c:	9415      	str	r4, [sp, #84]	@ 0x54
 800638e:	4656      	mov	r6, sl
 8006390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006394:	f7fa fbe8 	bl	8000b68 <__aeabi_d2iz>
 8006398:	4605      	mov	r5, r0
 800639a:	f7fa f8cb 	bl	8000534 <__aeabi_i2d>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063a6:	f7f9 ff77 	bl	8000298 <__aeabi_dsub>
 80063aa:	3530      	adds	r5, #48	@ 0x30
 80063ac:	f806 5b01 	strb.w	r5, [r6], #1
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	42a6      	cmp	r6, r4
 80063b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	d124      	bne.n	800640a <_dtoa_r+0x662>
 80063c0:	4bac      	ldr	r3, [pc, #688]	@ (8006674 <_dtoa_r+0x8cc>)
 80063c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063c6:	f7f9 ff69 	bl	800029c <__adddf3>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063d2:	f7fa fba9 	bl	8000b28 <__aeabi_dcmpgt>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d145      	bne.n	8006466 <_dtoa_r+0x6be>
 80063da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063de:	49a5      	ldr	r1, [pc, #660]	@ (8006674 <_dtoa_r+0x8cc>)
 80063e0:	2000      	movs	r0, #0
 80063e2:	f7f9 ff59 	bl	8000298 <__aeabi_dsub>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ee:	f7fa fb7d 	bl	8000aec <__aeabi_dcmplt>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	f43f aef5 	beq.w	80061e2 <_dtoa_r+0x43a>
 80063f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80063fa:	1e73      	subs	r3, r6, #1
 80063fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80063fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006402:	2b30      	cmp	r3, #48	@ 0x30
 8006404:	d0f8      	beq.n	80063f8 <_dtoa_r+0x650>
 8006406:	9f04      	ldr	r7, [sp, #16]
 8006408:	e73e      	b.n	8006288 <_dtoa_r+0x4e0>
 800640a:	4b9b      	ldr	r3, [pc, #620]	@ (8006678 <_dtoa_r+0x8d0>)
 800640c:	f7fa f8fc 	bl	8000608 <__aeabi_dmul>
 8006410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006414:	e7bc      	b.n	8006390 <_dtoa_r+0x5e8>
 8006416:	d10c      	bne.n	8006432 <_dtoa_r+0x68a>
 8006418:	4b98      	ldr	r3, [pc, #608]	@ (800667c <_dtoa_r+0x8d4>)
 800641a:	2200      	movs	r2, #0
 800641c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006420:	f7fa f8f2 	bl	8000608 <__aeabi_dmul>
 8006424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006428:	f7fa fb74 	bl	8000b14 <__aeabi_dcmpge>
 800642c:	2800      	cmp	r0, #0
 800642e:	f000 8157 	beq.w	80066e0 <_dtoa_r+0x938>
 8006432:	2400      	movs	r4, #0
 8006434:	4625      	mov	r5, r4
 8006436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006438:	43db      	mvns	r3, r3
 800643a:	9304      	str	r3, [sp, #16]
 800643c:	4656      	mov	r6, sl
 800643e:	2700      	movs	r7, #0
 8006440:	4621      	mov	r1, r4
 8006442:	4658      	mov	r0, fp
 8006444:	f000 fafe 	bl	8006a44 <_Bfree>
 8006448:	2d00      	cmp	r5, #0
 800644a:	d0dc      	beq.n	8006406 <_dtoa_r+0x65e>
 800644c:	b12f      	cbz	r7, 800645a <_dtoa_r+0x6b2>
 800644e:	42af      	cmp	r7, r5
 8006450:	d003      	beq.n	800645a <_dtoa_r+0x6b2>
 8006452:	4639      	mov	r1, r7
 8006454:	4658      	mov	r0, fp
 8006456:	f000 faf5 	bl	8006a44 <_Bfree>
 800645a:	4629      	mov	r1, r5
 800645c:	4658      	mov	r0, fp
 800645e:	f000 faf1 	bl	8006a44 <_Bfree>
 8006462:	e7d0      	b.n	8006406 <_dtoa_r+0x65e>
 8006464:	9704      	str	r7, [sp, #16]
 8006466:	4633      	mov	r3, r6
 8006468:	461e      	mov	r6, r3
 800646a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800646e:	2a39      	cmp	r2, #57	@ 0x39
 8006470:	d107      	bne.n	8006482 <_dtoa_r+0x6da>
 8006472:	459a      	cmp	sl, r3
 8006474:	d1f8      	bne.n	8006468 <_dtoa_r+0x6c0>
 8006476:	9a04      	ldr	r2, [sp, #16]
 8006478:	3201      	adds	r2, #1
 800647a:	9204      	str	r2, [sp, #16]
 800647c:	2230      	movs	r2, #48	@ 0x30
 800647e:	f88a 2000 	strb.w	r2, [sl]
 8006482:	781a      	ldrb	r2, [r3, #0]
 8006484:	3201      	adds	r2, #1
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	e7bd      	b.n	8006406 <_dtoa_r+0x65e>
 800648a:	4b7b      	ldr	r3, [pc, #492]	@ (8006678 <_dtoa_r+0x8d0>)
 800648c:	2200      	movs	r2, #0
 800648e:	f7fa f8bb 	bl	8000608 <__aeabi_dmul>
 8006492:	2200      	movs	r2, #0
 8006494:	2300      	movs	r3, #0
 8006496:	4604      	mov	r4, r0
 8006498:	460d      	mov	r5, r1
 800649a:	f7fa fb1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800649e:	2800      	cmp	r0, #0
 80064a0:	f43f aebb 	beq.w	800621a <_dtoa_r+0x472>
 80064a4:	e6f0      	b.n	8006288 <_dtoa_r+0x4e0>
 80064a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80064a8:	2a00      	cmp	r2, #0
 80064aa:	f000 80db 	beq.w	8006664 <_dtoa_r+0x8bc>
 80064ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064b0:	2a01      	cmp	r2, #1
 80064b2:	f300 80bf 	bgt.w	8006634 <_dtoa_r+0x88c>
 80064b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80064b8:	2a00      	cmp	r2, #0
 80064ba:	f000 80b7 	beq.w	800662c <_dtoa_r+0x884>
 80064be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80064c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064c4:	4646      	mov	r6, r8
 80064c6:	9a08      	ldr	r2, [sp, #32]
 80064c8:	2101      	movs	r1, #1
 80064ca:	441a      	add	r2, r3
 80064cc:	4658      	mov	r0, fp
 80064ce:	4498      	add	r8, r3
 80064d0:	9208      	str	r2, [sp, #32]
 80064d2:	f000 fb6b 	bl	8006bac <__i2b>
 80064d6:	4605      	mov	r5, r0
 80064d8:	b15e      	cbz	r6, 80064f2 <_dtoa_r+0x74a>
 80064da:	9b08      	ldr	r3, [sp, #32]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	dd08      	ble.n	80064f2 <_dtoa_r+0x74a>
 80064e0:	42b3      	cmp	r3, r6
 80064e2:	9a08      	ldr	r2, [sp, #32]
 80064e4:	bfa8      	it	ge
 80064e6:	4633      	movge	r3, r6
 80064e8:	eba8 0803 	sub.w	r8, r8, r3
 80064ec:	1af6      	subs	r6, r6, r3
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	9308      	str	r3, [sp, #32]
 80064f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064f4:	b1f3      	cbz	r3, 8006534 <_dtoa_r+0x78c>
 80064f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 80b7 	beq.w	800666c <_dtoa_r+0x8c4>
 80064fe:	b18c      	cbz	r4, 8006524 <_dtoa_r+0x77c>
 8006500:	4629      	mov	r1, r5
 8006502:	4622      	mov	r2, r4
 8006504:	4658      	mov	r0, fp
 8006506:	f000 fc11 	bl	8006d2c <__pow5mult>
 800650a:	464a      	mov	r2, r9
 800650c:	4601      	mov	r1, r0
 800650e:	4605      	mov	r5, r0
 8006510:	4658      	mov	r0, fp
 8006512:	f000 fb61 	bl	8006bd8 <__multiply>
 8006516:	4649      	mov	r1, r9
 8006518:	9004      	str	r0, [sp, #16]
 800651a:	4658      	mov	r0, fp
 800651c:	f000 fa92 	bl	8006a44 <_Bfree>
 8006520:	9b04      	ldr	r3, [sp, #16]
 8006522:	4699      	mov	r9, r3
 8006524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006526:	1b1a      	subs	r2, r3, r4
 8006528:	d004      	beq.n	8006534 <_dtoa_r+0x78c>
 800652a:	4649      	mov	r1, r9
 800652c:	4658      	mov	r0, fp
 800652e:	f000 fbfd 	bl	8006d2c <__pow5mult>
 8006532:	4681      	mov	r9, r0
 8006534:	2101      	movs	r1, #1
 8006536:	4658      	mov	r0, fp
 8006538:	f000 fb38 	bl	8006bac <__i2b>
 800653c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800653e:	4604      	mov	r4, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 81cf 	beq.w	80068e4 <_dtoa_r+0xb3c>
 8006546:	461a      	mov	r2, r3
 8006548:	4601      	mov	r1, r0
 800654a:	4658      	mov	r0, fp
 800654c:	f000 fbee 	bl	8006d2c <__pow5mult>
 8006550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006552:	2b01      	cmp	r3, #1
 8006554:	4604      	mov	r4, r0
 8006556:	f300 8095 	bgt.w	8006684 <_dtoa_r+0x8dc>
 800655a:	9b02      	ldr	r3, [sp, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f040 8087 	bne.w	8006670 <_dtoa_r+0x8c8>
 8006562:	9b03      	ldr	r3, [sp, #12]
 8006564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006568:	2b00      	cmp	r3, #0
 800656a:	f040 8089 	bne.w	8006680 <_dtoa_r+0x8d8>
 800656e:	9b03      	ldr	r3, [sp, #12]
 8006570:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006574:	0d1b      	lsrs	r3, r3, #20
 8006576:	051b      	lsls	r3, r3, #20
 8006578:	b12b      	cbz	r3, 8006586 <_dtoa_r+0x7de>
 800657a:	9b08      	ldr	r3, [sp, #32]
 800657c:	3301      	adds	r3, #1
 800657e:	9308      	str	r3, [sp, #32]
 8006580:	f108 0801 	add.w	r8, r8, #1
 8006584:	2301      	movs	r3, #1
 8006586:	930a      	str	r3, [sp, #40]	@ 0x28
 8006588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 81b0 	beq.w	80068f0 <_dtoa_r+0xb48>
 8006590:	6923      	ldr	r3, [r4, #16]
 8006592:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006596:	6918      	ldr	r0, [r3, #16]
 8006598:	f000 fabc 	bl	8006b14 <__hi0bits>
 800659c:	f1c0 0020 	rsb	r0, r0, #32
 80065a0:	9b08      	ldr	r3, [sp, #32]
 80065a2:	4418      	add	r0, r3
 80065a4:	f010 001f 	ands.w	r0, r0, #31
 80065a8:	d077      	beq.n	800669a <_dtoa_r+0x8f2>
 80065aa:	f1c0 0320 	rsb	r3, r0, #32
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	dd6b      	ble.n	800668a <_dtoa_r+0x8e2>
 80065b2:	9b08      	ldr	r3, [sp, #32]
 80065b4:	f1c0 001c 	rsb	r0, r0, #28
 80065b8:	4403      	add	r3, r0
 80065ba:	4480      	add	r8, r0
 80065bc:	4406      	add	r6, r0
 80065be:	9308      	str	r3, [sp, #32]
 80065c0:	f1b8 0f00 	cmp.w	r8, #0
 80065c4:	dd05      	ble.n	80065d2 <_dtoa_r+0x82a>
 80065c6:	4649      	mov	r1, r9
 80065c8:	4642      	mov	r2, r8
 80065ca:	4658      	mov	r0, fp
 80065cc:	f000 fc08 	bl	8006de0 <__lshift>
 80065d0:	4681      	mov	r9, r0
 80065d2:	9b08      	ldr	r3, [sp, #32]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dd05      	ble.n	80065e4 <_dtoa_r+0x83c>
 80065d8:	4621      	mov	r1, r4
 80065da:	461a      	mov	r2, r3
 80065dc:	4658      	mov	r0, fp
 80065de:	f000 fbff 	bl	8006de0 <__lshift>
 80065e2:	4604      	mov	r4, r0
 80065e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d059      	beq.n	800669e <_dtoa_r+0x8f6>
 80065ea:	4621      	mov	r1, r4
 80065ec:	4648      	mov	r0, r9
 80065ee:	f000 fc63 	bl	8006eb8 <__mcmp>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	da53      	bge.n	800669e <_dtoa_r+0x8f6>
 80065f6:	1e7b      	subs	r3, r7, #1
 80065f8:	9304      	str	r3, [sp, #16]
 80065fa:	4649      	mov	r1, r9
 80065fc:	2300      	movs	r3, #0
 80065fe:	220a      	movs	r2, #10
 8006600:	4658      	mov	r0, fp
 8006602:	f000 fa41 	bl	8006a88 <__multadd>
 8006606:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006608:	4681      	mov	r9, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 8172 	beq.w	80068f4 <_dtoa_r+0xb4c>
 8006610:	2300      	movs	r3, #0
 8006612:	4629      	mov	r1, r5
 8006614:	220a      	movs	r2, #10
 8006616:	4658      	mov	r0, fp
 8006618:	f000 fa36 	bl	8006a88 <__multadd>
 800661c:	9b00      	ldr	r3, [sp, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	4605      	mov	r5, r0
 8006622:	dc67      	bgt.n	80066f4 <_dtoa_r+0x94c>
 8006624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006626:	2b02      	cmp	r3, #2
 8006628:	dc41      	bgt.n	80066ae <_dtoa_r+0x906>
 800662a:	e063      	b.n	80066f4 <_dtoa_r+0x94c>
 800662c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800662e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006632:	e746      	b.n	80064c2 <_dtoa_r+0x71a>
 8006634:	9b07      	ldr	r3, [sp, #28]
 8006636:	1e5c      	subs	r4, r3, #1
 8006638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800663a:	42a3      	cmp	r3, r4
 800663c:	bfbf      	itttt	lt
 800663e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006640:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006642:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006644:	1ae3      	sublt	r3, r4, r3
 8006646:	bfb4      	ite	lt
 8006648:	18d2      	addlt	r2, r2, r3
 800664a:	1b1c      	subge	r4, r3, r4
 800664c:	9b07      	ldr	r3, [sp, #28]
 800664e:	bfbc      	itt	lt
 8006650:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006652:	2400      	movlt	r4, #0
 8006654:	2b00      	cmp	r3, #0
 8006656:	bfb5      	itete	lt
 8006658:	eba8 0603 	sublt.w	r6, r8, r3
 800665c:	9b07      	ldrge	r3, [sp, #28]
 800665e:	2300      	movlt	r3, #0
 8006660:	4646      	movge	r6, r8
 8006662:	e730      	b.n	80064c6 <_dtoa_r+0x71e>
 8006664:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006666:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006668:	4646      	mov	r6, r8
 800666a:	e735      	b.n	80064d8 <_dtoa_r+0x730>
 800666c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800666e:	e75c      	b.n	800652a <_dtoa_r+0x782>
 8006670:	2300      	movs	r3, #0
 8006672:	e788      	b.n	8006586 <_dtoa_r+0x7de>
 8006674:	3fe00000 	.word	0x3fe00000
 8006678:	40240000 	.word	0x40240000
 800667c:	40140000 	.word	0x40140000
 8006680:	9b02      	ldr	r3, [sp, #8]
 8006682:	e780      	b.n	8006586 <_dtoa_r+0x7de>
 8006684:	2300      	movs	r3, #0
 8006686:	930a      	str	r3, [sp, #40]	@ 0x28
 8006688:	e782      	b.n	8006590 <_dtoa_r+0x7e8>
 800668a:	d099      	beq.n	80065c0 <_dtoa_r+0x818>
 800668c:	9a08      	ldr	r2, [sp, #32]
 800668e:	331c      	adds	r3, #28
 8006690:	441a      	add	r2, r3
 8006692:	4498      	add	r8, r3
 8006694:	441e      	add	r6, r3
 8006696:	9208      	str	r2, [sp, #32]
 8006698:	e792      	b.n	80065c0 <_dtoa_r+0x818>
 800669a:	4603      	mov	r3, r0
 800669c:	e7f6      	b.n	800668c <_dtoa_r+0x8e4>
 800669e:	9b07      	ldr	r3, [sp, #28]
 80066a0:	9704      	str	r7, [sp, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	dc20      	bgt.n	80066e8 <_dtoa_r+0x940>
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	dd1e      	ble.n	80066ec <_dtoa_r+0x944>
 80066ae:	9b00      	ldr	r3, [sp, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f47f aec0 	bne.w	8006436 <_dtoa_r+0x68e>
 80066b6:	4621      	mov	r1, r4
 80066b8:	2205      	movs	r2, #5
 80066ba:	4658      	mov	r0, fp
 80066bc:	f000 f9e4 	bl	8006a88 <__multadd>
 80066c0:	4601      	mov	r1, r0
 80066c2:	4604      	mov	r4, r0
 80066c4:	4648      	mov	r0, r9
 80066c6:	f000 fbf7 	bl	8006eb8 <__mcmp>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	f77f aeb3 	ble.w	8006436 <_dtoa_r+0x68e>
 80066d0:	4656      	mov	r6, sl
 80066d2:	2331      	movs	r3, #49	@ 0x31
 80066d4:	f806 3b01 	strb.w	r3, [r6], #1
 80066d8:	9b04      	ldr	r3, [sp, #16]
 80066da:	3301      	adds	r3, #1
 80066dc:	9304      	str	r3, [sp, #16]
 80066de:	e6ae      	b.n	800643e <_dtoa_r+0x696>
 80066e0:	9c07      	ldr	r4, [sp, #28]
 80066e2:	9704      	str	r7, [sp, #16]
 80066e4:	4625      	mov	r5, r4
 80066e6:	e7f3      	b.n	80066d0 <_dtoa_r+0x928>
 80066e8:	9b07      	ldr	r3, [sp, #28]
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 8104 	beq.w	80068fc <_dtoa_r+0xb54>
 80066f4:	2e00      	cmp	r6, #0
 80066f6:	dd05      	ble.n	8006704 <_dtoa_r+0x95c>
 80066f8:	4629      	mov	r1, r5
 80066fa:	4632      	mov	r2, r6
 80066fc:	4658      	mov	r0, fp
 80066fe:	f000 fb6f 	bl	8006de0 <__lshift>
 8006702:	4605      	mov	r5, r0
 8006704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006706:	2b00      	cmp	r3, #0
 8006708:	d05a      	beq.n	80067c0 <_dtoa_r+0xa18>
 800670a:	6869      	ldr	r1, [r5, #4]
 800670c:	4658      	mov	r0, fp
 800670e:	f000 f959 	bl	80069c4 <_Balloc>
 8006712:	4606      	mov	r6, r0
 8006714:	b928      	cbnz	r0, 8006722 <_dtoa_r+0x97a>
 8006716:	4b84      	ldr	r3, [pc, #528]	@ (8006928 <_dtoa_r+0xb80>)
 8006718:	4602      	mov	r2, r0
 800671a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800671e:	f7ff bb5a 	b.w	8005dd6 <_dtoa_r+0x2e>
 8006722:	692a      	ldr	r2, [r5, #16]
 8006724:	3202      	adds	r2, #2
 8006726:	0092      	lsls	r2, r2, #2
 8006728:	f105 010c 	add.w	r1, r5, #12
 800672c:	300c      	adds	r0, #12
 800672e:	f000 ff4d 	bl	80075cc <memcpy>
 8006732:	2201      	movs	r2, #1
 8006734:	4631      	mov	r1, r6
 8006736:	4658      	mov	r0, fp
 8006738:	f000 fb52 	bl	8006de0 <__lshift>
 800673c:	f10a 0301 	add.w	r3, sl, #1
 8006740:	9307      	str	r3, [sp, #28]
 8006742:	9b00      	ldr	r3, [sp, #0]
 8006744:	4453      	add	r3, sl
 8006746:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006748:	9b02      	ldr	r3, [sp, #8]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	462f      	mov	r7, r5
 8006750:	930a      	str	r3, [sp, #40]	@ 0x28
 8006752:	4605      	mov	r5, r0
 8006754:	9b07      	ldr	r3, [sp, #28]
 8006756:	4621      	mov	r1, r4
 8006758:	3b01      	subs	r3, #1
 800675a:	4648      	mov	r0, r9
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	f7ff fa98 	bl	8005c92 <quorem>
 8006762:	4639      	mov	r1, r7
 8006764:	9002      	str	r0, [sp, #8]
 8006766:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800676a:	4648      	mov	r0, r9
 800676c:	f000 fba4 	bl	8006eb8 <__mcmp>
 8006770:	462a      	mov	r2, r5
 8006772:	9008      	str	r0, [sp, #32]
 8006774:	4621      	mov	r1, r4
 8006776:	4658      	mov	r0, fp
 8006778:	f000 fbba 	bl	8006ef0 <__mdiff>
 800677c:	68c2      	ldr	r2, [r0, #12]
 800677e:	4606      	mov	r6, r0
 8006780:	bb02      	cbnz	r2, 80067c4 <_dtoa_r+0xa1c>
 8006782:	4601      	mov	r1, r0
 8006784:	4648      	mov	r0, r9
 8006786:	f000 fb97 	bl	8006eb8 <__mcmp>
 800678a:	4602      	mov	r2, r0
 800678c:	4631      	mov	r1, r6
 800678e:	4658      	mov	r0, fp
 8006790:	920e      	str	r2, [sp, #56]	@ 0x38
 8006792:	f000 f957 	bl	8006a44 <_Bfree>
 8006796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006798:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800679a:	9e07      	ldr	r6, [sp, #28]
 800679c:	ea43 0102 	orr.w	r1, r3, r2
 80067a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067a2:	4319      	orrs	r1, r3
 80067a4:	d110      	bne.n	80067c8 <_dtoa_r+0xa20>
 80067a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067aa:	d029      	beq.n	8006800 <_dtoa_r+0xa58>
 80067ac:	9b08      	ldr	r3, [sp, #32]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	dd02      	ble.n	80067b8 <_dtoa_r+0xa10>
 80067b2:	9b02      	ldr	r3, [sp, #8]
 80067b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80067b8:	9b00      	ldr	r3, [sp, #0]
 80067ba:	f883 8000 	strb.w	r8, [r3]
 80067be:	e63f      	b.n	8006440 <_dtoa_r+0x698>
 80067c0:	4628      	mov	r0, r5
 80067c2:	e7bb      	b.n	800673c <_dtoa_r+0x994>
 80067c4:	2201      	movs	r2, #1
 80067c6:	e7e1      	b.n	800678c <_dtoa_r+0x9e4>
 80067c8:	9b08      	ldr	r3, [sp, #32]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	db04      	blt.n	80067d8 <_dtoa_r+0xa30>
 80067ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067d0:	430b      	orrs	r3, r1
 80067d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067d4:	430b      	orrs	r3, r1
 80067d6:	d120      	bne.n	800681a <_dtoa_r+0xa72>
 80067d8:	2a00      	cmp	r2, #0
 80067da:	dded      	ble.n	80067b8 <_dtoa_r+0xa10>
 80067dc:	4649      	mov	r1, r9
 80067de:	2201      	movs	r2, #1
 80067e0:	4658      	mov	r0, fp
 80067e2:	f000 fafd 	bl	8006de0 <__lshift>
 80067e6:	4621      	mov	r1, r4
 80067e8:	4681      	mov	r9, r0
 80067ea:	f000 fb65 	bl	8006eb8 <__mcmp>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	dc03      	bgt.n	80067fa <_dtoa_r+0xa52>
 80067f2:	d1e1      	bne.n	80067b8 <_dtoa_r+0xa10>
 80067f4:	f018 0f01 	tst.w	r8, #1
 80067f8:	d0de      	beq.n	80067b8 <_dtoa_r+0xa10>
 80067fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067fe:	d1d8      	bne.n	80067b2 <_dtoa_r+0xa0a>
 8006800:	9a00      	ldr	r2, [sp, #0]
 8006802:	2339      	movs	r3, #57	@ 0x39
 8006804:	7013      	strb	r3, [r2, #0]
 8006806:	4633      	mov	r3, r6
 8006808:	461e      	mov	r6, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006810:	2a39      	cmp	r2, #57	@ 0x39
 8006812:	d052      	beq.n	80068ba <_dtoa_r+0xb12>
 8006814:	3201      	adds	r2, #1
 8006816:	701a      	strb	r2, [r3, #0]
 8006818:	e612      	b.n	8006440 <_dtoa_r+0x698>
 800681a:	2a00      	cmp	r2, #0
 800681c:	dd07      	ble.n	800682e <_dtoa_r+0xa86>
 800681e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006822:	d0ed      	beq.n	8006800 <_dtoa_r+0xa58>
 8006824:	9a00      	ldr	r2, [sp, #0]
 8006826:	f108 0301 	add.w	r3, r8, #1
 800682a:	7013      	strb	r3, [r2, #0]
 800682c:	e608      	b.n	8006440 <_dtoa_r+0x698>
 800682e:	9b07      	ldr	r3, [sp, #28]
 8006830:	9a07      	ldr	r2, [sp, #28]
 8006832:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006838:	4293      	cmp	r3, r2
 800683a:	d028      	beq.n	800688e <_dtoa_r+0xae6>
 800683c:	4649      	mov	r1, r9
 800683e:	2300      	movs	r3, #0
 8006840:	220a      	movs	r2, #10
 8006842:	4658      	mov	r0, fp
 8006844:	f000 f920 	bl	8006a88 <__multadd>
 8006848:	42af      	cmp	r7, r5
 800684a:	4681      	mov	r9, r0
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	f04f 020a 	mov.w	r2, #10
 8006854:	4639      	mov	r1, r7
 8006856:	4658      	mov	r0, fp
 8006858:	d107      	bne.n	800686a <_dtoa_r+0xac2>
 800685a:	f000 f915 	bl	8006a88 <__multadd>
 800685e:	4607      	mov	r7, r0
 8006860:	4605      	mov	r5, r0
 8006862:	9b07      	ldr	r3, [sp, #28]
 8006864:	3301      	adds	r3, #1
 8006866:	9307      	str	r3, [sp, #28]
 8006868:	e774      	b.n	8006754 <_dtoa_r+0x9ac>
 800686a:	f000 f90d 	bl	8006a88 <__multadd>
 800686e:	4629      	mov	r1, r5
 8006870:	4607      	mov	r7, r0
 8006872:	2300      	movs	r3, #0
 8006874:	220a      	movs	r2, #10
 8006876:	4658      	mov	r0, fp
 8006878:	f000 f906 	bl	8006a88 <__multadd>
 800687c:	4605      	mov	r5, r0
 800687e:	e7f0      	b.n	8006862 <_dtoa_r+0xaba>
 8006880:	9b00      	ldr	r3, [sp, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	bfcc      	ite	gt
 8006886:	461e      	movgt	r6, r3
 8006888:	2601      	movle	r6, #1
 800688a:	4456      	add	r6, sl
 800688c:	2700      	movs	r7, #0
 800688e:	4649      	mov	r1, r9
 8006890:	2201      	movs	r2, #1
 8006892:	4658      	mov	r0, fp
 8006894:	f000 faa4 	bl	8006de0 <__lshift>
 8006898:	4621      	mov	r1, r4
 800689a:	4681      	mov	r9, r0
 800689c:	f000 fb0c 	bl	8006eb8 <__mcmp>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	dcb0      	bgt.n	8006806 <_dtoa_r+0xa5e>
 80068a4:	d102      	bne.n	80068ac <_dtoa_r+0xb04>
 80068a6:	f018 0f01 	tst.w	r8, #1
 80068aa:	d1ac      	bne.n	8006806 <_dtoa_r+0xa5e>
 80068ac:	4633      	mov	r3, r6
 80068ae:	461e      	mov	r6, r3
 80068b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068b4:	2a30      	cmp	r2, #48	@ 0x30
 80068b6:	d0fa      	beq.n	80068ae <_dtoa_r+0xb06>
 80068b8:	e5c2      	b.n	8006440 <_dtoa_r+0x698>
 80068ba:	459a      	cmp	sl, r3
 80068bc:	d1a4      	bne.n	8006808 <_dtoa_r+0xa60>
 80068be:	9b04      	ldr	r3, [sp, #16]
 80068c0:	3301      	adds	r3, #1
 80068c2:	9304      	str	r3, [sp, #16]
 80068c4:	2331      	movs	r3, #49	@ 0x31
 80068c6:	f88a 3000 	strb.w	r3, [sl]
 80068ca:	e5b9      	b.n	8006440 <_dtoa_r+0x698>
 80068cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800692c <_dtoa_r+0xb84>
 80068d2:	b11b      	cbz	r3, 80068dc <_dtoa_r+0xb34>
 80068d4:	f10a 0308 	add.w	r3, sl, #8
 80068d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	4650      	mov	r0, sl
 80068de:	b019      	add	sp, #100	@ 0x64
 80068e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	f77f ae37 	ble.w	800655a <_dtoa_r+0x7b2>
 80068ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80068f0:	2001      	movs	r0, #1
 80068f2:	e655      	b.n	80065a0 <_dtoa_r+0x7f8>
 80068f4:	9b00      	ldr	r3, [sp, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f77f aed6 	ble.w	80066a8 <_dtoa_r+0x900>
 80068fc:	4656      	mov	r6, sl
 80068fe:	4621      	mov	r1, r4
 8006900:	4648      	mov	r0, r9
 8006902:	f7ff f9c6 	bl	8005c92 <quorem>
 8006906:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800690a:	f806 8b01 	strb.w	r8, [r6], #1
 800690e:	9b00      	ldr	r3, [sp, #0]
 8006910:	eba6 020a 	sub.w	r2, r6, sl
 8006914:	4293      	cmp	r3, r2
 8006916:	ddb3      	ble.n	8006880 <_dtoa_r+0xad8>
 8006918:	4649      	mov	r1, r9
 800691a:	2300      	movs	r3, #0
 800691c:	220a      	movs	r2, #10
 800691e:	4658      	mov	r0, fp
 8006920:	f000 f8b2 	bl	8006a88 <__multadd>
 8006924:	4681      	mov	r9, r0
 8006926:	e7ea      	b.n	80068fe <_dtoa_r+0xb56>
 8006928:	08007cc8 	.word	0x08007cc8
 800692c:	08007c4c 	.word	0x08007c4c

08006930 <_free_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4605      	mov	r5, r0
 8006934:	2900      	cmp	r1, #0
 8006936:	d041      	beq.n	80069bc <_free_r+0x8c>
 8006938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800693c:	1f0c      	subs	r4, r1, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	bfb8      	it	lt
 8006942:	18e4      	addlt	r4, r4, r3
 8006944:	f7fe fb80 	bl	8005048 <__malloc_lock>
 8006948:	4a1d      	ldr	r2, [pc, #116]	@ (80069c0 <_free_r+0x90>)
 800694a:	6813      	ldr	r3, [r2, #0]
 800694c:	b933      	cbnz	r3, 800695c <_free_r+0x2c>
 800694e:	6063      	str	r3, [r4, #4]
 8006950:	6014      	str	r4, [r2, #0]
 8006952:	4628      	mov	r0, r5
 8006954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006958:	f7fe bb7c 	b.w	8005054 <__malloc_unlock>
 800695c:	42a3      	cmp	r3, r4
 800695e:	d908      	bls.n	8006972 <_free_r+0x42>
 8006960:	6820      	ldr	r0, [r4, #0]
 8006962:	1821      	adds	r1, r4, r0
 8006964:	428b      	cmp	r3, r1
 8006966:	bf01      	itttt	eq
 8006968:	6819      	ldreq	r1, [r3, #0]
 800696a:	685b      	ldreq	r3, [r3, #4]
 800696c:	1809      	addeq	r1, r1, r0
 800696e:	6021      	streq	r1, [r4, #0]
 8006970:	e7ed      	b.n	800694e <_free_r+0x1e>
 8006972:	461a      	mov	r2, r3
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	b10b      	cbz	r3, 800697c <_free_r+0x4c>
 8006978:	42a3      	cmp	r3, r4
 800697a:	d9fa      	bls.n	8006972 <_free_r+0x42>
 800697c:	6811      	ldr	r1, [r2, #0]
 800697e:	1850      	adds	r0, r2, r1
 8006980:	42a0      	cmp	r0, r4
 8006982:	d10b      	bne.n	800699c <_free_r+0x6c>
 8006984:	6820      	ldr	r0, [r4, #0]
 8006986:	4401      	add	r1, r0
 8006988:	1850      	adds	r0, r2, r1
 800698a:	4283      	cmp	r3, r0
 800698c:	6011      	str	r1, [r2, #0]
 800698e:	d1e0      	bne.n	8006952 <_free_r+0x22>
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	6053      	str	r3, [r2, #4]
 8006996:	4408      	add	r0, r1
 8006998:	6010      	str	r0, [r2, #0]
 800699a:	e7da      	b.n	8006952 <_free_r+0x22>
 800699c:	d902      	bls.n	80069a4 <_free_r+0x74>
 800699e:	230c      	movs	r3, #12
 80069a0:	602b      	str	r3, [r5, #0]
 80069a2:	e7d6      	b.n	8006952 <_free_r+0x22>
 80069a4:	6820      	ldr	r0, [r4, #0]
 80069a6:	1821      	adds	r1, r4, r0
 80069a8:	428b      	cmp	r3, r1
 80069aa:	bf04      	itt	eq
 80069ac:	6819      	ldreq	r1, [r3, #0]
 80069ae:	685b      	ldreq	r3, [r3, #4]
 80069b0:	6063      	str	r3, [r4, #4]
 80069b2:	bf04      	itt	eq
 80069b4:	1809      	addeq	r1, r1, r0
 80069b6:	6021      	streq	r1, [r4, #0]
 80069b8:	6054      	str	r4, [r2, #4]
 80069ba:	e7ca      	b.n	8006952 <_free_r+0x22>
 80069bc:	bd38      	pop	{r3, r4, r5, pc}
 80069be:	bf00      	nop
 80069c0:	2000050c 	.word	0x2000050c

080069c4 <_Balloc>:
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	69c6      	ldr	r6, [r0, #28]
 80069c8:	4604      	mov	r4, r0
 80069ca:	460d      	mov	r5, r1
 80069cc:	b976      	cbnz	r6, 80069ec <_Balloc+0x28>
 80069ce:	2010      	movs	r0, #16
 80069d0:	f7fe fa90 	bl	8004ef4 <malloc>
 80069d4:	4602      	mov	r2, r0
 80069d6:	61e0      	str	r0, [r4, #28]
 80069d8:	b920      	cbnz	r0, 80069e4 <_Balloc+0x20>
 80069da:	4b18      	ldr	r3, [pc, #96]	@ (8006a3c <_Balloc+0x78>)
 80069dc:	4818      	ldr	r0, [pc, #96]	@ (8006a40 <_Balloc+0x7c>)
 80069de:	216b      	movs	r1, #107	@ 0x6b
 80069e0:	f000 fe02 	bl	80075e8 <__assert_func>
 80069e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069e8:	6006      	str	r6, [r0, #0]
 80069ea:	60c6      	str	r6, [r0, #12]
 80069ec:	69e6      	ldr	r6, [r4, #28]
 80069ee:	68f3      	ldr	r3, [r6, #12]
 80069f0:	b183      	cbz	r3, 8006a14 <_Balloc+0x50>
 80069f2:	69e3      	ldr	r3, [r4, #28]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069fa:	b9b8      	cbnz	r0, 8006a2c <_Balloc+0x68>
 80069fc:	2101      	movs	r1, #1
 80069fe:	fa01 f605 	lsl.w	r6, r1, r5
 8006a02:	1d72      	adds	r2, r6, #5
 8006a04:	0092      	lsls	r2, r2, #2
 8006a06:	4620      	mov	r0, r4
 8006a08:	f7fe fa60 	bl	8004ecc <_calloc_r>
 8006a0c:	b160      	cbz	r0, 8006a28 <_Balloc+0x64>
 8006a0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a12:	e00e      	b.n	8006a32 <_Balloc+0x6e>
 8006a14:	2221      	movs	r2, #33	@ 0x21
 8006a16:	2104      	movs	r1, #4
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f7fe fa57 	bl	8004ecc <_calloc_r>
 8006a1e:	69e3      	ldr	r3, [r4, #28]
 8006a20:	60f0      	str	r0, [r6, #12]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e4      	bne.n	80069f2 <_Balloc+0x2e>
 8006a28:	2000      	movs	r0, #0
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	6802      	ldr	r2, [r0, #0]
 8006a2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a32:	2300      	movs	r3, #0
 8006a34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a38:	e7f7      	b.n	8006a2a <_Balloc+0x66>
 8006a3a:	bf00      	nop
 8006a3c:	08007c59 	.word	0x08007c59
 8006a40:	08007cd9 	.word	0x08007cd9

08006a44 <_Bfree>:
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	69c6      	ldr	r6, [r0, #28]
 8006a48:	4605      	mov	r5, r0
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	b976      	cbnz	r6, 8006a6c <_Bfree+0x28>
 8006a4e:	2010      	movs	r0, #16
 8006a50:	f7fe fa50 	bl	8004ef4 <malloc>
 8006a54:	4602      	mov	r2, r0
 8006a56:	61e8      	str	r0, [r5, #28]
 8006a58:	b920      	cbnz	r0, 8006a64 <_Bfree+0x20>
 8006a5a:	4b09      	ldr	r3, [pc, #36]	@ (8006a80 <_Bfree+0x3c>)
 8006a5c:	4809      	ldr	r0, [pc, #36]	@ (8006a84 <_Bfree+0x40>)
 8006a5e:	218f      	movs	r1, #143	@ 0x8f
 8006a60:	f000 fdc2 	bl	80075e8 <__assert_func>
 8006a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a68:	6006      	str	r6, [r0, #0]
 8006a6a:	60c6      	str	r6, [r0, #12]
 8006a6c:	b13c      	cbz	r4, 8006a7e <_Bfree+0x3a>
 8006a6e:	69eb      	ldr	r3, [r5, #28]
 8006a70:	6862      	ldr	r2, [r4, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a78:	6021      	str	r1, [r4, #0]
 8006a7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
 8006a80:	08007c59 	.word	0x08007c59
 8006a84:	08007cd9 	.word	0x08007cd9

08006a88 <__multadd>:
 8006a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a8c:	690d      	ldr	r5, [r1, #16]
 8006a8e:	4607      	mov	r7, r0
 8006a90:	460c      	mov	r4, r1
 8006a92:	461e      	mov	r6, r3
 8006a94:	f101 0c14 	add.w	ip, r1, #20
 8006a98:	2000      	movs	r0, #0
 8006a9a:	f8dc 3000 	ldr.w	r3, [ip]
 8006a9e:	b299      	uxth	r1, r3
 8006aa0:	fb02 6101 	mla	r1, r2, r1, r6
 8006aa4:	0c1e      	lsrs	r6, r3, #16
 8006aa6:	0c0b      	lsrs	r3, r1, #16
 8006aa8:	fb02 3306 	mla	r3, r2, r6, r3
 8006aac:	b289      	uxth	r1, r1
 8006aae:	3001      	adds	r0, #1
 8006ab0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ab4:	4285      	cmp	r5, r0
 8006ab6:	f84c 1b04 	str.w	r1, [ip], #4
 8006aba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006abe:	dcec      	bgt.n	8006a9a <__multadd+0x12>
 8006ac0:	b30e      	cbz	r6, 8006b06 <__multadd+0x7e>
 8006ac2:	68a3      	ldr	r3, [r4, #8]
 8006ac4:	42ab      	cmp	r3, r5
 8006ac6:	dc19      	bgt.n	8006afc <__multadd+0x74>
 8006ac8:	6861      	ldr	r1, [r4, #4]
 8006aca:	4638      	mov	r0, r7
 8006acc:	3101      	adds	r1, #1
 8006ace:	f7ff ff79 	bl	80069c4 <_Balloc>
 8006ad2:	4680      	mov	r8, r0
 8006ad4:	b928      	cbnz	r0, 8006ae2 <__multadd+0x5a>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8006b0c <__multadd+0x84>)
 8006ada:	480d      	ldr	r0, [pc, #52]	@ (8006b10 <__multadd+0x88>)
 8006adc:	21ba      	movs	r1, #186	@ 0xba
 8006ade:	f000 fd83 	bl	80075e8 <__assert_func>
 8006ae2:	6922      	ldr	r2, [r4, #16]
 8006ae4:	3202      	adds	r2, #2
 8006ae6:	f104 010c 	add.w	r1, r4, #12
 8006aea:	0092      	lsls	r2, r2, #2
 8006aec:	300c      	adds	r0, #12
 8006aee:	f000 fd6d 	bl	80075cc <memcpy>
 8006af2:	4621      	mov	r1, r4
 8006af4:	4638      	mov	r0, r7
 8006af6:	f7ff ffa5 	bl	8006a44 <_Bfree>
 8006afa:	4644      	mov	r4, r8
 8006afc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b00:	3501      	adds	r5, #1
 8006b02:	615e      	str	r6, [r3, #20]
 8006b04:	6125      	str	r5, [r4, #16]
 8006b06:	4620      	mov	r0, r4
 8006b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b0c:	08007cc8 	.word	0x08007cc8
 8006b10:	08007cd9 	.word	0x08007cd9

08006b14 <__hi0bits>:
 8006b14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b18:	4603      	mov	r3, r0
 8006b1a:	bf36      	itet	cc
 8006b1c:	0403      	lslcc	r3, r0, #16
 8006b1e:	2000      	movcs	r0, #0
 8006b20:	2010      	movcc	r0, #16
 8006b22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b26:	bf3c      	itt	cc
 8006b28:	021b      	lslcc	r3, r3, #8
 8006b2a:	3008      	addcc	r0, #8
 8006b2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b30:	bf3c      	itt	cc
 8006b32:	011b      	lslcc	r3, r3, #4
 8006b34:	3004      	addcc	r0, #4
 8006b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b3a:	bf3c      	itt	cc
 8006b3c:	009b      	lslcc	r3, r3, #2
 8006b3e:	3002      	addcc	r0, #2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	db05      	blt.n	8006b50 <__hi0bits+0x3c>
 8006b44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b48:	f100 0001 	add.w	r0, r0, #1
 8006b4c:	bf08      	it	eq
 8006b4e:	2020      	moveq	r0, #32
 8006b50:	4770      	bx	lr

08006b52 <__lo0bits>:
 8006b52:	6803      	ldr	r3, [r0, #0]
 8006b54:	4602      	mov	r2, r0
 8006b56:	f013 0007 	ands.w	r0, r3, #7
 8006b5a:	d00b      	beq.n	8006b74 <__lo0bits+0x22>
 8006b5c:	07d9      	lsls	r1, r3, #31
 8006b5e:	d421      	bmi.n	8006ba4 <__lo0bits+0x52>
 8006b60:	0798      	lsls	r0, r3, #30
 8006b62:	bf49      	itett	mi
 8006b64:	085b      	lsrmi	r3, r3, #1
 8006b66:	089b      	lsrpl	r3, r3, #2
 8006b68:	2001      	movmi	r0, #1
 8006b6a:	6013      	strmi	r3, [r2, #0]
 8006b6c:	bf5c      	itt	pl
 8006b6e:	6013      	strpl	r3, [r2, #0]
 8006b70:	2002      	movpl	r0, #2
 8006b72:	4770      	bx	lr
 8006b74:	b299      	uxth	r1, r3
 8006b76:	b909      	cbnz	r1, 8006b7c <__lo0bits+0x2a>
 8006b78:	0c1b      	lsrs	r3, r3, #16
 8006b7a:	2010      	movs	r0, #16
 8006b7c:	b2d9      	uxtb	r1, r3
 8006b7e:	b909      	cbnz	r1, 8006b84 <__lo0bits+0x32>
 8006b80:	3008      	adds	r0, #8
 8006b82:	0a1b      	lsrs	r3, r3, #8
 8006b84:	0719      	lsls	r1, r3, #28
 8006b86:	bf04      	itt	eq
 8006b88:	091b      	lsreq	r3, r3, #4
 8006b8a:	3004      	addeq	r0, #4
 8006b8c:	0799      	lsls	r1, r3, #30
 8006b8e:	bf04      	itt	eq
 8006b90:	089b      	lsreq	r3, r3, #2
 8006b92:	3002      	addeq	r0, #2
 8006b94:	07d9      	lsls	r1, r3, #31
 8006b96:	d403      	bmi.n	8006ba0 <__lo0bits+0x4e>
 8006b98:	085b      	lsrs	r3, r3, #1
 8006b9a:	f100 0001 	add.w	r0, r0, #1
 8006b9e:	d003      	beq.n	8006ba8 <__lo0bits+0x56>
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	4770      	bx	lr
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	4770      	bx	lr
 8006ba8:	2020      	movs	r0, #32
 8006baa:	4770      	bx	lr

08006bac <__i2b>:
 8006bac:	b510      	push	{r4, lr}
 8006bae:	460c      	mov	r4, r1
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	f7ff ff07 	bl	80069c4 <_Balloc>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	b928      	cbnz	r0, 8006bc6 <__i2b+0x1a>
 8006bba:	4b05      	ldr	r3, [pc, #20]	@ (8006bd0 <__i2b+0x24>)
 8006bbc:	4805      	ldr	r0, [pc, #20]	@ (8006bd4 <__i2b+0x28>)
 8006bbe:	f240 1145 	movw	r1, #325	@ 0x145
 8006bc2:	f000 fd11 	bl	80075e8 <__assert_func>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	6144      	str	r4, [r0, #20]
 8006bca:	6103      	str	r3, [r0, #16]
 8006bcc:	bd10      	pop	{r4, pc}
 8006bce:	bf00      	nop
 8006bd0:	08007cc8 	.word	0x08007cc8
 8006bd4:	08007cd9 	.word	0x08007cd9

08006bd8 <__multiply>:
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	4614      	mov	r4, r2
 8006bde:	690a      	ldr	r2, [r1, #16]
 8006be0:	6923      	ldr	r3, [r4, #16]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	bfa8      	it	ge
 8006be6:	4623      	movge	r3, r4
 8006be8:	460f      	mov	r7, r1
 8006bea:	bfa4      	itt	ge
 8006bec:	460c      	movge	r4, r1
 8006bee:	461f      	movge	r7, r3
 8006bf0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006bf4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006bf8:	68a3      	ldr	r3, [r4, #8]
 8006bfa:	6861      	ldr	r1, [r4, #4]
 8006bfc:	eb0a 0609 	add.w	r6, sl, r9
 8006c00:	42b3      	cmp	r3, r6
 8006c02:	b085      	sub	sp, #20
 8006c04:	bfb8      	it	lt
 8006c06:	3101      	addlt	r1, #1
 8006c08:	f7ff fedc 	bl	80069c4 <_Balloc>
 8006c0c:	b930      	cbnz	r0, 8006c1c <__multiply+0x44>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	4b44      	ldr	r3, [pc, #272]	@ (8006d24 <__multiply+0x14c>)
 8006c12:	4845      	ldr	r0, [pc, #276]	@ (8006d28 <__multiply+0x150>)
 8006c14:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c18:	f000 fce6 	bl	80075e8 <__assert_func>
 8006c1c:	f100 0514 	add.w	r5, r0, #20
 8006c20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c24:	462b      	mov	r3, r5
 8006c26:	2200      	movs	r2, #0
 8006c28:	4543      	cmp	r3, r8
 8006c2a:	d321      	bcc.n	8006c70 <__multiply+0x98>
 8006c2c:	f107 0114 	add.w	r1, r7, #20
 8006c30:	f104 0214 	add.w	r2, r4, #20
 8006c34:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c38:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c3c:	9302      	str	r3, [sp, #8]
 8006c3e:	1b13      	subs	r3, r2, r4
 8006c40:	3b15      	subs	r3, #21
 8006c42:	f023 0303 	bic.w	r3, r3, #3
 8006c46:	3304      	adds	r3, #4
 8006c48:	f104 0715 	add.w	r7, r4, #21
 8006c4c:	42ba      	cmp	r2, r7
 8006c4e:	bf38      	it	cc
 8006c50:	2304      	movcc	r3, #4
 8006c52:	9301      	str	r3, [sp, #4]
 8006c54:	9b02      	ldr	r3, [sp, #8]
 8006c56:	9103      	str	r1, [sp, #12]
 8006c58:	428b      	cmp	r3, r1
 8006c5a:	d80c      	bhi.n	8006c76 <__multiply+0x9e>
 8006c5c:	2e00      	cmp	r6, #0
 8006c5e:	dd03      	ble.n	8006c68 <__multiply+0x90>
 8006c60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d05b      	beq.n	8006d20 <__multiply+0x148>
 8006c68:	6106      	str	r6, [r0, #16]
 8006c6a:	b005      	add	sp, #20
 8006c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c70:	f843 2b04 	str.w	r2, [r3], #4
 8006c74:	e7d8      	b.n	8006c28 <__multiply+0x50>
 8006c76:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c7a:	f1ba 0f00 	cmp.w	sl, #0
 8006c7e:	d024      	beq.n	8006cca <__multiply+0xf2>
 8006c80:	f104 0e14 	add.w	lr, r4, #20
 8006c84:	46a9      	mov	r9, r5
 8006c86:	f04f 0c00 	mov.w	ip, #0
 8006c8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c8e:	f8d9 3000 	ldr.w	r3, [r9]
 8006c92:	fa1f fb87 	uxth.w	fp, r7
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c9c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006ca0:	f8d9 7000 	ldr.w	r7, [r9]
 8006ca4:	4463      	add	r3, ip
 8006ca6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006caa:	fb0a c70b 	mla	r7, sl, fp, ip
 8006cae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cb8:	4572      	cmp	r2, lr
 8006cba:	f849 3b04 	str.w	r3, [r9], #4
 8006cbe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006cc2:	d8e2      	bhi.n	8006c8a <__multiply+0xb2>
 8006cc4:	9b01      	ldr	r3, [sp, #4]
 8006cc6:	f845 c003 	str.w	ip, [r5, r3]
 8006cca:	9b03      	ldr	r3, [sp, #12]
 8006ccc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cd0:	3104      	adds	r1, #4
 8006cd2:	f1b9 0f00 	cmp.w	r9, #0
 8006cd6:	d021      	beq.n	8006d1c <__multiply+0x144>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	f104 0c14 	add.w	ip, r4, #20
 8006cde:	46ae      	mov	lr, r5
 8006ce0:	f04f 0a00 	mov.w	sl, #0
 8006ce4:	f8bc b000 	ldrh.w	fp, [ip]
 8006ce8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006cec:	fb09 770b 	mla	r7, r9, fp, r7
 8006cf0:	4457      	add	r7, sl
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cf8:	f84e 3b04 	str.w	r3, [lr], #4
 8006cfc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d04:	f8be 3000 	ldrh.w	r3, [lr]
 8006d08:	fb09 330a 	mla	r3, r9, sl, r3
 8006d0c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d10:	4562      	cmp	r2, ip
 8006d12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d16:	d8e5      	bhi.n	8006ce4 <__multiply+0x10c>
 8006d18:	9f01      	ldr	r7, [sp, #4]
 8006d1a:	51eb      	str	r3, [r5, r7]
 8006d1c:	3504      	adds	r5, #4
 8006d1e:	e799      	b.n	8006c54 <__multiply+0x7c>
 8006d20:	3e01      	subs	r6, #1
 8006d22:	e79b      	b.n	8006c5c <__multiply+0x84>
 8006d24:	08007cc8 	.word	0x08007cc8
 8006d28:	08007cd9 	.word	0x08007cd9

08006d2c <__pow5mult>:
 8006d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d30:	4615      	mov	r5, r2
 8006d32:	f012 0203 	ands.w	r2, r2, #3
 8006d36:	4607      	mov	r7, r0
 8006d38:	460e      	mov	r6, r1
 8006d3a:	d007      	beq.n	8006d4c <__pow5mult+0x20>
 8006d3c:	4c25      	ldr	r4, [pc, #148]	@ (8006dd4 <__pow5mult+0xa8>)
 8006d3e:	3a01      	subs	r2, #1
 8006d40:	2300      	movs	r3, #0
 8006d42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d46:	f7ff fe9f 	bl	8006a88 <__multadd>
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	10ad      	asrs	r5, r5, #2
 8006d4e:	d03d      	beq.n	8006dcc <__pow5mult+0xa0>
 8006d50:	69fc      	ldr	r4, [r7, #28]
 8006d52:	b97c      	cbnz	r4, 8006d74 <__pow5mult+0x48>
 8006d54:	2010      	movs	r0, #16
 8006d56:	f7fe f8cd 	bl	8004ef4 <malloc>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	61f8      	str	r0, [r7, #28]
 8006d5e:	b928      	cbnz	r0, 8006d6c <__pow5mult+0x40>
 8006d60:	4b1d      	ldr	r3, [pc, #116]	@ (8006dd8 <__pow5mult+0xac>)
 8006d62:	481e      	ldr	r0, [pc, #120]	@ (8006ddc <__pow5mult+0xb0>)
 8006d64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d68:	f000 fc3e 	bl	80075e8 <__assert_func>
 8006d6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d70:	6004      	str	r4, [r0, #0]
 8006d72:	60c4      	str	r4, [r0, #12]
 8006d74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d7c:	b94c      	cbnz	r4, 8006d92 <__pow5mult+0x66>
 8006d7e:	f240 2171 	movw	r1, #625	@ 0x271
 8006d82:	4638      	mov	r0, r7
 8006d84:	f7ff ff12 	bl	8006bac <__i2b>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d8e:	4604      	mov	r4, r0
 8006d90:	6003      	str	r3, [r0, #0]
 8006d92:	f04f 0900 	mov.w	r9, #0
 8006d96:	07eb      	lsls	r3, r5, #31
 8006d98:	d50a      	bpl.n	8006db0 <__pow5mult+0x84>
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4622      	mov	r2, r4
 8006d9e:	4638      	mov	r0, r7
 8006da0:	f7ff ff1a 	bl	8006bd8 <__multiply>
 8006da4:	4631      	mov	r1, r6
 8006da6:	4680      	mov	r8, r0
 8006da8:	4638      	mov	r0, r7
 8006daa:	f7ff fe4b 	bl	8006a44 <_Bfree>
 8006dae:	4646      	mov	r6, r8
 8006db0:	106d      	asrs	r5, r5, #1
 8006db2:	d00b      	beq.n	8006dcc <__pow5mult+0xa0>
 8006db4:	6820      	ldr	r0, [r4, #0]
 8006db6:	b938      	cbnz	r0, 8006dc8 <__pow5mult+0x9c>
 8006db8:	4622      	mov	r2, r4
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	f7ff ff0b 	bl	8006bd8 <__multiply>
 8006dc2:	6020      	str	r0, [r4, #0]
 8006dc4:	f8c0 9000 	str.w	r9, [r0]
 8006dc8:	4604      	mov	r4, r0
 8006dca:	e7e4      	b.n	8006d96 <__pow5mult+0x6a>
 8006dcc:	4630      	mov	r0, r6
 8006dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd2:	bf00      	nop
 8006dd4:	08007d34 	.word	0x08007d34
 8006dd8:	08007c59 	.word	0x08007c59
 8006ddc:	08007cd9 	.word	0x08007cd9

08006de0 <__lshift>:
 8006de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de4:	460c      	mov	r4, r1
 8006de6:	6849      	ldr	r1, [r1, #4]
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dee:	68a3      	ldr	r3, [r4, #8]
 8006df0:	4607      	mov	r7, r0
 8006df2:	4691      	mov	r9, r2
 8006df4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006df8:	f108 0601 	add.w	r6, r8, #1
 8006dfc:	42b3      	cmp	r3, r6
 8006dfe:	db0b      	blt.n	8006e18 <__lshift+0x38>
 8006e00:	4638      	mov	r0, r7
 8006e02:	f7ff fddf 	bl	80069c4 <_Balloc>
 8006e06:	4605      	mov	r5, r0
 8006e08:	b948      	cbnz	r0, 8006e1e <__lshift+0x3e>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	4b28      	ldr	r3, [pc, #160]	@ (8006eb0 <__lshift+0xd0>)
 8006e0e:	4829      	ldr	r0, [pc, #164]	@ (8006eb4 <__lshift+0xd4>)
 8006e10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e14:	f000 fbe8 	bl	80075e8 <__assert_func>
 8006e18:	3101      	adds	r1, #1
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	e7ee      	b.n	8006dfc <__lshift+0x1c>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f100 0114 	add.w	r1, r0, #20
 8006e24:	f100 0210 	add.w	r2, r0, #16
 8006e28:	4618      	mov	r0, r3
 8006e2a:	4553      	cmp	r3, sl
 8006e2c:	db33      	blt.n	8006e96 <__lshift+0xb6>
 8006e2e:	6920      	ldr	r0, [r4, #16]
 8006e30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e34:	f104 0314 	add.w	r3, r4, #20
 8006e38:	f019 091f 	ands.w	r9, r9, #31
 8006e3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e44:	d02b      	beq.n	8006e9e <__lshift+0xbe>
 8006e46:	f1c9 0e20 	rsb	lr, r9, #32
 8006e4a:	468a      	mov	sl, r1
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	fa00 f009 	lsl.w	r0, r0, r9
 8006e54:	4310      	orrs	r0, r2
 8006e56:	f84a 0b04 	str.w	r0, [sl], #4
 8006e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e5e:	459c      	cmp	ip, r3
 8006e60:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e64:	d8f3      	bhi.n	8006e4e <__lshift+0x6e>
 8006e66:	ebac 0304 	sub.w	r3, ip, r4
 8006e6a:	3b15      	subs	r3, #21
 8006e6c:	f023 0303 	bic.w	r3, r3, #3
 8006e70:	3304      	adds	r3, #4
 8006e72:	f104 0015 	add.w	r0, r4, #21
 8006e76:	4584      	cmp	ip, r0
 8006e78:	bf38      	it	cc
 8006e7a:	2304      	movcc	r3, #4
 8006e7c:	50ca      	str	r2, [r1, r3]
 8006e7e:	b10a      	cbz	r2, 8006e84 <__lshift+0xa4>
 8006e80:	f108 0602 	add.w	r6, r8, #2
 8006e84:	3e01      	subs	r6, #1
 8006e86:	4638      	mov	r0, r7
 8006e88:	612e      	str	r6, [r5, #16]
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	f7ff fdda 	bl	8006a44 <_Bfree>
 8006e90:	4628      	mov	r0, r5
 8006e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e96:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	e7c5      	b.n	8006e2a <__lshift+0x4a>
 8006e9e:	3904      	subs	r1, #4
 8006ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ea8:	459c      	cmp	ip, r3
 8006eaa:	d8f9      	bhi.n	8006ea0 <__lshift+0xc0>
 8006eac:	e7ea      	b.n	8006e84 <__lshift+0xa4>
 8006eae:	bf00      	nop
 8006eb0:	08007cc8 	.word	0x08007cc8
 8006eb4:	08007cd9 	.word	0x08007cd9

08006eb8 <__mcmp>:
 8006eb8:	690a      	ldr	r2, [r1, #16]
 8006eba:	4603      	mov	r3, r0
 8006ebc:	6900      	ldr	r0, [r0, #16]
 8006ebe:	1a80      	subs	r0, r0, r2
 8006ec0:	b530      	push	{r4, r5, lr}
 8006ec2:	d10e      	bne.n	8006ee2 <__mcmp+0x2a>
 8006ec4:	3314      	adds	r3, #20
 8006ec6:	3114      	adds	r1, #20
 8006ec8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ecc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ed0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ed4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ed8:	4295      	cmp	r5, r2
 8006eda:	d003      	beq.n	8006ee4 <__mcmp+0x2c>
 8006edc:	d205      	bcs.n	8006eea <__mcmp+0x32>
 8006ede:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee2:	bd30      	pop	{r4, r5, pc}
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	d3f3      	bcc.n	8006ed0 <__mcmp+0x18>
 8006ee8:	e7fb      	b.n	8006ee2 <__mcmp+0x2a>
 8006eea:	2001      	movs	r0, #1
 8006eec:	e7f9      	b.n	8006ee2 <__mcmp+0x2a>
	...

08006ef0 <__mdiff>:
 8006ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	4689      	mov	r9, r1
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	4611      	mov	r1, r2
 8006efa:	4648      	mov	r0, r9
 8006efc:	4614      	mov	r4, r2
 8006efe:	f7ff ffdb 	bl	8006eb8 <__mcmp>
 8006f02:	1e05      	subs	r5, r0, #0
 8006f04:	d112      	bne.n	8006f2c <__mdiff+0x3c>
 8006f06:	4629      	mov	r1, r5
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f7ff fd5b 	bl	80069c4 <_Balloc>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	b928      	cbnz	r0, 8006f1e <__mdiff+0x2e>
 8006f12:	4b3f      	ldr	r3, [pc, #252]	@ (8007010 <__mdiff+0x120>)
 8006f14:	f240 2137 	movw	r1, #567	@ 0x237
 8006f18:	483e      	ldr	r0, [pc, #248]	@ (8007014 <__mdiff+0x124>)
 8006f1a:	f000 fb65 	bl	80075e8 <__assert_func>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f24:	4610      	mov	r0, r2
 8006f26:	b003      	add	sp, #12
 8006f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f2c:	bfbc      	itt	lt
 8006f2e:	464b      	movlt	r3, r9
 8006f30:	46a1      	movlt	r9, r4
 8006f32:	4630      	mov	r0, r6
 8006f34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f38:	bfba      	itte	lt
 8006f3a:	461c      	movlt	r4, r3
 8006f3c:	2501      	movlt	r5, #1
 8006f3e:	2500      	movge	r5, #0
 8006f40:	f7ff fd40 	bl	80069c4 <_Balloc>
 8006f44:	4602      	mov	r2, r0
 8006f46:	b918      	cbnz	r0, 8006f50 <__mdiff+0x60>
 8006f48:	4b31      	ldr	r3, [pc, #196]	@ (8007010 <__mdiff+0x120>)
 8006f4a:	f240 2145 	movw	r1, #581	@ 0x245
 8006f4e:	e7e3      	b.n	8006f18 <__mdiff+0x28>
 8006f50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f54:	6926      	ldr	r6, [r4, #16]
 8006f56:	60c5      	str	r5, [r0, #12]
 8006f58:	f109 0310 	add.w	r3, r9, #16
 8006f5c:	f109 0514 	add.w	r5, r9, #20
 8006f60:	f104 0e14 	add.w	lr, r4, #20
 8006f64:	f100 0b14 	add.w	fp, r0, #20
 8006f68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	46d9      	mov	r9, fp
 8006f74:	f04f 0c00 	mov.w	ip, #0
 8006f78:	9b01      	ldr	r3, [sp, #4]
 8006f7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	fa1f f38a 	uxth.w	r3, sl
 8006f88:	4619      	mov	r1, r3
 8006f8a:	b283      	uxth	r3, r0
 8006f8c:	1acb      	subs	r3, r1, r3
 8006f8e:	0c00      	lsrs	r0, r0, #16
 8006f90:	4463      	add	r3, ip
 8006f92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006fa0:	4576      	cmp	r6, lr
 8006fa2:	f849 3b04 	str.w	r3, [r9], #4
 8006fa6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006faa:	d8e5      	bhi.n	8006f78 <__mdiff+0x88>
 8006fac:	1b33      	subs	r3, r6, r4
 8006fae:	3b15      	subs	r3, #21
 8006fb0:	f023 0303 	bic.w	r3, r3, #3
 8006fb4:	3415      	adds	r4, #21
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	42a6      	cmp	r6, r4
 8006fba:	bf38      	it	cc
 8006fbc:	2304      	movcc	r3, #4
 8006fbe:	441d      	add	r5, r3
 8006fc0:	445b      	add	r3, fp
 8006fc2:	461e      	mov	r6, r3
 8006fc4:	462c      	mov	r4, r5
 8006fc6:	4544      	cmp	r4, r8
 8006fc8:	d30e      	bcc.n	8006fe8 <__mdiff+0xf8>
 8006fca:	f108 0103 	add.w	r1, r8, #3
 8006fce:	1b49      	subs	r1, r1, r5
 8006fd0:	f021 0103 	bic.w	r1, r1, #3
 8006fd4:	3d03      	subs	r5, #3
 8006fd6:	45a8      	cmp	r8, r5
 8006fd8:	bf38      	it	cc
 8006fda:	2100      	movcc	r1, #0
 8006fdc:	440b      	add	r3, r1
 8006fde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fe2:	b191      	cbz	r1, 800700a <__mdiff+0x11a>
 8006fe4:	6117      	str	r7, [r2, #16]
 8006fe6:	e79d      	b.n	8006f24 <__mdiff+0x34>
 8006fe8:	f854 1b04 	ldr.w	r1, [r4], #4
 8006fec:	46e6      	mov	lr, ip
 8006fee:	0c08      	lsrs	r0, r1, #16
 8006ff0:	fa1c fc81 	uxtah	ip, ip, r1
 8006ff4:	4471      	add	r1, lr
 8006ff6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ffa:	b289      	uxth	r1, r1
 8006ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007000:	f846 1b04 	str.w	r1, [r6], #4
 8007004:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007008:	e7dd      	b.n	8006fc6 <__mdiff+0xd6>
 800700a:	3f01      	subs	r7, #1
 800700c:	e7e7      	b.n	8006fde <__mdiff+0xee>
 800700e:	bf00      	nop
 8007010:	08007cc8 	.word	0x08007cc8
 8007014:	08007cd9 	.word	0x08007cd9

08007018 <__d2b>:
 8007018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800701c:	460f      	mov	r7, r1
 800701e:	2101      	movs	r1, #1
 8007020:	ec59 8b10 	vmov	r8, r9, d0
 8007024:	4616      	mov	r6, r2
 8007026:	f7ff fccd 	bl	80069c4 <_Balloc>
 800702a:	4604      	mov	r4, r0
 800702c:	b930      	cbnz	r0, 800703c <__d2b+0x24>
 800702e:	4602      	mov	r2, r0
 8007030:	4b23      	ldr	r3, [pc, #140]	@ (80070c0 <__d2b+0xa8>)
 8007032:	4824      	ldr	r0, [pc, #144]	@ (80070c4 <__d2b+0xac>)
 8007034:	f240 310f 	movw	r1, #783	@ 0x30f
 8007038:	f000 fad6 	bl	80075e8 <__assert_func>
 800703c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007044:	b10d      	cbz	r5, 800704a <__d2b+0x32>
 8007046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800704a:	9301      	str	r3, [sp, #4]
 800704c:	f1b8 0300 	subs.w	r3, r8, #0
 8007050:	d023      	beq.n	800709a <__d2b+0x82>
 8007052:	4668      	mov	r0, sp
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	f7ff fd7c 	bl	8006b52 <__lo0bits>
 800705a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800705e:	b1d0      	cbz	r0, 8007096 <__d2b+0x7e>
 8007060:	f1c0 0320 	rsb	r3, r0, #32
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	430b      	orrs	r3, r1
 800706a:	40c2      	lsrs	r2, r0
 800706c:	6163      	str	r3, [r4, #20]
 800706e:	9201      	str	r2, [sp, #4]
 8007070:	9b01      	ldr	r3, [sp, #4]
 8007072:	61a3      	str	r3, [r4, #24]
 8007074:	2b00      	cmp	r3, #0
 8007076:	bf0c      	ite	eq
 8007078:	2201      	moveq	r2, #1
 800707a:	2202      	movne	r2, #2
 800707c:	6122      	str	r2, [r4, #16]
 800707e:	b1a5      	cbz	r5, 80070aa <__d2b+0x92>
 8007080:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007084:	4405      	add	r5, r0
 8007086:	603d      	str	r5, [r7, #0]
 8007088:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800708c:	6030      	str	r0, [r6, #0]
 800708e:	4620      	mov	r0, r4
 8007090:	b003      	add	sp, #12
 8007092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007096:	6161      	str	r1, [r4, #20]
 8007098:	e7ea      	b.n	8007070 <__d2b+0x58>
 800709a:	a801      	add	r0, sp, #4
 800709c:	f7ff fd59 	bl	8006b52 <__lo0bits>
 80070a0:	9b01      	ldr	r3, [sp, #4]
 80070a2:	6163      	str	r3, [r4, #20]
 80070a4:	3020      	adds	r0, #32
 80070a6:	2201      	movs	r2, #1
 80070a8:	e7e8      	b.n	800707c <__d2b+0x64>
 80070aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80070b2:	6038      	str	r0, [r7, #0]
 80070b4:	6918      	ldr	r0, [r3, #16]
 80070b6:	f7ff fd2d 	bl	8006b14 <__hi0bits>
 80070ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070be:	e7e5      	b.n	800708c <__d2b+0x74>
 80070c0:	08007cc8 	.word	0x08007cc8
 80070c4:	08007cd9 	.word	0x08007cd9

080070c8 <__sfputc_r>:
 80070c8:	6893      	ldr	r3, [r2, #8]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	b410      	push	{r4}
 80070d0:	6093      	str	r3, [r2, #8]
 80070d2:	da08      	bge.n	80070e6 <__sfputc_r+0x1e>
 80070d4:	6994      	ldr	r4, [r2, #24]
 80070d6:	42a3      	cmp	r3, r4
 80070d8:	db01      	blt.n	80070de <__sfputc_r+0x16>
 80070da:	290a      	cmp	r1, #10
 80070dc:	d103      	bne.n	80070e6 <__sfputc_r+0x1e>
 80070de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070e2:	f000 b9df 	b.w	80074a4 <__swbuf_r>
 80070e6:	6813      	ldr	r3, [r2, #0]
 80070e8:	1c58      	adds	r0, r3, #1
 80070ea:	6010      	str	r0, [r2, #0]
 80070ec:	7019      	strb	r1, [r3, #0]
 80070ee:	4608      	mov	r0, r1
 80070f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <__sfputs_r>:
 80070f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f8:	4606      	mov	r6, r0
 80070fa:	460f      	mov	r7, r1
 80070fc:	4614      	mov	r4, r2
 80070fe:	18d5      	adds	r5, r2, r3
 8007100:	42ac      	cmp	r4, r5
 8007102:	d101      	bne.n	8007108 <__sfputs_r+0x12>
 8007104:	2000      	movs	r0, #0
 8007106:	e007      	b.n	8007118 <__sfputs_r+0x22>
 8007108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800710c:	463a      	mov	r2, r7
 800710e:	4630      	mov	r0, r6
 8007110:	f7ff ffda 	bl	80070c8 <__sfputc_r>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	d1f3      	bne.n	8007100 <__sfputs_r+0xa>
 8007118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800711c <_vfiprintf_r>:
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	460d      	mov	r5, r1
 8007122:	b09d      	sub	sp, #116	@ 0x74
 8007124:	4614      	mov	r4, r2
 8007126:	4698      	mov	r8, r3
 8007128:	4606      	mov	r6, r0
 800712a:	b118      	cbz	r0, 8007134 <_vfiprintf_r+0x18>
 800712c:	6a03      	ldr	r3, [r0, #32]
 800712e:	b90b      	cbnz	r3, 8007134 <_vfiprintf_r+0x18>
 8007130:	f7fe fc7a 	bl	8005a28 <__sinit>
 8007134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007136:	07d9      	lsls	r1, r3, #31
 8007138:	d405      	bmi.n	8007146 <_vfiprintf_r+0x2a>
 800713a:	89ab      	ldrh	r3, [r5, #12]
 800713c:	059a      	lsls	r2, r3, #22
 800713e:	d402      	bmi.n	8007146 <_vfiprintf_r+0x2a>
 8007140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007142:	f7fe fda4 	bl	8005c8e <__retarget_lock_acquire_recursive>
 8007146:	89ab      	ldrh	r3, [r5, #12]
 8007148:	071b      	lsls	r3, r3, #28
 800714a:	d501      	bpl.n	8007150 <_vfiprintf_r+0x34>
 800714c:	692b      	ldr	r3, [r5, #16]
 800714e:	b99b      	cbnz	r3, 8007178 <_vfiprintf_r+0x5c>
 8007150:	4629      	mov	r1, r5
 8007152:	4630      	mov	r0, r6
 8007154:	f000 f9e4 	bl	8007520 <__swsetup_r>
 8007158:	b170      	cbz	r0, 8007178 <_vfiprintf_r+0x5c>
 800715a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800715c:	07dc      	lsls	r4, r3, #31
 800715e:	d504      	bpl.n	800716a <_vfiprintf_r+0x4e>
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
 8007164:	b01d      	add	sp, #116	@ 0x74
 8007166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716a:	89ab      	ldrh	r3, [r5, #12]
 800716c:	0598      	lsls	r0, r3, #22
 800716e:	d4f7      	bmi.n	8007160 <_vfiprintf_r+0x44>
 8007170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007172:	f7fe fd8d 	bl	8005c90 <__retarget_lock_release_recursive>
 8007176:	e7f3      	b.n	8007160 <_vfiprintf_r+0x44>
 8007178:	2300      	movs	r3, #0
 800717a:	9309      	str	r3, [sp, #36]	@ 0x24
 800717c:	2320      	movs	r3, #32
 800717e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007182:	f8cd 800c 	str.w	r8, [sp, #12]
 8007186:	2330      	movs	r3, #48	@ 0x30
 8007188:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007338 <_vfiprintf_r+0x21c>
 800718c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007190:	f04f 0901 	mov.w	r9, #1
 8007194:	4623      	mov	r3, r4
 8007196:	469a      	mov	sl, r3
 8007198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800719c:	b10a      	cbz	r2, 80071a2 <_vfiprintf_r+0x86>
 800719e:	2a25      	cmp	r2, #37	@ 0x25
 80071a0:	d1f9      	bne.n	8007196 <_vfiprintf_r+0x7a>
 80071a2:	ebba 0b04 	subs.w	fp, sl, r4
 80071a6:	d00b      	beq.n	80071c0 <_vfiprintf_r+0xa4>
 80071a8:	465b      	mov	r3, fp
 80071aa:	4622      	mov	r2, r4
 80071ac:	4629      	mov	r1, r5
 80071ae:	4630      	mov	r0, r6
 80071b0:	f7ff ffa1 	bl	80070f6 <__sfputs_r>
 80071b4:	3001      	adds	r0, #1
 80071b6:	f000 80a7 	beq.w	8007308 <_vfiprintf_r+0x1ec>
 80071ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071bc:	445a      	add	r2, fp
 80071be:	9209      	str	r2, [sp, #36]	@ 0x24
 80071c0:	f89a 3000 	ldrb.w	r3, [sl]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 809f 	beq.w	8007308 <_vfiprintf_r+0x1ec>
 80071ca:	2300      	movs	r3, #0
 80071cc:	f04f 32ff 	mov.w	r2, #4294967295
 80071d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071d4:	f10a 0a01 	add.w	sl, sl, #1
 80071d8:	9304      	str	r3, [sp, #16]
 80071da:	9307      	str	r3, [sp, #28]
 80071dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80071e2:	4654      	mov	r4, sl
 80071e4:	2205      	movs	r2, #5
 80071e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ea:	4853      	ldr	r0, [pc, #332]	@ (8007338 <_vfiprintf_r+0x21c>)
 80071ec:	f7f8 fff8 	bl	80001e0 <memchr>
 80071f0:	9a04      	ldr	r2, [sp, #16]
 80071f2:	b9d8      	cbnz	r0, 800722c <_vfiprintf_r+0x110>
 80071f4:	06d1      	lsls	r1, r2, #27
 80071f6:	bf44      	itt	mi
 80071f8:	2320      	movmi	r3, #32
 80071fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071fe:	0713      	lsls	r3, r2, #28
 8007200:	bf44      	itt	mi
 8007202:	232b      	movmi	r3, #43	@ 0x2b
 8007204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007208:	f89a 3000 	ldrb.w	r3, [sl]
 800720c:	2b2a      	cmp	r3, #42	@ 0x2a
 800720e:	d015      	beq.n	800723c <_vfiprintf_r+0x120>
 8007210:	9a07      	ldr	r2, [sp, #28]
 8007212:	4654      	mov	r4, sl
 8007214:	2000      	movs	r0, #0
 8007216:	f04f 0c0a 	mov.w	ip, #10
 800721a:	4621      	mov	r1, r4
 800721c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007220:	3b30      	subs	r3, #48	@ 0x30
 8007222:	2b09      	cmp	r3, #9
 8007224:	d94b      	bls.n	80072be <_vfiprintf_r+0x1a2>
 8007226:	b1b0      	cbz	r0, 8007256 <_vfiprintf_r+0x13a>
 8007228:	9207      	str	r2, [sp, #28]
 800722a:	e014      	b.n	8007256 <_vfiprintf_r+0x13a>
 800722c:	eba0 0308 	sub.w	r3, r0, r8
 8007230:	fa09 f303 	lsl.w	r3, r9, r3
 8007234:	4313      	orrs	r3, r2
 8007236:	9304      	str	r3, [sp, #16]
 8007238:	46a2      	mov	sl, r4
 800723a:	e7d2      	b.n	80071e2 <_vfiprintf_r+0xc6>
 800723c:	9b03      	ldr	r3, [sp, #12]
 800723e:	1d19      	adds	r1, r3, #4
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	9103      	str	r1, [sp, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	bfbb      	ittet	lt
 8007248:	425b      	neglt	r3, r3
 800724a:	f042 0202 	orrlt.w	r2, r2, #2
 800724e:	9307      	strge	r3, [sp, #28]
 8007250:	9307      	strlt	r3, [sp, #28]
 8007252:	bfb8      	it	lt
 8007254:	9204      	strlt	r2, [sp, #16]
 8007256:	7823      	ldrb	r3, [r4, #0]
 8007258:	2b2e      	cmp	r3, #46	@ 0x2e
 800725a:	d10a      	bne.n	8007272 <_vfiprintf_r+0x156>
 800725c:	7863      	ldrb	r3, [r4, #1]
 800725e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007260:	d132      	bne.n	80072c8 <_vfiprintf_r+0x1ac>
 8007262:	9b03      	ldr	r3, [sp, #12]
 8007264:	1d1a      	adds	r2, r3, #4
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	9203      	str	r2, [sp, #12]
 800726a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800726e:	3402      	adds	r4, #2
 8007270:	9305      	str	r3, [sp, #20]
 8007272:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007348 <_vfiprintf_r+0x22c>
 8007276:	7821      	ldrb	r1, [r4, #0]
 8007278:	2203      	movs	r2, #3
 800727a:	4650      	mov	r0, sl
 800727c:	f7f8 ffb0 	bl	80001e0 <memchr>
 8007280:	b138      	cbz	r0, 8007292 <_vfiprintf_r+0x176>
 8007282:	9b04      	ldr	r3, [sp, #16]
 8007284:	eba0 000a 	sub.w	r0, r0, sl
 8007288:	2240      	movs	r2, #64	@ 0x40
 800728a:	4082      	lsls	r2, r0
 800728c:	4313      	orrs	r3, r2
 800728e:	3401      	adds	r4, #1
 8007290:	9304      	str	r3, [sp, #16]
 8007292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007296:	4829      	ldr	r0, [pc, #164]	@ (800733c <_vfiprintf_r+0x220>)
 8007298:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800729c:	2206      	movs	r2, #6
 800729e:	f7f8 ff9f 	bl	80001e0 <memchr>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d03f      	beq.n	8007326 <_vfiprintf_r+0x20a>
 80072a6:	4b26      	ldr	r3, [pc, #152]	@ (8007340 <_vfiprintf_r+0x224>)
 80072a8:	bb1b      	cbnz	r3, 80072f2 <_vfiprintf_r+0x1d6>
 80072aa:	9b03      	ldr	r3, [sp, #12]
 80072ac:	3307      	adds	r3, #7
 80072ae:	f023 0307 	bic.w	r3, r3, #7
 80072b2:	3308      	adds	r3, #8
 80072b4:	9303      	str	r3, [sp, #12]
 80072b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b8:	443b      	add	r3, r7
 80072ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80072bc:	e76a      	b.n	8007194 <_vfiprintf_r+0x78>
 80072be:	fb0c 3202 	mla	r2, ip, r2, r3
 80072c2:	460c      	mov	r4, r1
 80072c4:	2001      	movs	r0, #1
 80072c6:	e7a8      	b.n	800721a <_vfiprintf_r+0xfe>
 80072c8:	2300      	movs	r3, #0
 80072ca:	3401      	adds	r4, #1
 80072cc:	9305      	str	r3, [sp, #20]
 80072ce:	4619      	mov	r1, r3
 80072d0:	f04f 0c0a 	mov.w	ip, #10
 80072d4:	4620      	mov	r0, r4
 80072d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072da:	3a30      	subs	r2, #48	@ 0x30
 80072dc:	2a09      	cmp	r2, #9
 80072de:	d903      	bls.n	80072e8 <_vfiprintf_r+0x1cc>
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0c6      	beq.n	8007272 <_vfiprintf_r+0x156>
 80072e4:	9105      	str	r1, [sp, #20]
 80072e6:	e7c4      	b.n	8007272 <_vfiprintf_r+0x156>
 80072e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80072ec:	4604      	mov	r4, r0
 80072ee:	2301      	movs	r3, #1
 80072f0:	e7f0      	b.n	80072d4 <_vfiprintf_r+0x1b8>
 80072f2:	ab03      	add	r3, sp, #12
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	462a      	mov	r2, r5
 80072f8:	4b12      	ldr	r3, [pc, #72]	@ (8007344 <_vfiprintf_r+0x228>)
 80072fa:	a904      	add	r1, sp, #16
 80072fc:	4630      	mov	r0, r6
 80072fe:	f7fd ff4f 	bl	80051a0 <_printf_float>
 8007302:	4607      	mov	r7, r0
 8007304:	1c78      	adds	r0, r7, #1
 8007306:	d1d6      	bne.n	80072b6 <_vfiprintf_r+0x19a>
 8007308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800730a:	07d9      	lsls	r1, r3, #31
 800730c:	d405      	bmi.n	800731a <_vfiprintf_r+0x1fe>
 800730e:	89ab      	ldrh	r3, [r5, #12]
 8007310:	059a      	lsls	r2, r3, #22
 8007312:	d402      	bmi.n	800731a <_vfiprintf_r+0x1fe>
 8007314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007316:	f7fe fcbb 	bl	8005c90 <__retarget_lock_release_recursive>
 800731a:	89ab      	ldrh	r3, [r5, #12]
 800731c:	065b      	lsls	r3, r3, #25
 800731e:	f53f af1f 	bmi.w	8007160 <_vfiprintf_r+0x44>
 8007322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007324:	e71e      	b.n	8007164 <_vfiprintf_r+0x48>
 8007326:	ab03      	add	r3, sp, #12
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	462a      	mov	r2, r5
 800732c:	4b05      	ldr	r3, [pc, #20]	@ (8007344 <_vfiprintf_r+0x228>)
 800732e:	a904      	add	r1, sp, #16
 8007330:	4630      	mov	r0, r6
 8007332:	f7fe f9cd 	bl	80056d0 <_printf_i>
 8007336:	e7e4      	b.n	8007302 <_vfiprintf_r+0x1e6>
 8007338:	08007e30 	.word	0x08007e30
 800733c:	08007e3a 	.word	0x08007e3a
 8007340:	080051a1 	.word	0x080051a1
 8007344:	080070f7 	.word	0x080070f7
 8007348:	08007e36 	.word	0x08007e36

0800734c <__sflush_r>:
 800734c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007354:	0716      	lsls	r6, r2, #28
 8007356:	4605      	mov	r5, r0
 8007358:	460c      	mov	r4, r1
 800735a:	d454      	bmi.n	8007406 <__sflush_r+0xba>
 800735c:	684b      	ldr	r3, [r1, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	dc02      	bgt.n	8007368 <__sflush_r+0x1c>
 8007362:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	dd48      	ble.n	80073fa <__sflush_r+0xae>
 8007368:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800736a:	2e00      	cmp	r6, #0
 800736c:	d045      	beq.n	80073fa <__sflush_r+0xae>
 800736e:	2300      	movs	r3, #0
 8007370:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007374:	682f      	ldr	r7, [r5, #0]
 8007376:	6a21      	ldr	r1, [r4, #32]
 8007378:	602b      	str	r3, [r5, #0]
 800737a:	d030      	beq.n	80073de <__sflush_r+0x92>
 800737c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	0759      	lsls	r1, r3, #29
 8007382:	d505      	bpl.n	8007390 <__sflush_r+0x44>
 8007384:	6863      	ldr	r3, [r4, #4]
 8007386:	1ad2      	subs	r2, r2, r3
 8007388:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800738a:	b10b      	cbz	r3, 8007390 <__sflush_r+0x44>
 800738c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800738e:	1ad2      	subs	r2, r2, r3
 8007390:	2300      	movs	r3, #0
 8007392:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007394:	6a21      	ldr	r1, [r4, #32]
 8007396:	4628      	mov	r0, r5
 8007398:	47b0      	blx	r6
 800739a:	1c43      	adds	r3, r0, #1
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	d106      	bne.n	80073ae <__sflush_r+0x62>
 80073a0:	6829      	ldr	r1, [r5, #0]
 80073a2:	291d      	cmp	r1, #29
 80073a4:	d82b      	bhi.n	80073fe <__sflush_r+0xb2>
 80073a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007450 <__sflush_r+0x104>)
 80073a8:	410a      	asrs	r2, r1
 80073aa:	07d6      	lsls	r6, r2, #31
 80073ac:	d427      	bmi.n	80073fe <__sflush_r+0xb2>
 80073ae:	2200      	movs	r2, #0
 80073b0:	6062      	str	r2, [r4, #4]
 80073b2:	04d9      	lsls	r1, r3, #19
 80073b4:	6922      	ldr	r2, [r4, #16]
 80073b6:	6022      	str	r2, [r4, #0]
 80073b8:	d504      	bpl.n	80073c4 <__sflush_r+0x78>
 80073ba:	1c42      	adds	r2, r0, #1
 80073bc:	d101      	bne.n	80073c2 <__sflush_r+0x76>
 80073be:	682b      	ldr	r3, [r5, #0]
 80073c0:	b903      	cbnz	r3, 80073c4 <__sflush_r+0x78>
 80073c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80073c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073c6:	602f      	str	r7, [r5, #0]
 80073c8:	b1b9      	cbz	r1, 80073fa <__sflush_r+0xae>
 80073ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073ce:	4299      	cmp	r1, r3
 80073d0:	d002      	beq.n	80073d8 <__sflush_r+0x8c>
 80073d2:	4628      	mov	r0, r5
 80073d4:	f7ff faac 	bl	8006930 <_free_r>
 80073d8:	2300      	movs	r3, #0
 80073da:	6363      	str	r3, [r4, #52]	@ 0x34
 80073dc:	e00d      	b.n	80073fa <__sflush_r+0xae>
 80073de:	2301      	movs	r3, #1
 80073e0:	4628      	mov	r0, r5
 80073e2:	47b0      	blx	r6
 80073e4:	4602      	mov	r2, r0
 80073e6:	1c50      	adds	r0, r2, #1
 80073e8:	d1c9      	bne.n	800737e <__sflush_r+0x32>
 80073ea:	682b      	ldr	r3, [r5, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0c6      	beq.n	800737e <__sflush_r+0x32>
 80073f0:	2b1d      	cmp	r3, #29
 80073f2:	d001      	beq.n	80073f8 <__sflush_r+0xac>
 80073f4:	2b16      	cmp	r3, #22
 80073f6:	d11e      	bne.n	8007436 <__sflush_r+0xea>
 80073f8:	602f      	str	r7, [r5, #0]
 80073fa:	2000      	movs	r0, #0
 80073fc:	e022      	b.n	8007444 <__sflush_r+0xf8>
 80073fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007402:	b21b      	sxth	r3, r3
 8007404:	e01b      	b.n	800743e <__sflush_r+0xf2>
 8007406:	690f      	ldr	r7, [r1, #16]
 8007408:	2f00      	cmp	r7, #0
 800740a:	d0f6      	beq.n	80073fa <__sflush_r+0xae>
 800740c:	0793      	lsls	r3, r2, #30
 800740e:	680e      	ldr	r6, [r1, #0]
 8007410:	bf08      	it	eq
 8007412:	694b      	ldreq	r3, [r1, #20]
 8007414:	600f      	str	r7, [r1, #0]
 8007416:	bf18      	it	ne
 8007418:	2300      	movne	r3, #0
 800741a:	eba6 0807 	sub.w	r8, r6, r7
 800741e:	608b      	str	r3, [r1, #8]
 8007420:	f1b8 0f00 	cmp.w	r8, #0
 8007424:	dde9      	ble.n	80073fa <__sflush_r+0xae>
 8007426:	6a21      	ldr	r1, [r4, #32]
 8007428:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800742a:	4643      	mov	r3, r8
 800742c:	463a      	mov	r2, r7
 800742e:	4628      	mov	r0, r5
 8007430:	47b0      	blx	r6
 8007432:	2800      	cmp	r0, #0
 8007434:	dc08      	bgt.n	8007448 <__sflush_r+0xfc>
 8007436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800743a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800743e:	81a3      	strh	r3, [r4, #12]
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007448:	4407      	add	r7, r0
 800744a:	eba8 0800 	sub.w	r8, r8, r0
 800744e:	e7e7      	b.n	8007420 <__sflush_r+0xd4>
 8007450:	dfbffffe 	.word	0xdfbffffe

08007454 <_fflush_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	690b      	ldr	r3, [r1, #16]
 8007458:	4605      	mov	r5, r0
 800745a:	460c      	mov	r4, r1
 800745c:	b913      	cbnz	r3, 8007464 <_fflush_r+0x10>
 800745e:	2500      	movs	r5, #0
 8007460:	4628      	mov	r0, r5
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	b118      	cbz	r0, 800746e <_fflush_r+0x1a>
 8007466:	6a03      	ldr	r3, [r0, #32]
 8007468:	b90b      	cbnz	r3, 800746e <_fflush_r+0x1a>
 800746a:	f7fe fadd 	bl	8005a28 <__sinit>
 800746e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0f3      	beq.n	800745e <_fflush_r+0xa>
 8007476:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007478:	07d0      	lsls	r0, r2, #31
 800747a:	d404      	bmi.n	8007486 <_fflush_r+0x32>
 800747c:	0599      	lsls	r1, r3, #22
 800747e:	d402      	bmi.n	8007486 <_fflush_r+0x32>
 8007480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007482:	f7fe fc04 	bl	8005c8e <__retarget_lock_acquire_recursive>
 8007486:	4628      	mov	r0, r5
 8007488:	4621      	mov	r1, r4
 800748a:	f7ff ff5f 	bl	800734c <__sflush_r>
 800748e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007490:	07da      	lsls	r2, r3, #31
 8007492:	4605      	mov	r5, r0
 8007494:	d4e4      	bmi.n	8007460 <_fflush_r+0xc>
 8007496:	89a3      	ldrh	r3, [r4, #12]
 8007498:	059b      	lsls	r3, r3, #22
 800749a:	d4e1      	bmi.n	8007460 <_fflush_r+0xc>
 800749c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800749e:	f7fe fbf7 	bl	8005c90 <__retarget_lock_release_recursive>
 80074a2:	e7dd      	b.n	8007460 <_fflush_r+0xc>

080074a4 <__swbuf_r>:
 80074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a6:	460e      	mov	r6, r1
 80074a8:	4614      	mov	r4, r2
 80074aa:	4605      	mov	r5, r0
 80074ac:	b118      	cbz	r0, 80074b6 <__swbuf_r+0x12>
 80074ae:	6a03      	ldr	r3, [r0, #32]
 80074b0:	b90b      	cbnz	r3, 80074b6 <__swbuf_r+0x12>
 80074b2:	f7fe fab9 	bl	8005a28 <__sinit>
 80074b6:	69a3      	ldr	r3, [r4, #24]
 80074b8:	60a3      	str	r3, [r4, #8]
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	071a      	lsls	r2, r3, #28
 80074be:	d501      	bpl.n	80074c4 <__swbuf_r+0x20>
 80074c0:	6923      	ldr	r3, [r4, #16]
 80074c2:	b943      	cbnz	r3, 80074d6 <__swbuf_r+0x32>
 80074c4:	4621      	mov	r1, r4
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 f82a 	bl	8007520 <__swsetup_r>
 80074cc:	b118      	cbz	r0, 80074d6 <__swbuf_r+0x32>
 80074ce:	f04f 37ff 	mov.w	r7, #4294967295
 80074d2:	4638      	mov	r0, r7
 80074d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	6922      	ldr	r2, [r4, #16]
 80074da:	1a98      	subs	r0, r3, r2
 80074dc:	6963      	ldr	r3, [r4, #20]
 80074de:	b2f6      	uxtb	r6, r6
 80074e0:	4283      	cmp	r3, r0
 80074e2:	4637      	mov	r7, r6
 80074e4:	dc05      	bgt.n	80074f2 <__swbuf_r+0x4e>
 80074e6:	4621      	mov	r1, r4
 80074e8:	4628      	mov	r0, r5
 80074ea:	f7ff ffb3 	bl	8007454 <_fflush_r>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	d1ed      	bne.n	80074ce <__swbuf_r+0x2a>
 80074f2:	68a3      	ldr	r3, [r4, #8]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	60a3      	str	r3, [r4, #8]
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	6022      	str	r2, [r4, #0]
 80074fe:	701e      	strb	r6, [r3, #0]
 8007500:	6962      	ldr	r2, [r4, #20]
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	429a      	cmp	r2, r3
 8007506:	d004      	beq.n	8007512 <__swbuf_r+0x6e>
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	07db      	lsls	r3, r3, #31
 800750c:	d5e1      	bpl.n	80074d2 <__swbuf_r+0x2e>
 800750e:	2e0a      	cmp	r6, #10
 8007510:	d1df      	bne.n	80074d2 <__swbuf_r+0x2e>
 8007512:	4621      	mov	r1, r4
 8007514:	4628      	mov	r0, r5
 8007516:	f7ff ff9d 	bl	8007454 <_fflush_r>
 800751a:	2800      	cmp	r0, #0
 800751c:	d0d9      	beq.n	80074d2 <__swbuf_r+0x2e>
 800751e:	e7d6      	b.n	80074ce <__swbuf_r+0x2a>

08007520 <__swsetup_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	4b29      	ldr	r3, [pc, #164]	@ (80075c8 <__swsetup_r+0xa8>)
 8007524:	4605      	mov	r5, r0
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	460c      	mov	r4, r1
 800752a:	b118      	cbz	r0, 8007534 <__swsetup_r+0x14>
 800752c:	6a03      	ldr	r3, [r0, #32]
 800752e:	b90b      	cbnz	r3, 8007534 <__swsetup_r+0x14>
 8007530:	f7fe fa7a 	bl	8005a28 <__sinit>
 8007534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007538:	0719      	lsls	r1, r3, #28
 800753a:	d422      	bmi.n	8007582 <__swsetup_r+0x62>
 800753c:	06da      	lsls	r2, r3, #27
 800753e:	d407      	bmi.n	8007550 <__swsetup_r+0x30>
 8007540:	2209      	movs	r2, #9
 8007542:	602a      	str	r2, [r5, #0]
 8007544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007548:	81a3      	strh	r3, [r4, #12]
 800754a:	f04f 30ff 	mov.w	r0, #4294967295
 800754e:	e033      	b.n	80075b8 <__swsetup_r+0x98>
 8007550:	0758      	lsls	r0, r3, #29
 8007552:	d512      	bpl.n	800757a <__swsetup_r+0x5a>
 8007554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007556:	b141      	cbz	r1, 800756a <__swsetup_r+0x4a>
 8007558:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800755c:	4299      	cmp	r1, r3
 800755e:	d002      	beq.n	8007566 <__swsetup_r+0x46>
 8007560:	4628      	mov	r0, r5
 8007562:	f7ff f9e5 	bl	8006930 <_free_r>
 8007566:	2300      	movs	r3, #0
 8007568:	6363      	str	r3, [r4, #52]	@ 0x34
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007570:	81a3      	strh	r3, [r4, #12]
 8007572:	2300      	movs	r3, #0
 8007574:	6063      	str	r3, [r4, #4]
 8007576:	6923      	ldr	r3, [r4, #16]
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	89a3      	ldrh	r3, [r4, #12]
 800757c:	f043 0308 	orr.w	r3, r3, #8
 8007580:	81a3      	strh	r3, [r4, #12]
 8007582:	6923      	ldr	r3, [r4, #16]
 8007584:	b94b      	cbnz	r3, 800759a <__swsetup_r+0x7a>
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800758c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007590:	d003      	beq.n	800759a <__swsetup_r+0x7a>
 8007592:	4621      	mov	r1, r4
 8007594:	4628      	mov	r0, r5
 8007596:	f000 f89d 	bl	80076d4 <__smakebuf_r>
 800759a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800759e:	f013 0201 	ands.w	r2, r3, #1
 80075a2:	d00a      	beq.n	80075ba <__swsetup_r+0x9a>
 80075a4:	2200      	movs	r2, #0
 80075a6:	60a2      	str	r2, [r4, #8]
 80075a8:	6962      	ldr	r2, [r4, #20]
 80075aa:	4252      	negs	r2, r2
 80075ac:	61a2      	str	r2, [r4, #24]
 80075ae:	6922      	ldr	r2, [r4, #16]
 80075b0:	b942      	cbnz	r2, 80075c4 <__swsetup_r+0xa4>
 80075b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075b6:	d1c5      	bne.n	8007544 <__swsetup_r+0x24>
 80075b8:	bd38      	pop	{r3, r4, r5, pc}
 80075ba:	0799      	lsls	r1, r3, #30
 80075bc:	bf58      	it	pl
 80075be:	6962      	ldrpl	r2, [r4, #20]
 80075c0:	60a2      	str	r2, [r4, #8]
 80075c2:	e7f4      	b.n	80075ae <__swsetup_r+0x8e>
 80075c4:	2000      	movs	r0, #0
 80075c6:	e7f7      	b.n	80075b8 <__swsetup_r+0x98>
 80075c8:	20000180 	.word	0x20000180

080075cc <memcpy>:
 80075cc:	440a      	add	r2, r1
 80075ce:	4291      	cmp	r1, r2
 80075d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80075d4:	d100      	bne.n	80075d8 <memcpy+0xc>
 80075d6:	4770      	bx	lr
 80075d8:	b510      	push	{r4, lr}
 80075da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075e2:	4291      	cmp	r1, r2
 80075e4:	d1f9      	bne.n	80075da <memcpy+0xe>
 80075e6:	bd10      	pop	{r4, pc}

080075e8 <__assert_func>:
 80075e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075ea:	4614      	mov	r4, r2
 80075ec:	461a      	mov	r2, r3
 80075ee:	4b09      	ldr	r3, [pc, #36]	@ (8007614 <__assert_func+0x2c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4605      	mov	r5, r0
 80075f4:	68d8      	ldr	r0, [r3, #12]
 80075f6:	b954      	cbnz	r4, 800760e <__assert_func+0x26>
 80075f8:	4b07      	ldr	r3, [pc, #28]	@ (8007618 <__assert_func+0x30>)
 80075fa:	461c      	mov	r4, r3
 80075fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007600:	9100      	str	r1, [sp, #0]
 8007602:	462b      	mov	r3, r5
 8007604:	4905      	ldr	r1, [pc, #20]	@ (800761c <__assert_func+0x34>)
 8007606:	f000 f82d 	bl	8007664 <fiprintf>
 800760a:	f000 f8c1 	bl	8007790 <abort>
 800760e:	4b04      	ldr	r3, [pc, #16]	@ (8007620 <__assert_func+0x38>)
 8007610:	e7f4      	b.n	80075fc <__assert_func+0x14>
 8007612:	bf00      	nop
 8007614:	20000180 	.word	0x20000180
 8007618:	08007e86 	.word	0x08007e86
 800761c:	08007e58 	.word	0x08007e58
 8007620:	08007e4b 	.word	0x08007e4b

08007624 <__ascii_mbtowc>:
 8007624:	b082      	sub	sp, #8
 8007626:	b901      	cbnz	r1, 800762a <__ascii_mbtowc+0x6>
 8007628:	a901      	add	r1, sp, #4
 800762a:	b142      	cbz	r2, 800763e <__ascii_mbtowc+0x1a>
 800762c:	b14b      	cbz	r3, 8007642 <__ascii_mbtowc+0x1e>
 800762e:	7813      	ldrb	r3, [r2, #0]
 8007630:	600b      	str	r3, [r1, #0]
 8007632:	7812      	ldrb	r2, [r2, #0]
 8007634:	1e10      	subs	r0, r2, #0
 8007636:	bf18      	it	ne
 8007638:	2001      	movne	r0, #1
 800763a:	b002      	add	sp, #8
 800763c:	4770      	bx	lr
 800763e:	4610      	mov	r0, r2
 8007640:	e7fb      	b.n	800763a <__ascii_mbtowc+0x16>
 8007642:	f06f 0001 	mvn.w	r0, #1
 8007646:	e7f8      	b.n	800763a <__ascii_mbtowc+0x16>

08007648 <__ascii_wctomb>:
 8007648:	4603      	mov	r3, r0
 800764a:	4608      	mov	r0, r1
 800764c:	b141      	cbz	r1, 8007660 <__ascii_wctomb+0x18>
 800764e:	2aff      	cmp	r2, #255	@ 0xff
 8007650:	d904      	bls.n	800765c <__ascii_wctomb+0x14>
 8007652:	228a      	movs	r2, #138	@ 0x8a
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	f04f 30ff 	mov.w	r0, #4294967295
 800765a:	4770      	bx	lr
 800765c:	700a      	strb	r2, [r1, #0]
 800765e:	2001      	movs	r0, #1
 8007660:	4770      	bx	lr
	...

08007664 <fiprintf>:
 8007664:	b40e      	push	{r1, r2, r3}
 8007666:	b503      	push	{r0, r1, lr}
 8007668:	4601      	mov	r1, r0
 800766a:	ab03      	add	r3, sp, #12
 800766c:	4805      	ldr	r0, [pc, #20]	@ (8007684 <fiprintf+0x20>)
 800766e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007672:	6800      	ldr	r0, [r0, #0]
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	f7ff fd51 	bl	800711c <_vfiprintf_r>
 800767a:	b002      	add	sp, #8
 800767c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007680:	b003      	add	sp, #12
 8007682:	4770      	bx	lr
 8007684:	20000180 	.word	0x20000180

08007688 <__swhatbuf_r>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	460c      	mov	r4, r1
 800768c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007690:	2900      	cmp	r1, #0
 8007692:	b096      	sub	sp, #88	@ 0x58
 8007694:	4615      	mov	r5, r2
 8007696:	461e      	mov	r6, r3
 8007698:	da0d      	bge.n	80076b6 <__swhatbuf_r+0x2e>
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80076a0:	f04f 0100 	mov.w	r1, #0
 80076a4:	bf14      	ite	ne
 80076a6:	2340      	movne	r3, #64	@ 0x40
 80076a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80076ac:	2000      	movs	r0, #0
 80076ae:	6031      	str	r1, [r6, #0]
 80076b0:	602b      	str	r3, [r5, #0]
 80076b2:	b016      	add	sp, #88	@ 0x58
 80076b4:	bd70      	pop	{r4, r5, r6, pc}
 80076b6:	466a      	mov	r2, sp
 80076b8:	f000 f848 	bl	800774c <_fstat_r>
 80076bc:	2800      	cmp	r0, #0
 80076be:	dbec      	blt.n	800769a <__swhatbuf_r+0x12>
 80076c0:	9901      	ldr	r1, [sp, #4]
 80076c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80076c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80076ca:	4259      	negs	r1, r3
 80076cc:	4159      	adcs	r1, r3
 80076ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076d2:	e7eb      	b.n	80076ac <__swhatbuf_r+0x24>

080076d4 <__smakebuf_r>:
 80076d4:	898b      	ldrh	r3, [r1, #12]
 80076d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076d8:	079d      	lsls	r5, r3, #30
 80076da:	4606      	mov	r6, r0
 80076dc:	460c      	mov	r4, r1
 80076de:	d507      	bpl.n	80076f0 <__smakebuf_r+0x1c>
 80076e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	6123      	str	r3, [r4, #16]
 80076e8:	2301      	movs	r3, #1
 80076ea:	6163      	str	r3, [r4, #20]
 80076ec:	b003      	add	sp, #12
 80076ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076f0:	ab01      	add	r3, sp, #4
 80076f2:	466a      	mov	r2, sp
 80076f4:	f7ff ffc8 	bl	8007688 <__swhatbuf_r>
 80076f8:	9f00      	ldr	r7, [sp, #0]
 80076fa:	4605      	mov	r5, r0
 80076fc:	4639      	mov	r1, r7
 80076fe:	4630      	mov	r0, r6
 8007700:	f7fd fc22 	bl	8004f48 <_malloc_r>
 8007704:	b948      	cbnz	r0, 800771a <__smakebuf_r+0x46>
 8007706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800770a:	059a      	lsls	r2, r3, #22
 800770c:	d4ee      	bmi.n	80076ec <__smakebuf_r+0x18>
 800770e:	f023 0303 	bic.w	r3, r3, #3
 8007712:	f043 0302 	orr.w	r3, r3, #2
 8007716:	81a3      	strh	r3, [r4, #12]
 8007718:	e7e2      	b.n	80076e0 <__smakebuf_r+0xc>
 800771a:	89a3      	ldrh	r3, [r4, #12]
 800771c:	6020      	str	r0, [r4, #0]
 800771e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007722:	81a3      	strh	r3, [r4, #12]
 8007724:	9b01      	ldr	r3, [sp, #4]
 8007726:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800772a:	b15b      	cbz	r3, 8007744 <__smakebuf_r+0x70>
 800772c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007730:	4630      	mov	r0, r6
 8007732:	f000 f81d 	bl	8007770 <_isatty_r>
 8007736:	b128      	cbz	r0, 8007744 <__smakebuf_r+0x70>
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	f023 0303 	bic.w	r3, r3, #3
 800773e:	f043 0301 	orr.w	r3, r3, #1
 8007742:	81a3      	strh	r3, [r4, #12]
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	431d      	orrs	r5, r3
 8007748:	81a5      	strh	r5, [r4, #12]
 800774a:	e7cf      	b.n	80076ec <__smakebuf_r+0x18>

0800774c <_fstat_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	4d07      	ldr	r5, [pc, #28]	@ (800776c <_fstat_r+0x20>)
 8007750:	2300      	movs	r3, #0
 8007752:	4604      	mov	r4, r0
 8007754:	4608      	mov	r0, r1
 8007756:	4611      	mov	r1, r2
 8007758:	602b      	str	r3, [r5, #0]
 800775a:	f7fa fef1 	bl	8002540 <_fstat>
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	d102      	bne.n	8007768 <_fstat_r+0x1c>
 8007762:	682b      	ldr	r3, [r5, #0]
 8007764:	b103      	cbz	r3, 8007768 <_fstat_r+0x1c>
 8007766:	6023      	str	r3, [r4, #0]
 8007768:	bd38      	pop	{r3, r4, r5, pc}
 800776a:	bf00      	nop
 800776c:	2000064c 	.word	0x2000064c

08007770 <_isatty_r>:
 8007770:	b538      	push	{r3, r4, r5, lr}
 8007772:	4d06      	ldr	r5, [pc, #24]	@ (800778c <_isatty_r+0x1c>)
 8007774:	2300      	movs	r3, #0
 8007776:	4604      	mov	r4, r0
 8007778:	4608      	mov	r0, r1
 800777a:	602b      	str	r3, [r5, #0]
 800777c:	f7fa fef0 	bl	8002560 <_isatty>
 8007780:	1c43      	adds	r3, r0, #1
 8007782:	d102      	bne.n	800778a <_isatty_r+0x1a>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	b103      	cbz	r3, 800778a <_isatty_r+0x1a>
 8007788:	6023      	str	r3, [r4, #0]
 800778a:	bd38      	pop	{r3, r4, r5, pc}
 800778c:	2000064c 	.word	0x2000064c

08007790 <abort>:
 8007790:	b508      	push	{r3, lr}
 8007792:	2006      	movs	r0, #6
 8007794:	f000 f82c 	bl	80077f0 <raise>
 8007798:	2001      	movs	r0, #1
 800779a:	f7fa fe9d 	bl	80024d8 <_exit>

0800779e <_raise_r>:
 800779e:	291f      	cmp	r1, #31
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4605      	mov	r5, r0
 80077a4:	460c      	mov	r4, r1
 80077a6:	d904      	bls.n	80077b2 <_raise_r+0x14>
 80077a8:	2316      	movs	r3, #22
 80077aa:	6003      	str	r3, [r0, #0]
 80077ac:	f04f 30ff 	mov.w	r0, #4294967295
 80077b0:	bd38      	pop	{r3, r4, r5, pc}
 80077b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80077b4:	b112      	cbz	r2, 80077bc <_raise_r+0x1e>
 80077b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077ba:	b94b      	cbnz	r3, 80077d0 <_raise_r+0x32>
 80077bc:	4628      	mov	r0, r5
 80077be:	f000 f831 	bl	8007824 <_getpid_r>
 80077c2:	4622      	mov	r2, r4
 80077c4:	4601      	mov	r1, r0
 80077c6:	4628      	mov	r0, r5
 80077c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077cc:	f000 b818 	b.w	8007800 <_kill_r>
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d00a      	beq.n	80077ea <_raise_r+0x4c>
 80077d4:	1c59      	adds	r1, r3, #1
 80077d6:	d103      	bne.n	80077e0 <_raise_r+0x42>
 80077d8:	2316      	movs	r3, #22
 80077da:	6003      	str	r3, [r0, #0]
 80077dc:	2001      	movs	r0, #1
 80077de:	e7e7      	b.n	80077b0 <_raise_r+0x12>
 80077e0:	2100      	movs	r1, #0
 80077e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80077e6:	4620      	mov	r0, r4
 80077e8:	4798      	blx	r3
 80077ea:	2000      	movs	r0, #0
 80077ec:	e7e0      	b.n	80077b0 <_raise_r+0x12>
	...

080077f0 <raise>:
 80077f0:	4b02      	ldr	r3, [pc, #8]	@ (80077fc <raise+0xc>)
 80077f2:	4601      	mov	r1, r0
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	f7ff bfd2 	b.w	800779e <_raise_r>
 80077fa:	bf00      	nop
 80077fc:	20000180 	.word	0x20000180

08007800 <_kill_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d07      	ldr	r5, [pc, #28]	@ (8007820 <_kill_r+0x20>)
 8007804:	2300      	movs	r3, #0
 8007806:	4604      	mov	r4, r0
 8007808:	4608      	mov	r0, r1
 800780a:	4611      	mov	r1, r2
 800780c:	602b      	str	r3, [r5, #0]
 800780e:	f7fa fe53 	bl	80024b8 <_kill>
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	d102      	bne.n	800781c <_kill_r+0x1c>
 8007816:	682b      	ldr	r3, [r5, #0]
 8007818:	b103      	cbz	r3, 800781c <_kill_r+0x1c>
 800781a:	6023      	str	r3, [r4, #0]
 800781c:	bd38      	pop	{r3, r4, r5, pc}
 800781e:	bf00      	nop
 8007820:	2000064c 	.word	0x2000064c

08007824 <_getpid_r>:
 8007824:	f7fa be40 	b.w	80024a8 <_getpid>

08007828 <fmod>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	ed2d 8b02 	vpush	{d8}
 800782e:	ec57 6b10 	vmov	r6, r7, d0
 8007832:	ec55 4b11 	vmov	r4, r5, d1
 8007836:	f000 f8a3 	bl	8007980 <__ieee754_fmod>
 800783a:	4622      	mov	r2, r4
 800783c:	462b      	mov	r3, r5
 800783e:	4630      	mov	r0, r6
 8007840:	4639      	mov	r1, r7
 8007842:	eeb0 8a40 	vmov.f32	s16, s0
 8007846:	eef0 8a60 	vmov.f32	s17, s1
 800784a:	f7f9 f977 	bl	8000b3c <__aeabi_dcmpun>
 800784e:	b990      	cbnz	r0, 8007876 <fmod+0x4e>
 8007850:	2200      	movs	r2, #0
 8007852:	2300      	movs	r3, #0
 8007854:	4620      	mov	r0, r4
 8007856:	4629      	mov	r1, r5
 8007858:	f7f9 f93e 	bl	8000ad8 <__aeabi_dcmpeq>
 800785c:	b158      	cbz	r0, 8007876 <fmod+0x4e>
 800785e:	f7fe f9eb 	bl	8005c38 <__errno>
 8007862:	2321      	movs	r3, #33	@ 0x21
 8007864:	6003      	str	r3, [r0, #0]
 8007866:	2200      	movs	r2, #0
 8007868:	2300      	movs	r3, #0
 800786a:	4610      	mov	r0, r2
 800786c:	4619      	mov	r1, r3
 800786e:	f7f8 fff5 	bl	800085c <__aeabi_ddiv>
 8007872:	ec41 0b18 	vmov	d8, r0, r1
 8007876:	eeb0 0a48 	vmov.f32	s0, s16
 800787a:	eef0 0a68 	vmov.f32	s1, s17
 800787e:	ecbd 8b02 	vpop	{d8}
 8007882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007884:	0000      	movs	r0, r0
	...

08007888 <ceil>:
 8007888:	ec51 0b10 	vmov	r0, r1, d0
 800788c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007894:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007898:	2e13      	cmp	r6, #19
 800789a:	460c      	mov	r4, r1
 800789c:	4605      	mov	r5, r0
 800789e:	4680      	mov	r8, r0
 80078a0:	dc2e      	bgt.n	8007900 <ceil+0x78>
 80078a2:	2e00      	cmp	r6, #0
 80078a4:	da11      	bge.n	80078ca <ceil+0x42>
 80078a6:	a332      	add	r3, pc, #200	@ (adr r3, 8007970 <ceil+0xe8>)
 80078a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ac:	f7f8 fcf6 	bl	800029c <__adddf3>
 80078b0:	2200      	movs	r2, #0
 80078b2:	2300      	movs	r3, #0
 80078b4:	f7f9 f938 	bl	8000b28 <__aeabi_dcmpgt>
 80078b8:	b120      	cbz	r0, 80078c4 <ceil+0x3c>
 80078ba:	2c00      	cmp	r4, #0
 80078bc:	db4f      	blt.n	800795e <ceil+0xd6>
 80078be:	4325      	orrs	r5, r4
 80078c0:	d151      	bne.n	8007966 <ceil+0xde>
 80078c2:	462c      	mov	r4, r5
 80078c4:	4621      	mov	r1, r4
 80078c6:	4628      	mov	r0, r5
 80078c8:	e023      	b.n	8007912 <ceil+0x8a>
 80078ca:	4f2b      	ldr	r7, [pc, #172]	@ (8007978 <ceil+0xf0>)
 80078cc:	4137      	asrs	r7, r6
 80078ce:	ea01 0307 	and.w	r3, r1, r7
 80078d2:	4303      	orrs	r3, r0
 80078d4:	d01d      	beq.n	8007912 <ceil+0x8a>
 80078d6:	a326      	add	r3, pc, #152	@ (adr r3, 8007970 <ceil+0xe8>)
 80078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078dc:	f7f8 fcde 	bl	800029c <__adddf3>
 80078e0:	2200      	movs	r2, #0
 80078e2:	2300      	movs	r3, #0
 80078e4:	f7f9 f920 	bl	8000b28 <__aeabi_dcmpgt>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d0eb      	beq.n	80078c4 <ceil+0x3c>
 80078ec:	2c00      	cmp	r4, #0
 80078ee:	bfc2      	ittt	gt
 80078f0:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80078f4:	4133      	asrgt	r3, r6
 80078f6:	18e4      	addgt	r4, r4, r3
 80078f8:	ea24 0407 	bic.w	r4, r4, r7
 80078fc:	2500      	movs	r5, #0
 80078fe:	e7e1      	b.n	80078c4 <ceil+0x3c>
 8007900:	2e33      	cmp	r6, #51	@ 0x33
 8007902:	dd0a      	ble.n	800791a <ceil+0x92>
 8007904:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007908:	d103      	bne.n	8007912 <ceil+0x8a>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	f7f8 fcc5 	bl	800029c <__adddf3>
 8007912:	ec41 0b10 	vmov	d0, r0, r1
 8007916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800791a:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800791e:	f04f 37ff 	mov.w	r7, #4294967295
 8007922:	40df      	lsrs	r7, r3
 8007924:	4238      	tst	r0, r7
 8007926:	d0f4      	beq.n	8007912 <ceil+0x8a>
 8007928:	a311      	add	r3, pc, #68	@ (adr r3, 8007970 <ceil+0xe8>)
 800792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792e:	f7f8 fcb5 	bl	800029c <__adddf3>
 8007932:	2200      	movs	r2, #0
 8007934:	2300      	movs	r3, #0
 8007936:	f7f9 f8f7 	bl	8000b28 <__aeabi_dcmpgt>
 800793a:	2800      	cmp	r0, #0
 800793c:	d0c2      	beq.n	80078c4 <ceil+0x3c>
 800793e:	2c00      	cmp	r4, #0
 8007940:	dd0a      	ble.n	8007958 <ceil+0xd0>
 8007942:	2e14      	cmp	r6, #20
 8007944:	d101      	bne.n	800794a <ceil+0xc2>
 8007946:	3401      	adds	r4, #1
 8007948:	e006      	b.n	8007958 <ceil+0xd0>
 800794a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800794e:	2301      	movs	r3, #1
 8007950:	40b3      	lsls	r3, r6
 8007952:	441d      	add	r5, r3
 8007954:	45a8      	cmp	r8, r5
 8007956:	d8f6      	bhi.n	8007946 <ceil+0xbe>
 8007958:	ea25 0507 	bic.w	r5, r5, r7
 800795c:	e7b2      	b.n	80078c4 <ceil+0x3c>
 800795e:	2500      	movs	r5, #0
 8007960:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8007964:	e7ae      	b.n	80078c4 <ceil+0x3c>
 8007966:	4c05      	ldr	r4, [pc, #20]	@ (800797c <ceil+0xf4>)
 8007968:	2500      	movs	r5, #0
 800796a:	e7ab      	b.n	80078c4 <ceil+0x3c>
 800796c:	f3af 8000 	nop.w
 8007970:	8800759c 	.word	0x8800759c
 8007974:	7e37e43c 	.word	0x7e37e43c
 8007978:	000fffff 	.word	0x000fffff
 800797c:	3ff00000 	.word	0x3ff00000

08007980 <__ieee754_fmod>:
 8007980:	ec53 2b11 	vmov	r2, r3, d1
 8007984:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8007988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800798c:	ea52 040c 	orrs.w	r4, r2, ip
 8007990:	ec51 0b10 	vmov	r0, r1, d0
 8007994:	461e      	mov	r6, r3
 8007996:	4617      	mov	r7, r2
 8007998:	4696      	mov	lr, r2
 800799a:	d00c      	beq.n	80079b6 <__ieee754_fmod+0x36>
 800799c:	4c77      	ldr	r4, [pc, #476]	@ (8007b7c <__ieee754_fmod+0x1fc>)
 800799e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80079a2:	45a0      	cmp	r8, r4
 80079a4:	4689      	mov	r9, r1
 80079a6:	d806      	bhi.n	80079b6 <__ieee754_fmod+0x36>
 80079a8:	4254      	negs	r4, r2
 80079aa:	4d75      	ldr	r5, [pc, #468]	@ (8007b80 <__ieee754_fmod+0x200>)
 80079ac:	4314      	orrs	r4, r2
 80079ae:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 80079b2:	42ac      	cmp	r4, r5
 80079b4:	d909      	bls.n	80079ca <__ieee754_fmod+0x4a>
 80079b6:	f7f8 fe27 	bl	8000608 <__aeabi_dmul>
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	f7f8 ff4d 	bl	800085c <__aeabi_ddiv>
 80079c2:	ec41 0b10 	vmov	d0, r0, r1
 80079c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ca:	45e0      	cmp	r8, ip
 80079cc:	4682      	mov	sl, r0
 80079ce:	4604      	mov	r4, r0
 80079d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80079d4:	dc09      	bgt.n	80079ea <__ieee754_fmod+0x6a>
 80079d6:	dbf4      	blt.n	80079c2 <__ieee754_fmod+0x42>
 80079d8:	4282      	cmp	r2, r0
 80079da:	d8f2      	bhi.n	80079c2 <__ieee754_fmod+0x42>
 80079dc:	d105      	bne.n	80079ea <__ieee754_fmod+0x6a>
 80079de:	4b69      	ldr	r3, [pc, #420]	@ (8007b84 <__ieee754_fmod+0x204>)
 80079e0:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80079e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079e8:	e7eb      	b.n	80079c2 <__ieee754_fmod+0x42>
 80079ea:	4a65      	ldr	r2, [pc, #404]	@ (8007b80 <__ieee754_fmod+0x200>)
 80079ec:	ea19 0f02 	tst.w	r9, r2
 80079f0:	d148      	bne.n	8007a84 <__ieee754_fmod+0x104>
 80079f2:	f1b8 0f00 	cmp.w	r8, #0
 80079f6:	d13d      	bne.n	8007a74 <__ieee754_fmod+0xf4>
 80079f8:	4963      	ldr	r1, [pc, #396]	@ (8007b88 <__ieee754_fmod+0x208>)
 80079fa:	4653      	mov	r3, sl
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	dc36      	bgt.n	8007a6e <__ieee754_fmod+0xee>
 8007a00:	4216      	tst	r6, r2
 8007a02:	d14f      	bne.n	8007aa4 <__ieee754_fmod+0x124>
 8007a04:	f1bc 0f00 	cmp.w	ip, #0
 8007a08:	d144      	bne.n	8007a94 <__ieee754_fmod+0x114>
 8007a0a:	4a5f      	ldr	r2, [pc, #380]	@ (8007b88 <__ieee754_fmod+0x208>)
 8007a0c:	463b      	mov	r3, r7
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	dc3d      	bgt.n	8007a8e <__ieee754_fmod+0x10e>
 8007a12:	485e      	ldr	r0, [pc, #376]	@ (8007b8c <__ieee754_fmod+0x20c>)
 8007a14:	4281      	cmp	r1, r0
 8007a16:	db4a      	blt.n	8007aae <__ieee754_fmod+0x12e>
 8007a18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a20:	485a      	ldr	r0, [pc, #360]	@ (8007b8c <__ieee754_fmod+0x20c>)
 8007a22:	4282      	cmp	r2, r0
 8007a24:	db57      	blt.n	8007ad6 <__ieee754_fmod+0x156>
 8007a26:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8007a2a:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8007a2e:	1a89      	subs	r1, r1, r2
 8007a30:	1b98      	subs	r0, r3, r6
 8007a32:	eba4 070e 	sub.w	r7, r4, lr
 8007a36:	2900      	cmp	r1, #0
 8007a38:	d162      	bne.n	8007b00 <__ieee754_fmod+0x180>
 8007a3a:	4574      	cmp	r4, lr
 8007a3c:	bf38      	it	cc
 8007a3e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8007a42:	2800      	cmp	r0, #0
 8007a44:	bfa4      	itt	ge
 8007a46:	463c      	movge	r4, r7
 8007a48:	4603      	movge	r3, r0
 8007a4a:	ea53 0104 	orrs.w	r1, r3, r4
 8007a4e:	d0c6      	beq.n	80079de <__ieee754_fmod+0x5e>
 8007a50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a54:	db69      	blt.n	8007b2a <__ieee754_fmod+0x1aa>
 8007a56:	494d      	ldr	r1, [pc, #308]	@ (8007b8c <__ieee754_fmod+0x20c>)
 8007a58:	428a      	cmp	r2, r1
 8007a5a:	db6c      	blt.n	8007b36 <__ieee754_fmod+0x1b6>
 8007a5c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007a60:	432b      	orrs	r3, r5
 8007a62:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8007a66:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	e7a9      	b.n	80079c2 <__ieee754_fmod+0x42>
 8007a6e:	3901      	subs	r1, #1
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	e7c3      	b.n	80079fc <__ieee754_fmod+0x7c>
 8007a74:	4945      	ldr	r1, [pc, #276]	@ (8007b8c <__ieee754_fmod+0x20c>)
 8007a76:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	ddc0      	ble.n	8007a00 <__ieee754_fmod+0x80>
 8007a7e:	3901      	subs	r1, #1
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	e7fa      	b.n	8007a7a <__ieee754_fmod+0xfa>
 8007a84:	ea4f 5128 	mov.w	r1, r8, asr #20
 8007a88:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007a8c:	e7b8      	b.n	8007a00 <__ieee754_fmod+0x80>
 8007a8e:	3a01      	subs	r2, #1
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	e7bc      	b.n	8007a0e <__ieee754_fmod+0x8e>
 8007a94:	4a3d      	ldr	r2, [pc, #244]	@ (8007b8c <__ieee754_fmod+0x20c>)
 8007a96:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	ddb9      	ble.n	8007a12 <__ieee754_fmod+0x92>
 8007a9e:	3a01      	subs	r2, #1
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	e7fa      	b.n	8007a9a <__ieee754_fmod+0x11a>
 8007aa4:	ea4f 522c 	mov.w	r2, ip, asr #20
 8007aa8:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007aac:	e7b1      	b.n	8007a12 <__ieee754_fmod+0x92>
 8007aae:	1a40      	subs	r0, r0, r1
 8007ab0:	281f      	cmp	r0, #31
 8007ab2:	dc0a      	bgt.n	8007aca <__ieee754_fmod+0x14a>
 8007ab4:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8007ab8:	fa08 f800 	lsl.w	r8, r8, r0
 8007abc:	fa2a f303 	lsr.w	r3, sl, r3
 8007ac0:	ea43 0308 	orr.w	r3, r3, r8
 8007ac4:	fa0a f400 	lsl.w	r4, sl, r0
 8007ac8:	e7aa      	b.n	8007a20 <__ieee754_fmod+0xa0>
 8007aca:	4b31      	ldr	r3, [pc, #196]	@ (8007b90 <__ieee754_fmod+0x210>)
 8007acc:	1a5b      	subs	r3, r3, r1
 8007ace:	fa0a f303 	lsl.w	r3, sl, r3
 8007ad2:	2400      	movs	r4, #0
 8007ad4:	e7a4      	b.n	8007a20 <__ieee754_fmod+0xa0>
 8007ad6:	1a80      	subs	r0, r0, r2
 8007ad8:	281f      	cmp	r0, #31
 8007ada:	dc0a      	bgt.n	8007af2 <__ieee754_fmod+0x172>
 8007adc:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8007ae0:	fa0c fc00 	lsl.w	ip, ip, r0
 8007ae4:	fa27 f606 	lsr.w	r6, r7, r6
 8007ae8:	ea46 060c 	orr.w	r6, r6, ip
 8007aec:	fa07 fe00 	lsl.w	lr, r7, r0
 8007af0:	e79d      	b.n	8007a2e <__ieee754_fmod+0xae>
 8007af2:	4e27      	ldr	r6, [pc, #156]	@ (8007b90 <__ieee754_fmod+0x210>)
 8007af4:	1ab6      	subs	r6, r6, r2
 8007af6:	fa07 f606 	lsl.w	r6, r7, r6
 8007afa:	f04f 0e00 	mov.w	lr, #0
 8007afe:	e796      	b.n	8007a2e <__ieee754_fmod+0xae>
 8007b00:	4574      	cmp	r4, lr
 8007b02:	bf38      	it	cc
 8007b04:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	da05      	bge.n	8007b18 <__ieee754_fmod+0x198>
 8007b0c:	0fe0      	lsrs	r0, r4, #31
 8007b0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007b12:	0064      	lsls	r4, r4, #1
 8007b14:	3901      	subs	r1, #1
 8007b16:	e78b      	b.n	8007a30 <__ieee754_fmod+0xb0>
 8007b18:	ea50 0307 	orrs.w	r3, r0, r7
 8007b1c:	f43f af5f 	beq.w	80079de <__ieee754_fmod+0x5e>
 8007b20:	0ffb      	lsrs	r3, r7, #31
 8007b22:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007b26:	007c      	lsls	r4, r7, #1
 8007b28:	e7f4      	b.n	8007b14 <__ieee754_fmod+0x194>
 8007b2a:	0fe1      	lsrs	r1, r4, #31
 8007b2c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8007b30:	0064      	lsls	r4, r4, #1
 8007b32:	3a01      	subs	r2, #1
 8007b34:	e78c      	b.n	8007a50 <__ieee754_fmod+0xd0>
 8007b36:	1a89      	subs	r1, r1, r2
 8007b38:	2914      	cmp	r1, #20
 8007b3a:	dc0a      	bgt.n	8007b52 <__ieee754_fmod+0x1d2>
 8007b3c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8007b40:	fa03 f202 	lsl.w	r2, r3, r2
 8007b44:	40cc      	lsrs	r4, r1
 8007b46:	4322      	orrs	r2, r4
 8007b48:	410b      	asrs	r3, r1
 8007b4a:	ea43 0105 	orr.w	r1, r3, r5
 8007b4e:	4610      	mov	r0, r2
 8007b50:	e737      	b.n	80079c2 <__ieee754_fmod+0x42>
 8007b52:	291f      	cmp	r1, #31
 8007b54:	dc07      	bgt.n	8007b66 <__ieee754_fmod+0x1e6>
 8007b56:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8007b5a:	40cc      	lsrs	r4, r1
 8007b5c:	fa03 f202 	lsl.w	r2, r3, r2
 8007b60:	4322      	orrs	r2, r4
 8007b62:	462b      	mov	r3, r5
 8007b64:	e7f1      	b.n	8007b4a <__ieee754_fmod+0x1ca>
 8007b66:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8007b6a:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8007b6e:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8007b72:	32e2      	adds	r2, #226	@ 0xe2
 8007b74:	fa43 f202 	asr.w	r2, r3, r2
 8007b78:	e7f3      	b.n	8007b62 <__ieee754_fmod+0x1e2>
 8007b7a:	bf00      	nop
 8007b7c:	7fefffff 	.word	0x7fefffff
 8007b80:	7ff00000 	.word	0x7ff00000
 8007b84:	08007f88 	.word	0x08007f88
 8007b88:	fffffbed 	.word	0xfffffbed
 8007b8c:	fffffc02 	.word	0xfffffc02
 8007b90:	fffffbe2 	.word	0xfffffbe2

08007b94 <_init>:
 8007b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b96:	bf00      	nop
 8007b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9a:	bc08      	pop	{r3}
 8007b9c:	469e      	mov	lr, r3
 8007b9e:	4770      	bx	lr

08007ba0 <_fini>:
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	bf00      	nop
 8007ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba6:	bc08      	pop	{r3}
 8007ba8:	469e      	mov	lr, r3
 8007baa:	4770      	bx	lr
